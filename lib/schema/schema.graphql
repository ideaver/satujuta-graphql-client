type UserTypePercentage {
  userCountType: String!
  userCount: Float!
  userPercentage: Float!
}

type AccountAvgAggregate {
  id: Float
  accountNumber: Float
}

type AccountCountAggregate {
  id: Int!
  accountNumber: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  accountCategory: Int!
  _all: Int!
}

type AccountCount {
  transactionOrigins: Int!
  transactionDestination: Int!
}

type AccountMaxAggregate {
  id: Int
  accountNumber: Float
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  accountCategory: AccountCategory
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum AccountCategory {
  EQUITY
  PROJECT
  COMISSION
  CASH
  PLATFORM
  BANK
  DEBT
  POINT
}

type AccountMinAggregate {
  id: Int
  accountNumber: Float
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  accountCategory: AccountCategory
}

type AccountSumAggregate {
  id: Int
  accountNumber: Float
}

type Account {
  id: Int!
  accountNumber: Float
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  accountCategory: AccountCategory!
  user: User!
  transactionOrigins: [Transaction!]
  transactionDestination: [Transaction!]
  project: Project
  bankAccount: Bank
  _count: AccountCount!
}

type AggregateAccount {
  _count: AccountCountAggregate
  _avg: AccountAvgAggregate
  _sum: AccountSumAggregate
  _min: AccountMinAggregate
  _max: AccountMaxAggregate
}

type AddressAvgAggregate {
  id: Float
  subdistrictId: Float
}

type AddressCountAggregate {
  id: Int!
  name: Int!
  subdistrictId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type AddressMaxAggregate {
  id: Int
  name: String
  subdistrictId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type AddressMinAggregate {
  id: Int
  name: String
  subdistrictId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type AddressSumAggregate {
  id: Int
  subdistrictId: Int
}

type Address {
  id: Int!
  name: String!
  subdistrictId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  subdistrict: Subdistrict!
  user: User
  hotel: Hotel
  school: School
  Shipping: Shipping
}

type AggregateAddress {
  _count: AddressCountAggregate
  _avg: AddressAvgAggregate
  _sum: AddressSumAggregate
  _min: AddressMinAggregate
  _max: AddressMaxAggregate
}

type AggregateBank {
  _count: BankCountAggregate
  _avg: BankAvgAggregate
  _sum: BankSumAggregate
  _min: BankMinAggregate
  _max: BankMaxAggregate
}

type BankAvgAggregate {
  id: Float
  accountNumber: Float
  accountId: Float
}

type BankCountAggregate {
  id: Int!
  name: Int!
  logoUrl: Int!
  accountNumber: Int!
  isActive: Int!
  accountId: Int!
  _all: Int!
}

type BankMaxAggregate {
  id: Int
  name: String
  logoUrl: String
  accountNumber: Float
  isActive: Boolean
  accountId: Int
}

type BankMinAggregate {
  id: Int
  name: String
  logoUrl: String
  accountNumber: Float
  isActive: Boolean
  accountId: Int
}

type BankSumAggregate {
  id: Int
  accountNumber: Float
  accountId: Int
}

type Bank {
  id: Int!
  name: String!
  logoUrl: String
  accountNumber: Float
  isActive: Boolean
  accountId: Int
  account: Account
}

type BankInfoAvgAggregate {
  id: Float
  fee: Float
  queue: Float
}

type BankInfoCountAggregate {
  id: Int!
  bank_code: Int!
  name: Int!
  fee: Int!
  queue: Int!
  status: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type BankInfoCount {
  Disbursement: Int!
}

type BankInfoMaxAggregate {
  id: Int
  bank_code: String
  name: String
  fee: Int
  queue: Int
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BankInfoMinAggregate {
  id: Int
  bank_code: String
  name: String
  fee: Int
  queue: Int
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BankInfoSumAggregate {
  id: Int
  fee: Int
  queue: Int
}

type BankInfo {
  id: Int!
  bank_code: String!
  name: String!
  fee: Int!
  queue: Int!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  Disbursement: [Disbursement!]
  _count: BankInfoCount!
}

type BillAvgAggregate {
  id: Float
  amount: Float
  is_address_required: Float
  is_phone_number_required: Float
  step: Float
}

type BillCountAggregate {
  id: Int!
  title: Int!
  type: Int!
  amount: Int!
  expired_date: Int!
  redirect_url: Int!
  status: Int!
  is_address_required: Int!
  is_phone_number_required: Int!
  step: Int!
  sender_name: Int!
  sender_email: Int!
  sender_phone_number: Int!
  sender_address: Int!
  sender_bank: Int!
  sender_bank_type: Int!
  _all: Int!
}

type BillMaxAggregate {
  id: Int
  title: String
  type: BillType
  amount: Int
  expired_date: DateTime
  redirect_url: String
  status: BillStatus
  is_address_required: Int
  is_phone_number_required: Int
  step: Int
  sender_name: String
  sender_email: String
  sender_phone_number: String
  sender_address: String
  sender_bank: String
  sender_bank_type: BillSenderBankType
}

enum BillType {
  SINGLE
  MULTIPLE
}

enum BillStatus {
  ACTIVE
  INACTIVE
}

enum BillSenderBankType {
  virtual_account
  wallet_account
}

type BillMinAggregate {
  id: Int
  title: String
  type: BillType
  amount: Int
  expired_date: DateTime
  redirect_url: String
  status: BillStatus
  is_address_required: Int
  is_phone_number_required: Int
  step: Int
  sender_name: String
  sender_email: String
  sender_phone_number: String
  sender_address: String
  sender_bank: String
  sender_bank_type: BillSenderBankType
}

type BillSumAggregate {
  id: Int
  amount: Int
  is_address_required: Int
  is_phone_number_required: Int
  step: Int
}

type AggregateCart {
  _count: CartCountAggregate
  _avg: CartAvgAggregate
  _sum: CartSumAggregate
  _min: CartMinAggregate
  _max: CartMaxAggregate
}

type CartAvgAggregate {
  id: Float
  orderId: Float
  membershipItemId: Float
  projectItemId: Float
  quantity: Float
  price: Float
  cost: Float
}

type CartCountAggregate {
  id: Int!
  orderId: Int!
  membershipItemId: Int!
  projectItemId: Int!
  quantity: Int!
  price: Int!
  cost: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type CartMaxAggregate {
  id: Int
  orderId: Int
  membershipItemId: Int
  projectItemId: Int
  quantity: Int
  price: Float
  cost: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CartMinAggregate {
  id: Int
  orderId: Int
  membershipItemId: Int
  projectItemId: Int
  quantity: Int
  price: Float
  cost: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CartSumAggregate {
  id: Int
  orderId: Int
  membershipItemId: Int
  projectItemId: Int
  quantity: Int
  price: Float
  cost: Float
}

type Cart {
  id: Int!
  orderId: Int!
  membershipItemId: Int
  projectItemId: Int
  quantity: Int!
  price: Float!
  cost: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  membershipItem: Item
  projectItem: Project
}

type AggregateCheckIn {
  _count: CheckInCountAggregate
  _avg: CheckInAvgAggregate
  _sum: CheckInSumAggregate
  _min: CheckInMinAggregate
  _max: CheckInMaxAggregate
}

type CheckInAvgAggregate {
  id: Float
  hotelId: Float
}

type CheckInCountAggregate {
  id: Int!
  userId: Int!
  hotelId: Int!
  checkInAt: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type CheckInMaxAggregate {
  id: Int
  userId: String
  hotelId: Int
  checkInAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type CheckInMinAggregate {
  id: Int
  userId: String
  hotelId: Int
  checkInAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type CheckInSumAggregate {
  id: Int
  hotelId: Int
}

type CheckIn {
  id: Int!
  userId: String!
  hotelId: Int!
  checkInAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  hotel: Hotel!
}

type AggregateCity {
  _count: CityCountAggregate
  _avg: CityAvgAggregate
  _sum: CitySumAggregate
  _min: CityMinAggregate
  _max: CityMaxAggregate
}

type CityAvgAggregate {
  id: Float
  provinceId: Float
}

type CityCountAggregate {
  id: Int!
  name: Int!
  provinceId: Int!
  _all: Int!
}

type CityCount {
  districts: Int!
}

type CityMaxAggregate {
  id: Int
  name: String
  provinceId: Int
}

type CityMinAggregate {
  id: Int
  name: String
  provinceId: Int
}

type CitySumAggregate {
  id: Int
  provinceId: Int
}

type City {
  id: Int!
  name: String!
  provinceId: Int!
  province: Province!
  districts: [District!]
  _count: CityCount!
}

type DisbursementAvgAggregate {
  id: Float
  user_id: Float
  amount: Float
  bundle_id: Float
  company_id: Float
  recipient_city: Float
  fee: Float
  bankInfoId: Float
}

type DisbursementCountAggregate {
  id: Int!
  user_id: Int!
  amount: Int!
  status: Int!
  reason: Int!
  timestamp: Int!
  bank_code: Int!
  account_number: Int!
  recipient_name: Int!
  sender_bank: Int!
  remark: Int!
  receipt: Int!
  time_served: Int!
  bundle_id: Int!
  company_id: Int!
  recipient_city: Int!
  created_from: Int!
  direction: Int!
  sender: Int!
  fee: Int!
  beneficiary_email: Int!
  idempotency_key: Int!
  createdAt: Int!
  updatedAt: Int!
  bankInfoId: Int!
  _all: Int!
}

type DisbursementMaxAggregate {
  id: Int
  user_id: Int
  amount: Int
  status: String
  reason: String
  timestamp: String
  bank_code: String
  account_number: String
  recipient_name: String
  sender_bank: String
  remark: String
  receipt: String
  time_served: String
  bundle_id: Int
  company_id: Int
  recipient_city: Int
  created_from: String
  direction: String
  sender: String
  fee: Int
  beneficiary_email: String
  idempotency_key: String
  createdAt: DateTime
  updatedAt: DateTime
  bankInfoId: Int
}

type DisbursementMinAggregate {
  id: Int
  user_id: Int
  amount: Int
  status: String
  reason: String
  timestamp: String
  bank_code: String
  account_number: String
  recipient_name: String
  sender_bank: String
  remark: String
  receipt: String
  time_served: String
  bundle_id: Int
  company_id: Int
  recipient_city: Int
  created_from: String
  direction: String
  sender: String
  fee: Int
  beneficiary_email: String
  idempotency_key: String
  createdAt: DateTime
  updatedAt: DateTime
  bankInfoId: Int
}

type DisbursementSumAggregate {
  id: Int
  user_id: Int
  amount: Int
  bundle_id: Int
  company_id: Int
  recipient_city: Int
  fee: Int
  bankInfoId: Int
}

type Disbursement {
  id: Int!
  user_id: Int!
  amount: Int!
  status: String!
  reason: String!
  timestamp: String!
  bank_code: String!
  account_number: String!
  recipient_name: String!
  sender_bank: String
  remark: String!
  receipt: String!
  time_served: String!
  bundle_id: Int!
  company_id: Int!
  recipient_city: Int!
  created_from: String!
  direction: String!
  sender: String
  fee: Int!
  beneficiary_email: String!
  idempotency_key: String
  createdAt: DateTime
  updatedAt: DateTime
  bankInfoId: Int
  BankInfo: BankInfo
}

type AggregateDistrict {
  _count: DistrictCountAggregate
  _avg: DistrictAvgAggregate
  _sum: DistrictSumAggregate
  _min: DistrictMinAggregate
  _max: DistrictMaxAggregate
}

type DistrictAvgAggregate {
  id: Float
  cityId: Float
}

type DistrictCountAggregate {
  id: Int!
  name: Int!
  cityId: Int!
  _all: Int!
}

type DistrictCount {
  subdistricts: Int!
}

type DistrictMaxAggregate {
  id: Int
  name: String
  cityId: Int
}

type DistrictMinAggregate {
  id: Int
  name: String
  cityId: Int
}

type DistrictSumAggregate {
  id: Int
  cityId: Int
}

type District {
  id: Int!
  name: String!
  cityId: Int!
  city: City!
  subdistricts: [Subdistrict!]
  _count: DistrictCount!
}

type AggregateFaq {
  _count: FaqCountAggregate
  _avg: FaqAvgAggregate
  _sum: FaqSumAggregate
  _min: FaqMinAggregate
  _max: FaqMaxAggregate
}

type FaqAvgAggregate {
  id: Float
}

type FaqCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  createdAt: Int!
  updatedAt: Int!
  type: Int!
  _all: Int!
}

type FaqMaxAggregate {
  id: Int
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  type: FaqType
}

enum FaqType {
  REFERRAL_PAGE
  DASHBOARD_PAGE
  REWARD_PAGE
  PROJECT_PAGE
}

type FaqMinAggregate {
  id: Int
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  type: FaqType
}

type FaqSumAggregate {
  id: Int
}

type Faq {
  id: Int!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: FaqType!
}

type AggregateFile {
  _count: FileCountAggregate
  _avg: FileAvgAggregate
  _sum: FileSumAggregate
  _min: FileMinAggregate
  _max: FileMaxAggregate
}

type FileAvgAggregate {
  id: Float
  filesize: Float
}

type FileCountAggregate {
  id: Int!
  fileType: Int!
  filesize: Int!
  name: Int!
  description: Int!
  url: Int!
  createdById: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type FileMaxAggregate {
  id: Int
  fileType: FileType
  filesize: Float
  name: String
  description: String
  url: String
  createdById: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum FileType {
  UNKNOWN
  MP4
  JPG
  PNG
  PDF
}

type FileMinAggregate {
  id: Int
  fileType: FileType
  filesize: Float
  name: String
  description: String
  url: String
  createdById: String
  createdAt: DateTime
  updatedAt: DateTime
}

type FileSumAggregate {
  id: Int
  filesize: Float
}

type File {
  id: Int!
  fileType: FileType!
  filesize: Float!
  name: String!
  description: String!
  url: String!
  createdById: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
}

type AggregateHotel {
  _count: HotelCountAggregate
  _avg: HotelAvgAggregate
  _sum: HotelSumAggregate
  _min: HotelMinAggregate
  _max: HotelMaxAggregate
}

type HotelAvgAggregate {
  id: Float
  addressId: Float
  rating: Float
  quota: Float
}

type HotelCountAggregate {
  id: Int!
  name: Int!
  addressId: Int!
  description: Int!
  rating: Int!
  startDate: Int!
  quota: Int!
  createdById: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type HotelCount {
  images: Int!
  checkIns: Int!
}

type HotelMaxAggregate {
  id: Int
  name: String
  addressId: Int
  description: String
  rating: Float
  startDate: DateTime
  quota: Int
  createdById: String
  createdAt: DateTime
  updatedAt: DateTime
}

type HotelMinAggregate {
  id: Int
  name: String
  addressId: Int
  description: String
  rating: Float
  startDate: DateTime
  quota: Int
  createdById: String
  createdAt: DateTime
  updatedAt: DateTime
}

type HotelSumAggregate {
  id: Int
  addressId: Int
  rating: Float
  quota: Int
}

type Hotel {
  id: Int!
  name: String!
  addressId: Int!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  createdById: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: Address!
  images: [Images!]
  checkIns: [CheckIn!]
  createdBy: User!
  _count: HotelCount!
}

type AggregateImages {
  _count: ImagesCountAggregate
  _avg: ImagesAvgAggregate
  _sum: ImagesSumAggregate
  _min: ImagesMinAggregate
  _max: ImagesMaxAggregate
}

type ImagesAvgAggregate {
  id: Float
  fileSize: Float
  hotelImageId: Float
  programImageId: Float
  rewardImageId: Float
  projectImageId: Float
}

type ImagesCountAggregate {
  id: Int!
  fileType: Int!
  fileSize: Int!
  url: Int!
  hotelImageId: Int!
  programImageId: Int!
  rewardImageId: Int!
  projectImageId: Int!
  createdAt: Int!
  _all: Int!
}

type ImagesMaxAggregate {
  id: Int
  fileType: FileType
  fileSize: Float
  url: String
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
  createdAt: DateTime
}

type ImagesMinAggregate {
  id: Int
  fileType: FileType
  fileSize: Float
  url: String
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
  createdAt: DateTime
}

type ImagesSumAggregate {
  id: Int
  fileSize: Float
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
}

type Images {
  id: Int!
  fileType: FileType
  fileSize: Float
  url: String!
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
  createdAt: DateTime!
  hotelImage: Hotel
  programImage: Program
  rewardImage: Reward
  projectImage: Project
}

type InstallmentAvgAggregate {
  id: Float
  number: Float
  lateFee: Float
  amount: Float
  transactionId: Float
  invoiceId: Float
}

type InstallmentCountAggregate {
  id: Int!
  number: Int!
  lateFee: Int!
  amount: Int!
  dueDate: Int!
  status: Int!
  transactionId: Int!
  invoiceId: Int!
  _all: Int!
}

type InstallmentMaxAggregate {
  id: Int
  number: Int
  lateFee: Float
  amount: Float
  dueDate: DateTime
  status: InstallmentStatus
  transactionId: Int
  invoiceId: Int
}

enum InstallmentStatus {
  UPCOMING
  PAID
}

type InstallmentMinAggregate {
  id: Int
  number: Int
  lateFee: Float
  amount: Float
  dueDate: DateTime
  status: InstallmentStatus
  transactionId: Int
  invoiceId: Int
}

type InstallmentSumAggregate {
  id: Int
  number: Int
  lateFee: Float
  amount: Float
  transactionId: Int
  invoiceId: Int
}

type Installment {
  id: Int!
  number: Int!
  lateFee: Float!
  amount: Float!
  dueDate: DateTime!
  status: InstallmentStatus!
  transactionId: Int
  invoiceId: Int!
  transaction: Transaction
  invoice: Invoice!
}

type AggregateInvoice {
  _count: InvoiceCountAggregate
  _avg: InvoiceAvgAggregate
  _sum: InvoiceSumAggregate
  _min: InvoiceMinAggregate
  _max: InvoiceMaxAggregate
}

type InvoiceAvgAggregate {
  id: Float
  adminFee: Float
  amount: Float
  uniqueCode: Float
}

type InvoiceCountAggregate {
  id: Int!
  adminFee: Int!
  amount: Int!
  uniqueCode: Int!
  createdAt: Int!
  _all: Int!
}

type InvoiceCount {
  transactions: Int!
  Installments: Int!
}

type InvoiceMaxAggregate {
  id: Int
  adminFee: Float
  amount: Float
  uniqueCode: Int
  createdAt: DateTime
}

type InvoiceMinAggregate {
  id: Int
  adminFee: Float
  amount: Float
  uniqueCode: Int
  createdAt: DateTime
}

type InvoiceSumAggregate {
  id: Int
  adminFee: Float
  amount: Float
  uniqueCode: Int
}

type Invoice {
  id: Int!
  adminFee: Float!
  amount: Float!
  uniqueCode: Int!
  createdAt: DateTime!
  Order: Order
  transactions: [Transaction!]
  Installments: [Installment!]
  _count: InvoiceCount!
}

type AggregateItem {
  _count: ItemCountAggregate
  _avg: ItemAvgAggregate
  _sum: ItemSumAggregate
  _min: ItemMinAggregate
  _max: ItemMaxAggregate
}

type ItemAvgAggregate {
  id: Float
  price: Float
  cost: Float
}

type ItemCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  price: Int!
  cost: Int!
  userRole: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ItemCount {
  cart: Int!
}

type ItemMaxAggregate {
  id: Int
  name: String
  description: String
  price: Float
  cost: Float
  userRole: UserRole
  createdAt: DateTime
  updatedAt: DateTime
}

enum UserRole {
  MEMBER
  ADMIN
  SUPERUSER
  STUDENT
}

type ItemMinAggregate {
  id: Int
  name: String
  description: String
  price: Float
  cost: Float
  userRole: UserRole
  createdAt: DateTime
  updatedAt: DateTime
}

type ItemSumAggregate {
  id: Int
  price: Float
  cost: Float
}

type Item {
  id: Int!
  name: String!
  description: String!
  price: Float!
  cost: Float!
  userRole: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
  cart: [Cart!]
  _count: ItemCount!
}

type AggregateOrder {
  _count: OrderCountAggregate
  _avg: OrderAvgAggregate
  _sum: OrderSumAggregate
  _min: OrderMinAggregate
  _max: OrderMaxAggregate
}

type OrderAvgAggregate {
  id: Float
  shippingId: Float
  invoiceId: Float
  platformFee: Float
  total: Float
}

type OrderCountAggregate {
  id: Int!
  status: Int!
  orderById: Int!
  shippingId: Int!
  invoiceId: Int!
  platformFee: Int!
  total: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type OrderCount {
  cart: Int!
}

type OrderMaxAggregate {
  id: Int
  status: TransactionStatus
  orderById: String
  shippingId: Int
  invoiceId: Int
  platformFee: Float
  total: Float
  createdAt: DateTime
  updatedAt: DateTime
}

enum TransactionStatus {
  PROCESSING
  PENDING
  FAILED
  CANCELLED
  COMPLETED
}

type OrderMinAggregate {
  id: Int
  status: TransactionStatus
  orderById: String
  shippingId: Int
  invoiceId: Int
  platformFee: Float
  total: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderSumAggregate {
  id: Int
  shippingId: Int
  invoiceId: Int
  platformFee: Float
  total: Float
}

type Order {
  id: Int!
  status: TransactionStatus!
  orderById: String!
  shippingId: Int
  invoiceId: Int!
  platformFee: Float!
  total: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  orderBy: User!
  cart: [Cart!]
  shipping: Shipping
  invoice: Invoice!
  _count: OrderCount!
}

type PaymentCountAggregate {
  id: Int!
  bill_link: Int!
  bill_title: Int!
  sender_name: Int!
  sender_bank: Int!
  sender_bank_type: Int!
  virtual_account_number: Int!
  amount: Int!
  status: Int!
  settlement_status: Int!
  reference_id: Int!
  payment_url: Int!
  created_at: Int!
  completed_at: Int!
  _all: Int!
}

type PaymentMaxAggregate {
  id: String
  bill_link: String
  bill_title: String
  sender_name: String
  sender_bank: String
  sender_bank_type: SenderBankType
  virtual_account_number: String
  amount: String
  status: PaymentStatus
  settlement_status: SettlementStatus
  reference_id: String
  payment_url: String
  created_at: DateTime
  completed_at: DateTime
}

enum SenderBankType {
  bank_account
  virtual_account
  wallet_account
  bank_transfer
}

enum PaymentStatus {
  FAILED
  SUCCESSFUL
  PENDING
}

enum SettlementStatus {
  Cancelled
  Settled
  Pending
}

type PaymentMinAggregate {
  id: String
  bill_link: String
  bill_title: String
  sender_name: String
  sender_bank: String
  sender_bank_type: SenderBankType
  virtual_account_number: String
  amount: String
  status: PaymentStatus
  settlement_status: SettlementStatus
  reference_id: String
  payment_url: String
  created_at: DateTime
  completed_at: DateTime
}

type AggregateProgram {
  _count: ProgramCountAggregate
  _avg: ProgramAvgAggregate
  _sum: ProgramSumAggregate
  _min: ProgramMinAggregate
  _max: ProgramMaxAggregate
}

type ProgramAvgAggregate {
  id: Float
  categoryId: Float
}

type ProgramCountAggregate {
  id: Int!
  name: Int!
  startDate: Int!
  dueDate: Int!
  description: Int!
  createdById: Int!
  categoryId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ProgramCount {
  Images: Int!
  participant: Int!
}

type ProgramMaxAggregate {
  id: Int
  name: String
  startDate: DateTime
  dueDate: DateTime
  description: String
  createdById: String
  categoryId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ProgramMinAggregate {
  id: Int
  name: String
  startDate: DateTime
  dueDate: DateTime
  description: String
  createdById: String
  categoryId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ProgramSumAggregate {
  id: Int
  categoryId: Int
}

type Program {
  id: Int!
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  createdById: String!
  categoryId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  Images: [Images!]
  createdBy: User!
  participant: [User!]
  category: ProgramCategory!
  _count: ProgramCount!
}

type AggregateProgramCategory {
  _count: ProgramCategoryCountAggregate
  _avg: ProgramCategoryAvgAggregate
  _sum: ProgramCategorySumAggregate
  _min: ProgramCategoryMinAggregate
  _max: ProgramCategoryMaxAggregate
}

type ProgramCategoryAvgAggregate {
  id: Float
}

type ProgramCategoryCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ProgramCategoryCount {
  programs: Int!
}

type ProgramCategoryMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProgramCategoryMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProgramCategorySumAggregate {
  id: Int
}

type ProgramCategory {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  programs: [Program!]
  _count: ProgramCategoryCount!
}

type AggregateProject {
  _count: ProjectCountAggregate
  _avg: ProjectAvgAggregate
  _sum: ProjectSumAggregate
  _min: ProjectMinAggregate
  _max: ProjectMaxAggregate
}

type ProjectAvgAggregate {
  id: Float
  returnRate: Float
  goalAmount: Float
  minimumInvestment: Float
  maxInvestor: Float
  accountId: Float
}

type ProjectCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  projectCategory: Int!
  startDate: Int!
  endDate: Int!
  returnRate: Int!
  goalAmount: Int!
  minimumInvestment: Int!
  maxInvestor: Int!
  accountId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ProjectCount {
  images: Int!
  orderCart: Int!
}

type ProjectMaxAggregate {
  id: Int
  name: String
  description: String
  projectCategory: ProjectCategory
  startDate: DateTime
  endDate: DateTime
  returnRate: Float
  goalAmount: Float
  minimumInvestment: Float
  maxInvestor: Int
  accountId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum ProjectCategory {
  PROPERTY
  BUSSINESS
}

type ProjectMinAggregate {
  id: Int
  name: String
  description: String
  projectCategory: ProjectCategory
  startDate: DateTime
  endDate: DateTime
  returnRate: Float
  goalAmount: Float
  minimumInvestment: Float
  maxInvestor: Int
  accountId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectSumAggregate {
  id: Int
  returnRate: Float
  goalAmount: Float
  minimumInvestment: Float
  maxInvestor: Int
  accountId: Int
}

type Project {
  id: Int!
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Float!
  minimumInvestment: Float!
  maxInvestor: Int!
  accountId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  images: [Images!]
  orderCart: [Cart!]
  account: Account!
  _count: ProjectCount!
}

type AggregateProvince {
  _count: ProvinceCountAggregate
  _avg: ProvinceAvgAggregate
  _sum: ProvinceSumAggregate
  _min: ProvinceMinAggregate
  _max: ProvinceMaxAggregate
}

type ProvinceAvgAggregate {
  id: Float
}

type ProvinceCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

type ProvinceCount {
  cities: Int!
}

type ProvinceMaxAggregate {
  id: Int
  name: String
}

type ProvinceMinAggregate {
  id: Int
  name: String
}

type ProvinceSumAggregate {
  id: Int
}

type Province {
  id: Int!
  name: String!
  _count: ProvinceCount!
}

type AggregateReward {
  _count: RewardCountAggregate
  _avg: RewardAvgAggregate
  _sum: RewardSumAggregate
  _min: RewardMinAggregate
  _max: RewardMaxAggregate
}

type RewardAvgAggregate {
  id: Float
  pointCost: Float
}

type RewardCountAggregate {
  id: Int!
  name: Int!
  pointCost: Int!
  description: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type RewardCount {
  images: Int!
  RewardClaim: Int!
}

type RewardMaxAggregate {
  id: Int
  name: String
  pointCost: Float
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RewardMinAggregate {
  id: Int
  name: String
  pointCost: Float
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RewardSumAggregate {
  id: Int
  pointCost: Float
}

type Reward {
  id: Int!
  name: String!
  pointCost: Float!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  images: [Images!]
  RewardClaim: [RewardClaim!]
  _count: RewardCount!
}

type AggregateRewardClaim {
  _count: RewardClaimCountAggregate
  _avg: RewardClaimAvgAggregate
  _sum: RewardClaimSumAggregate
  _min: RewardClaimMinAggregate
  _max: RewardClaimMaxAggregate
}

type RewardClaimAvgAggregate {
  id: Float
  rewardId: Float
}

type RewardClaimCountAggregate {
  id: Int!
  userId: Int!
  rewardId: Int!
  processedAt: Int!
  createdAt: Int!
  _all: Int!
}

type RewardClaimMaxAggregate {
  id: Int
  userId: String
  rewardId: Int
  processedAt: DateTime
  createdAt: DateTime
}

type RewardClaimMinAggregate {
  id: Int
  userId: String
  rewardId: Int
  processedAt: DateTime
  createdAt: DateTime
}

type RewardClaimSumAggregate {
  id: Int
  rewardId: Int
}

type RewardClaim {
  id: Int!
  userId: String!
  rewardId: Int!
  processedAt: DateTime!
  createdAt: DateTime!
  user: User!
  reward: Reward!
}

type AggregateSchool {
  _count: SchoolCountAggregate
  _avg: SchoolAvgAggregate
  _sum: SchoolSumAggregate
  _min: SchoolMinAggregate
  _max: SchoolMaxAggregate
}

type SchoolAvgAggregate {
  id: Float
  addressId: Float
}

type SchoolCountAggregate {
  id: Int!
  name: Int!
  addressId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type SchoolCount {
  students: Int!
}

type SchoolMaxAggregate {
  id: Int
  name: String
  addressId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type SchoolMinAggregate {
  id: Int
  name: String
  addressId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type SchoolSumAggregate {
  id: Int
  addressId: Int
}

type School {
  id: Int!
  name: String!
  addressId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: Address!
  students: [User!]
  _count: SchoolCount!
}

type AggregateSession {
  _count: SessionCountAggregate
  _avg: SessionAvgAggregate
  _sum: SessionSumAggregate
  _min: SessionMinAggregate
  _max: SessionMaxAggregate
}

type SessionAvgAggregate {
  id: Float
  ipAddress: Float
}

type SessionCountAggregate {
  id: Int!
  token: Int!
  expiresAt: Int!
  createdAt: Int!
  userId: Int!
  device: Int!
  ipAddress: Int!
  _all: Int!
}

type SessionMaxAggregate {
  id: Int
  token: String
  expiresAt: DateTime
  createdAt: DateTime
  userId: String
  device: String
  ipAddress: Float
}

type SessionMinAggregate {
  id: Int
  token: String
  expiresAt: DateTime
  createdAt: DateTime
  userId: String
  device: String
  ipAddress: Float
}

type SessionSumAggregate {
  id: Int
  ipAddress: Float
}

type Session {
  id: Int!
  token: String!
  expiresAt: DateTime!
  createdAt: DateTime!
  userId: String!
  device: String!
  ipAddress: Float!
  user: User!
}

type AggregateShipping {
  _count: ShippingCountAggregate
  _avg: ShippingAvgAggregate
  _sum: ShippingSumAggregate
  _min: ShippingMinAggregate
  _max: ShippingMaxAggregate
}

type ShippingAvgAggregate {
  id: Float
  addressId: Float
  orderId: Float
}

type ShippingCountAggregate {
  id: Int!
  logisticName: Int!
  deliveryDate: Int!
  shippingStatus: Int!
  addressId: Int!
  courier: Int!
  estimatedTime: Int!
  trackingNo: Int!
  orderId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ShippingMaxAggregate {
  id: Int
  logisticName: String
  deliveryDate: DateTime
  shippingStatus: ShippingStatus
  addressId: Int
  courier: String
  estimatedTime: String
  trackingNo: String
  orderId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum ShippingStatus {
  PROCESSING
  DELIVERING
  DELIVERED
}

type ShippingMinAggregate {
  id: Int
  logisticName: String
  deliveryDate: DateTime
  shippingStatus: ShippingStatus
  addressId: Int
  courier: String
  estimatedTime: String
  trackingNo: String
  orderId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ShippingSumAggregate {
  id: Int
  addressId: Int
  orderId: Int
}

type Shipping {
  id: Int!
  logisticName: String!
  deliveryDate: DateTime
  shippingStatus: ShippingStatus!
  addressId: Int!
  courier: String
  estimatedTime: String
  trackingNo: String
  orderId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: Address!
  order: Order!
}

type AggregateSubdistrict {
  _count: SubdistrictCountAggregate
  _avg: SubdistrictAvgAggregate
  _sum: SubdistrictSumAggregate
  _min: SubdistrictMinAggregate
  _max: SubdistrictMaxAggregate
}

type SubdistrictAvgAggregate {
  id: Float
  districtId: Float
}

type SubdistrictCountAggregate {
  id: Int!
  name: Int!
  districtId: Int!
  postalCode: Int!
  _all: Int!
}

type SubdistrictCount {
  address: Int!
}

type SubdistrictMaxAggregate {
  id: Int
  name: String
  districtId: Int
  postalCode: String
}

type SubdistrictMinAggregate {
  id: Int
  name: String
  districtId: Int
  postalCode: String
}

type SubdistrictSumAggregate {
  id: Int
  districtId: Int
}

type Subdistrict {
  id: Int!
  name: String!
  districtId: Int!
  postalCode: String!
  district: District!
  _count: SubdistrictCount!
}

type AggregateTransaction {
  _count: TransactionCountAggregate
  _avg: TransactionAvgAggregate
  _sum: TransactionSumAggregate
  _min: TransactionMinAggregate
  _max: TransactionMaxAggregate
}

type TransactionAvgAggregate {
  id: Float
  amount: Float
  fromAccountId: Float
  toAccountId: Float
  invoiceId: Float
  installmentId: Float
  withdrawalRequestId: Float
  uniqueCode: Float
}

type TransactionCountAggregate {
  id: Int!
  amount: Int!
  proofUrl: Int!
  status: Int!
  transactionCategory: Int!
  fromAccountId: Int!
  toAccountId: Int!
  invoiceId: Int!
  installmentId: Int!
  withdrawalRequestId: Int!
  uniqueCode: Int!
  createdAt: Int!
  _all: Int!
}

type TransactionMaxAggregate {
  id: Int
  amount: Float
  proofUrl: String
  status: TransactionStatus
  transactionCategory: TransactionCategory
  fromAccountId: Int
  toAccountId: Int
  invoiceId: Int
  installmentId: Int
  withdrawalRequestId: Int
  uniqueCode: Int
  createdAt: DateTime
}

enum TransactionCategory {
  INVESTMENT
  INVESTMENT_RETURN
  COMISSION_BONUS
  WITHDRAWAL
  MEMBER_REGISTRATION
  STUDENT_REGISTRATION
  REFERRING
  REDEEMING
}

type TransactionMinAggregate {
  id: Int
  amount: Float
  proofUrl: String
  status: TransactionStatus
  transactionCategory: TransactionCategory
  fromAccountId: Int
  toAccountId: Int
  invoiceId: Int
  installmentId: Int
  withdrawalRequestId: Int
  uniqueCode: Int
  createdAt: DateTime
}

type TransactionSumAggregate {
  id: Int
  amount: Float
  fromAccountId: Int
  toAccountId: Int
  invoiceId: Int
  installmentId: Int
  withdrawalRequestId: Int
  uniqueCode: Int
}

type Transaction {
  id: Int!
  amount: Float!
  proofUrl: String
  status: TransactionStatus!
  transactionCategory: TransactionCategory!
  fromAccountId: Int!
  toAccountId: Int!
  invoiceId: Int
  installmentId: Int
  withdrawalRequestId: Int
  uniqueCode: Int
  createdAt: DateTime!
  fromAccount: Account!
  toAccount: Account!
  invoice: Invoice
  Installment: Installment
  withdrawalRequest: WithdrawalRequest
}

type AggregateUser {
  _count: UserCountAggregate
  _avg: UserAvgAggregate
  _sum: UserSumAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type UserAvgAggregate {
  addressId: Float
  schoolId: Float
}

type UserCountAggregate {
  id: Int!
  firstName: Int!
  lastName: Int!
  email: Int!
  addressId: Int!
  userRole: Int!
  userType: Int!
  avatarUrl: Int!
  whatsappNumber: Int!
  whatsappVerifiedAt: Int!
  referralCode: Int!
  referredById: Int!
  status: Int!
  schoolId: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  theme: Int!
  _all: Int!
}

type UserCount {
  referredUsers: Int!
  checkIns: Int!
  accounts: Int!
  orders: Int!
  sessions: Int!
  hotelsCreated: Int!
  programsParticipation: Int!
  claimedRewards: Int!
  withdrawalRequest: Int!
  userNotifications: Int!
  programsCreated: Int!
  filesCreated: Int!
}

type UserMaxAggregate {
  id: String
  firstName: String
  lastName: String
  email: String
  addressId: Int
  userRole: UserRole
  userType: UserType
  avatarUrl: String
  whatsappNumber: String
  whatsappVerifiedAt: DateTime
  referralCode: String
  referredById: String
  status: UserStatus
  schoolId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  theme: Theme
}

enum UserType {
  PARENT
  SCHOOL_HEAD
  STUDENT
  TEACHER
  HOUSEWIFE
  ENTREPRENEUR
  WORKER
  OTHER
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum Theme {
  LIGHT
  DARK
}

type UserMinAggregate {
  id: String
  firstName: String
  lastName: String
  email: String
  addressId: Int
  userRole: UserRole
  userType: UserType
  avatarUrl: String
  whatsappNumber: String
  whatsappVerifiedAt: DateTime
  referralCode: String
  referredById: String
  status: UserStatus
  schoolId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  theme: Theme
}

type UserSumAggregate {
  addressId: Int
  schoolId: Int
}

"""
@/O/b/j/e/c/t/T/y/p/e('UserAbstract', { isAbstract: true })
"""
type User {
  id: String!
  firstName: String!
  lastName: String
  email: String!
  addressId: Int!
  userRole: UserRole!
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  whatsappVerifiedAt: DateTime
  referralCode: String!
  referredById: String
  status: UserStatus!
  schoolId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  theme: Theme!

  """
  @Validator.IsNotEmpty(g
  """
  address: Address!
  referredBy: User
  referredUsers: [User!]
  checkIns: [CheckIn!]
  school: School
  accounts: [Account!]
  orders: [Order!]
  sessions: [Session!]
  hotelsCreated: [Hotel!]
  programsParticipation: [Program!]
  claimedRewards: [RewardClaim!]
  withdrawalRequest: [WithdrawalRequest!]
  userNotifications: [UserNotification!]
  programsCreated: [Program!]
  filesCreated: [File!]
  _count: UserCount!
}

type AggregateUserNotification {
  _count: UserNotificationCountAggregate
  _avg: UserNotificationAvgAggregate
  _sum: UserNotificationSumAggregate
  _min: UserNotificationMinAggregate
  _max: UserNotificationMaxAggregate
}

type UserNotificationAvgAggregate {
  id: Float
}

type UserNotificationCountAggregate {
  id: Int!
  title: Int!
  subtitle: Int!
  content: Int!
  createdAt: Int!
  category: Int!
  isRead: Int!
  isCleared: Int!
  userId: Int!
  deepLink: Int!
  fcmToken: Int!
  _all: Int!
}

type UserNotificationMaxAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  createdAt: DateTime
  category: UserNotificationCategory
  isRead: Boolean
  isCleared: Boolean
  userId: String
  deepLink: String
  fcmToken: String
}

enum UserNotificationCategory {
  ANNOUNCEMENT
  REFERRAL
  REWARD
  WITHDRAWAL
  INVESTMENT
  COMISSION
  PROJECT
  PROGRAM
  CHECK_IN
  INVOICE
  SHIPPING
  ORDER
  ACCOUNT
  TRANSACTION
  POINT_TRANSACTION
  INSTALLMENT
  WITHDRAWAL_REQUEST
  USER
  FILE
}

type UserNotificationMinAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  createdAt: DateTime
  category: UserNotificationCategory
  isRead: Boolean
  isCleared: Boolean
  userId: String
  deepLink: String
  fcmToken: String
}

type UserNotificationSumAggregate {
  id: Int
}

type UserNotification {
  id: Int!
  title: String!
  subtitle: String!
  content: String!
  createdAt: DateTime!
  category: UserNotificationCategory!
  isRead: Boolean!
  isCleared: Boolean!
  userId: String!
  deepLink: String
  fcmToken: String
  user: User!
}

type AggregateWithdrawalRequest {
  _count: WithdrawalRequestCountAggregate
  _avg: WithdrawalRequestAvgAggregate
  _sum: WithdrawalRequestSumAggregate
  _min: WithdrawalRequestMinAggregate
  _max: WithdrawalRequestMaxAggregate
}

type WithdrawalRequestAvgAggregate {
  id: Float
  amount: Float
  transactionId: Float
}

type WithdrawalRequestCountAggregate {
  id: Int!
  userId: Int!
  amount: Int!
  status: Int!
  proofUrl: Int!
  proofDescription: Int!
  transactionId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type WithdrawalRequestMaxAggregate {
  id: Int
  userId: String
  amount: Float
  status: TransactionStatus
  proofUrl: String
  proofDescription: String
  transactionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WithdrawalRequestMinAggregate {
  id: Int
  userId: String
  amount: Float
  status: TransactionStatus
  proofUrl: String
  proofDescription: String
  transactionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WithdrawalRequestSumAggregate {
  id: Int
  amount: Float
  transactionId: Int
}

type WithdrawalRequest {
  id: Int!
  userId: String!
  amount: Float!
  status: TransactionStatus!
  proofUrl: String
  proofDescription: String
  transactionId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  transaction: Transaction
}

type LoginResponse {
  """
  Akses token jwt
  """
  accessToken: String!
  user: User!
}

type UserCreatedByCustomPeriodQuery {
  period: String
  totalUser: Float
}

type BatchPayload {
  count: Float
}

type UserReferralPercentage {
  userReferralType: String!
  userCount: Float!
  userPercentage: Float!
}

type Top10UserWithHighestComission {
  userId: String!
  userFirstName: String!
  userLastName: String!
  amount: Float!
}

type UserFindManyOrderByAccountBalance {
  user: User!
  totalBalance: Float!
}

type AccountBalanceByCustomPeriodQuery {
  period: String
  totalBalance: Float
}

type PointDistribution {
  label: String
  count: Int
}

type Top10SchoolWithStudents {
  schoolId: Float!
  schoolName: String!
  userCount: Float!
}

type CityFindManyUser {
  cityId: Int!
  cityName: String!
  userCount: Int!
}

type GetAllDisbursement {
  total_data: Int!
  data_per_page: Int!
  total_page: Int!
  page: Int!
  data: [Disbursement!]!
}

type GetBalance {
  balance: String!
}

type GetBankInfo {
  bank_code: String!
  name: String!
  fee: Int!
  queue: Int!
  status: String!
}

type IsMaintenance {
  maintenance: Boolean!
}

type BankAccountInquiry {
  bank_code: String!
  account_number: String!
  account_holder: String!
  status: String!
  inquiry_key: String!
}

type Customer {
  name: String!
  email: String!
  address: String
  phone: String
}

type PaymentMethod {
  sender_bank: String!
  sender_bank_type: String!
}

type ReceiverBankAccount {
  account_number: String
  account_type: String
  bank_code: String
  account_holder: String
  qr_code_data: String
}

type BillPayment {
  id: String!
  amount: Float!
  unique_code: Float
  status: String!
  sender_bank: String
  sender_bank_type: String
  receiver_bank_account: ReceiverBankAccount!
  user_address: String
  user_phone: String
  created_at: Float!
}

type BillEntity {
  link_id: Float!
  link_url: String!
  title: String!
  type: String!
  amount: Float
  redirect_url: String
  expired_date: String
  created_from: String!
  status: String!
  step: Float!
  is_address_required: Float
  is_phone_number_required: Float
  customer: Customer
  payment_method: PaymentMethod
  bill_payment: BillPayment
  payment_url: String
}

type Payment {
  id: String!
  bill_link: String!
  bill_title: String!
  sender_name: String!
  sender_bank: String!
  sender_bank_type: SenderBankType!
  virtual_account_number: String
  amount: String!
  status: PaymentStatus!
  settlement_status: String!
  reference_id: String
  payment_url: String!
  created_at: String!
  completed_at: String
}

type GetPayment {
  link_id: Int!
  total_data: Int!
  data_per_page: Int!
  total_page: Int!
  page: Int!
  data: [Payment!]!
}

type GetAllPayment {
  total_data: Int!
  data_per_page: Int!
  total_page: Int!
  page: Int!
  data: [Payment!]!
}

type Query {
  """
  Deskripsinya ada disini loh
  """
  imagesFindOne(where: ImagesWhereUniqueInput!): Images

  """
  Deskripsinya ada disini loh
  """
  imagesFindMany(
    where: ImagesWhereInput
    orderBy: [ImagesOrderByWithRelationInput!]
    cursor: ImagesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ImagesScalarFieldEnum!]
  ): [Images!]

  """
  Deskripsinya ada disini loh
  """
  imagesFindFirst(
    where: ImagesWhereInput
    orderBy: [ImagesOrderByWithRelationInput!]
    cursor: ImagesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ImagesScalarFieldEnum!]
  ): Images

  """
  Deskripsinya ada disini loh
  """
  imagesAggregate(
    where: ImagesWhereInput
    orderBy: [ImagesOrderByWithRelationInput!]
    cursor: ImagesWhereUniqueInput
    take: Int
    skip: Int
    _count: ImagesCountAggregateInput
    _avg: ImagesAvgAggregateInput
    _sum: ImagesSumAggregateInput
    _min: ImagesMinAggregateInput
    _max: ImagesMaxAggregateInput
  ): AggregateImages

  """
  Deskripsinya ada disini loh
  """
  imagesCount(
    where: ImagesWhereInput
    orderBy: [ImagesOrderByWithRelationInput!]
    cursor: ImagesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ImagesScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  userFindOne(where: UserWhereUniqueInput!): User

  """
  Deskripsinya ada disini loh
  """
  userFindMany(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum!]
  ): [User!]

  """
  Deskripsinya ada disini loh
  """
  userFindFirst(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum!]
  ): User

  """
  Deskripsinya ada disini loh
  """
  userAggregate(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    _count: UserCountAggregateInput
    _avg: UserAvgAggregateInput
    _sum: UserSumAggregateInput
    _min: UserMinAggregateInput
    _max: UserMaxAggregateInput
  ): AggregateUser

  """
  Deskripsinya ada disini loh
  """
  userCount(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum!]
  ): Float

  """
  yang member berbayar saja yang dihitung
  """
  countUserTypePercentage: [UserTypePercentage!]!

  """
  yang member berbayar saja yang dihitung
  """
  countUserReferralPercentage: [UserReferralPercentage!]!

  """
  This query will:

      1. Query all users with their associated commission accounts and relevant transactions.
      2. Calculate the sum of commission bonuses from both origin and destination transactions for each user.
      3. Store user IDs and their total commission bonuses in an array.
      4. Sort the array to get the top 10 users with the highest total commission bonuses.
      5. Finally, log the top 10 users with their total commission bonuses.
  """
  countTop10UsersWithHighestCommissionBonus: [Top10UserWithHighestComission!]!

  """
  Deskripsinya ada disini loh
  """
  getUserGrowthByCustomPeriod(
    userCreatedByCustomPeriodArgs: UserCreatedByCustomPeriodArgs!
  ): [UserCreatedByCustomPeriodQuery!]!

  """
  Deskripsinya ada disini loh
  """
  itemFindOne(where: ItemWhereUniqueInput!): Item

  """
  Deskripsinya ada disini loh
  """
  itemFindMany(
    where: ItemWhereInput
    orderBy: [ItemOrderByWithRelationInput!]
    cursor: ItemWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ItemScalarFieldEnum!]
  ): [Item!]

  """
  Deskripsinya ada disini loh
  """
  itemFindFirst(
    where: ItemWhereInput
    orderBy: [ItemOrderByWithRelationInput!]
    cursor: ItemWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ItemScalarFieldEnum!]
  ): Item

  """
  Deskripsinya ada disini loh
  """
  itemAggregate(
    where: ItemWhereInput
    orderBy: [ItemOrderByWithRelationInput!]
    cursor: ItemWhereUniqueInput
    take: Int
    skip: Int
    _count: ItemCountAggregateInput
    _avg: ItemAvgAggregateInput
    _sum: ItemSumAggregateInput
    _min: ItemMinAggregateInput
    _max: ItemMaxAggregateInput
  ): AggregateItem

  """
  Deskripsinya ada disini loh
  """
  count(
    where: ItemWhereInput
    orderBy: [ItemOrderByWithRelationInput!]
    cursor: ItemWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ItemScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  programFindOne(where: ProgramWhereUniqueInput!): Program

  """
  Deskripsinya ada disini loh
  """
  programFindMany(
    where: ProgramWhereInput
    orderBy: [ProgramOrderByWithRelationInput!]
    cursor: ProgramWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProgramScalarFieldEnum!]
  ): [Program!]

  """
  Deskripsinya ada disini loh
  """
  programFindFirst(
    where: ProgramWhereInput
    orderBy: [ProgramOrderByWithRelationInput!]
    cursor: ProgramWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProgramScalarFieldEnum!]
  ): Program

  """
  Deskripsinya ada disini loh
  """
  programAggregate(
    where: ProgramWhereInput
    orderBy: [ProgramOrderByWithRelationInput!]
    cursor: ProgramWhereUniqueInput
    take: Int
    skip: Int
    _count: ProgramCountAggregateInput
    _avg: ProgramAvgAggregateInput
    _sum: ProgramSumAggregateInput
    _min: ProgramMinAggregateInput
    _max: ProgramMaxAggregateInput
  ): AggregateProgram

  """
  Deskripsinya ada disini loh
  """
  programCount(
    where: ProgramWhereInput
    orderBy: [ProgramOrderByWithRelationInput!]
    cursor: ProgramWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProgramScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  bankFindOne(where: BankWhereUniqueInput!): Bank

  """
  Deskripsinya ada disini loh
  """
  bankFindMany(
    where: BankWhereInput
    orderBy: [BankOrderByWithRelationInput!]
    cursor: BankWhereUniqueInput
    take: Int
    skip: Int
    distinct: [BankScalarFieldEnum!]
  ): [Bank!]

  """
  Deskripsinya ada disini loh
  """
  bankFindFirst(
    where: BankWhereInput
    orderBy: [BankOrderByWithRelationInput!]
    cursor: BankWhereUniqueInput
    take: Int
    skip: Int
    distinct: [BankScalarFieldEnum!]
  ): Bank

  """
  Deskripsinya ada disini loh
  """
  bankAggregate(
    where: BankWhereInput
    orderBy: [BankOrderByWithRelationInput!]
    cursor: BankWhereUniqueInput
    take: Int
    skip: Int
    _count: BankCountAggregateInput
    _avg: BankAvgAggregateInput
    _sum: BankSumAggregateInput
    _min: BankMinAggregateInput
    _max: BankMaxAggregateInput
  ): AggregateBank

  """
  Deskripsinya ada disini loh
  """
  bankCount(
    where: BankWhereInput
    orderBy: [BankOrderByWithRelationInput!]
    cursor: BankWhereUniqueInput
    take: Int
    skip: Int
    distinct: [BankScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  getAllDisbursement(
    getAllDisbursementArgs: GetAllDisbursementArgs!
  ): GetAllDisbursement

  """
  Deskripsinya ada disini loh
  """
  getDisbursementById(
    getDisbursementByIdArgs: GetDisbursementByIdArgs!
  ): Disbursement

  """
  Deskripsinya ada disini loh
  """
  getDisbursementByIdempotencyKey(
    getDisbursementByIdempotencyKeyArgs: GetDisbursementByIdempotencyKeyArgs!
  ): Disbursement

  """
  Deskripsinya ada disini loh
  """
  getBalance: GetBalance

  """
  Deskripsinya ada disini loh
  """
  getBankInfo: [GetBankInfo!]

  """
  Deskripsinya ada disini loh
  """
  isMaintenance: IsMaintenance

  """
  Deskripsinya ada disini loh
  """
  bankAccountInquiry(
    bankAccountInquiryArgs: BankAccountInquiryArgs!
  ): BankAccountInquiry

  """
  Deskripsinya ada disini loh
  """
  getBill(bill_id: String!): BillEntity

  """
  Deskripsinya ada disini loh
  """
  getAllBill: [BillEntity!]

  """
  Deskripsinya ada disini loh
  """
  getPayment(getPaymentArgs: GetPaymentArgs!): GetPayment

  """
  Deskripsinya ada disini loh
  """
  getAllPayment(getAllPaymentArgs: GetAllPaymentArgs!): GetAllPayment

  """
  Deskripsinya ada disini loh
  """
  rewardFindOne(where: RewardWhereUniqueInput!): Reward

  """
  Deskripsinya ada disini loh
  """
  rewardFindMany(
    where: RewardWhereInput
    orderBy: [RewardOrderByWithRelationInput!]
    cursor: RewardWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RewardScalarFieldEnum!]
  ): [Reward!]

  """
  Deskripsinya ada disini loh
  """
  rewardFindFirst(
    where: RewardWhereInput
    orderBy: [RewardOrderByWithRelationInput!]
    cursor: RewardWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RewardScalarFieldEnum!]
  ): Reward

  """
  Deskripsinya ada disini loh
  """
  rewardAggregate(
    where: RewardWhereInput
    orderBy: [RewardOrderByWithRelationInput!]
    cursor: RewardWhereUniqueInput
    take: Int
    skip: Int
    _count: RewardCountAggregateInput
    _avg: RewardAvgAggregateInput
    _sum: RewardSumAggregateInput
    _min: RewardMinAggregateInput
    _max: RewardMaxAggregateInput
  ): AggregateReward

  """
  Deskripsinya ada disini loh
  """
  rewardCount(
    where: RewardWhereInput
    orderBy: [RewardOrderByWithRelationInput!]
    cursor: RewardWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RewardScalarFieldEnum!]
  ): Float

  """
  Bersihkan file yang tidak terpakai di S3. Hanya untuk development
  """
  deleteOrphanedS3Objects: String

  """
  Deskripsinya ada disini loh
  """
  transactionFindOne(where: TransactionWhereUniqueInput!): Transaction

  """
  Deskripsinya ada disini loh
  """
  transactionFindMany(
    where: TransactionWhereInput
    orderBy: [TransactionOrderByWithRelationInput!]
    cursor: TransactionWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TransactionScalarFieldEnum!]
  ): [Transaction!]

  """
  Deskripsinya ada disini loh
  """
  transactionFindFirst(
    where: TransactionWhereInput
    orderBy: [TransactionOrderByWithRelationInput!]
    cursor: TransactionWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TransactionScalarFieldEnum!]
  ): Transaction

  """
  Deskripsinya ada disini loh
  """
  transactionAggregate(
    where: TransactionWhereInput
    orderBy: [TransactionOrderByWithRelationInput!]
    cursor: TransactionWhereUniqueInput
    take: Int
    skip: Int
    _count: TransactionCountAggregateInput
    _avg: TransactionAvgAggregateInput
    _sum: TransactionSumAggregateInput
    _min: TransactionMinAggregateInput
    _max: TransactionMaxAggregateInput
  ): AggregateTransaction

  """
  Deskripsinya ada disini loh
  """
  transactionCount(
    where: TransactionWhereInput
    orderBy: [TransactionOrderByWithRelationInput!]
    cursor: TransactionWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TransactionScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  invoiceFindOne(where: InvoiceWhereUniqueInput!): Invoice

  """
  Deskripsinya ada disini loh
  """
  invoiceFindMany(
    where: InvoiceWhereInput
    orderBy: [InvoiceOrderByWithRelationInput!]
    cursor: InvoiceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [InvoiceScalarFieldEnum!]
  ): [Invoice!]

  """
  Deskripsinya ada disini loh
  """
  invoiceFindFirst(
    where: InvoiceWhereInput
    orderBy: [InvoiceOrderByWithRelationInput!]
    cursor: InvoiceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [InvoiceScalarFieldEnum!]
  ): Invoice

  """
  Deskripsinya ada disini loh
  """
  invoiceAggregate(
    where: InvoiceWhereInput
    orderBy: [InvoiceOrderByWithRelationInput!]
    cursor: InvoiceWhereUniqueInput
    take: Int
    skip: Int
    _count: InvoiceCountAggregateInput
    _avg: InvoiceAvgAggregateInput
    _sum: InvoiceSumAggregateInput
    _min: InvoiceMinAggregateInput
    _max: InvoiceMaxAggregateInput
  ): AggregateInvoice

  """
  Deskripsinya ada disini loh
  """
  invoiceCount(
    where: InvoiceWhereInput
    orderBy: [InvoiceOrderByWithRelationInput!]
    cursor: InvoiceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [InvoiceScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  accountFindOne(where: AccountWhereUniqueInput!): Account

  """
  Deskripsinya ada disini loh
  """
  accountFindMany(
    where: AccountWhereInput
    orderBy: [AccountOrderByWithRelationInput!]
    cursor: AccountWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AccountScalarFieldEnum!]
  ): [Account!]

  """
  Deskripsinya ada disini loh
  """
  accountFindFirst(
    where: AccountWhereInput
    orderBy: [AccountOrderByWithRelationInput!]
    cursor: AccountWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AccountScalarFieldEnum!]
  ): Account

  """
  Deskripsinya ada disini loh
  """
  accountAggregate(
    where: AccountWhereInput
    orderBy: [AccountOrderByWithRelationInput!]
    cursor: AccountWhereUniqueInput
    take: Int
    skip: Int
    _count: AccountCountAggregateInput
    _avg: AccountAvgAggregateInput
    _sum: AccountSumAggregateInput
    _min: AccountMinAggregateInput
    _max: AccountMaxAggregateInput
  ): AggregateAccount

  """
  Deskripsinya ada disini loh
  """
  accountCount(
    where: AccountWhereInput
    orderBy: [AccountOrderByWithRelationInput!]
    cursor: AccountWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AccountScalarFieldEnum!]
  ): Float
  getAccountTotalBalance(accountId: Float!): Float!
  userFindManyOrderByAccountBalance(
    userFindManyOrderByAccountBalanceArgs: UserFindManyOrderByAccountBalanceArgs!
  ): [UserFindManyOrderByAccountBalance!]!
  getAccountBalanceByCustomPeriod(
    accountBalanceByCustomPeriodArgs: AccountBalanceByCustomPeriodArgs!
  ): [AccountBalanceByCustomPeriodQuery!]!
  getAccountBalanceOfPlatformByCustomPeriod(
    accountBalanceOfPlatformByCustomPeriod: AccountBalanceOfPlatformByCustomPeriod!
  ): [AccountBalanceByCustomPeriodQuery!]!
  getAccountBalanceOfUserPointFromUserId(userId: String!): Float!
  transactionFindManyByUserPointFromUserId(
    userId: String!
    skip: Int!
    take: Int!
  ): [Transaction!]!

  """
  Hanya menghitung user yang status active atau yang telah bayar
  """
  getUserPointDistribution: [PointDistribution!]

  """
  Hanya menghitung user yang status active atau yang telah bayar
  """
  getAllUsersAveragePoint: Float

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestFindOne(
    where: WithdrawalRequestWhereUniqueInput!
  ): WithdrawalRequest

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestFindMany(
    where: WithdrawalRequestWhereInput
    orderBy: [WithdrawalRequestOrderByWithRelationInput!]
    cursor: WithdrawalRequestWhereUniqueInput
    take: Int
    skip: Int
    distinct: [WithdrawalRequestScalarFieldEnum!]
  ): [WithdrawalRequest!]

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestFindFirst(
    where: WithdrawalRequestWhereInput
    orderBy: [WithdrawalRequestOrderByWithRelationInput!]
    cursor: WithdrawalRequestWhereUniqueInput
    take: Int
    skip: Int
    distinct: [WithdrawalRequestScalarFieldEnum!]
  ): WithdrawalRequest

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestAggregate(
    where: WithdrawalRequestWhereInput
    orderBy: [WithdrawalRequestOrderByWithRelationInput!]
    cursor: WithdrawalRequestWhereUniqueInput
    take: Int
    skip: Int
    _count: WithdrawalRequestCountAggregateInput
    _avg: WithdrawalRequestAvgAggregateInput
    _sum: WithdrawalRequestSumAggregateInput
    _min: WithdrawalRequestMinAggregateInput
    _max: WithdrawalRequestMaxAggregateInput
  ): AggregateWithdrawalRequest

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestCount(
    where: WithdrawalRequestWhereInput
    orderBy: [WithdrawalRequestOrderByWithRelationInput!]
    cursor: WithdrawalRequestWhereUniqueInput
    take: Int
    skip: Int
    distinct: [WithdrawalRequestScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  fileFindOne(where: FileWhereUniqueInput!): File

  """
  Deskripsinya ada disini loh
  """
  fileFindMany(
    where: FileWhereInput
    orderBy: [FileOrderByWithRelationInput!]
    cursor: FileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FileScalarFieldEnum!]
  ): [File!]

  """
  Deskripsinya ada disini loh
  """
  fileFindFirst(
    where: FileWhereInput
    orderBy: [FileOrderByWithRelationInput!]
    cursor: FileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FileScalarFieldEnum!]
  ): File

  """
  Deskripsinya ada disini loh
  """
  fileAggregate(
    where: FileWhereInput
    orderBy: [FileOrderByWithRelationInput!]
    cursor: FileWhereUniqueInput
    take: Int
    skip: Int
    _count: FileCountAggregateInput
    _avg: FileAvgAggregateInput
    _sum: FileSumAggregateInput
    _min: FileMinAggregateInput
    _max: FileMaxAggregateInput
  ): AggregateFile

  """
  Deskripsinya ada disini loh
  """
  fileCount(
    where: FileWhereInput
    orderBy: [FileOrderByWithRelationInput!]
    cursor: FileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FileScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  hotelFindOne(where: HotelWhereUniqueInput!): Hotel

  """
  Deskripsinya ada disini loh
  """
  hotelFindMany(
    where: HotelWhereInput
    orderBy: [HotelOrderByWithRelationInput!]
    cursor: HotelWhereUniqueInput
    take: Int
    skip: Int
    distinct: [HotelScalarFieldEnum!]
  ): [Hotel!]

  """
  Deskripsinya ada disini loh
  """
  hotelFindFirst(
    where: HotelWhereInput
    orderBy: [HotelOrderByWithRelationInput!]
    cursor: HotelWhereUniqueInput
    take: Int
    skip: Int
    distinct: [HotelScalarFieldEnum!]
  ): Hotel

  """
  Deskripsinya ada disini loh
  """
  hotelAggregate(
    where: HotelWhereInput
    orderBy: [HotelOrderByWithRelationInput!]
    cursor: HotelWhereUniqueInput
    take: Int
    skip: Int
    _count: HotelCountAggregateInput
    _avg: HotelAvgAggregateInput
    _sum: HotelSumAggregateInput
    _min: HotelMinAggregateInput
    _max: HotelMaxAggregateInput
  ): AggregateHotel

  """
  Deskripsinya ada disini loh
  """
  hotelCount(
    where: HotelWhereInput
    orderBy: [HotelOrderByWithRelationInput!]
    cursor: HotelWhereUniqueInput
    take: Int
    skip: Int
    distinct: [HotelScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  programCategoryFindOne(
    where: ProgramCategoryWhereUniqueInput!
  ): ProgramCategory

  """
  Deskripsinya ada disini loh
  """
  programCategoryFindMany(
    where: ProgramCategoryWhereInput
    orderBy: [ProgramCategoryOrderByWithRelationInput!]
    cursor: ProgramCategoryWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProgramCategoryScalarFieldEnum!]
  ): [ProgramCategory!]

  """
  Deskripsinya ada disini loh
  """
  programCategoryFindFirst(
    where: ProgramCategoryWhereInput
    orderBy: [ProgramCategoryOrderByWithRelationInput!]
    cursor: ProgramCategoryWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProgramCategoryScalarFieldEnum!]
  ): ProgramCategory

  """
  Deskripsinya ada disini loh
  """
  programCategoryAggregate(
    where: ProgramCategoryWhereInput
    orderBy: [ProgramCategoryOrderByWithRelationInput!]
    cursor: ProgramCategoryWhereUniqueInput
    take: Int
    skip: Int
    _count: ProgramCategoryCountAggregateInput
    _avg: ProgramCategoryAvgAggregateInput
    _sum: ProgramCategorySumAggregateInput
    _min: ProgramCategoryMinAggregateInput
    _max: ProgramCategoryMaxAggregateInput
  ): AggregateProgramCategory

  """
  Deskripsinya ada disini loh
  """
  programCategoryCount(
    where: ProgramCategoryWhereInput
    orderBy: [ProgramCategoryOrderByWithRelationInput!]
    cursor: ProgramCategoryWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProgramCategoryScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  faqFindOne(where: FaqWhereUniqueInput!): Faq

  """
  Deskripsinya ada disini loh
  """
  faqFindMany(
    where: FaqWhereInput
    orderBy: [FaqOrderByWithRelationInput!]
    cursor: FaqWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FaqScalarFieldEnum!]
  ): [Faq!]

  """
  Deskripsinya ada disini loh
  """
  faqFindFirst(
    where: FaqWhereInput
    orderBy: [FaqOrderByWithRelationInput!]
    cursor: FaqWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FaqScalarFieldEnum!]
  ): Faq

  """
  Deskripsinya ada disini loh
  """
  faqAggregate(
    where: FaqWhereInput
    orderBy: [FaqOrderByWithRelationInput!]
    cursor: FaqWhereUniqueInput
    take: Int
    skip: Int
    _count: FaqCountAggregateInput
    _avg: FaqAvgAggregateInput
    _sum: FaqSumAggregateInput
    _min: FaqMinAggregateInput
    _max: FaqMaxAggregateInput
  ): AggregateFaq

  """
  Deskripsinya ada disini loh
  """
  faqCount(
    where: FaqWhereInput
    orderBy: [FaqOrderByWithRelationInput!]
    cursor: FaqWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FaqScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  projectFindOne(where: ProjectWhereUniqueInput!): Project

  """
  Deskripsinya ada disini loh
  """
  projectFindMany(
    where: ProjectWhereInput
    orderBy: [ProjectOrderByWithRelationInput!]
    cursor: ProjectWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProjectScalarFieldEnum!]
  ): [Project!]

  """
  Deskripsinya ada disini loh
  """
  projectFindFirst(
    where: ProjectWhereInput
    orderBy: [ProjectOrderByWithRelationInput!]
    cursor: ProjectWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProjectScalarFieldEnum!]
  ): Project

  """
  Deskripsinya ada disini loh
  """
  projectAggregate(
    where: ProjectWhereInput
    orderBy: [ProjectOrderByWithRelationInput!]
    cursor: ProjectWhereUniqueInput
    take: Int
    skip: Int
    _count: ProjectCountAggregateInput
    _avg: ProjectAvgAggregateInput
    _sum: ProjectSumAggregateInput
    _min: ProjectMinAggregateInput
    _max: ProjectMaxAggregateInput
  ): AggregateProject

  """
  Deskripsinya ada disini loh
  """
  projectCount(
    where: ProjectWhereInput
    orderBy: [ProjectOrderByWithRelationInput!]
    cursor: ProjectWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProjectScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  shippingFindOne(where: ShippingWhereUniqueInput!): Shipping

  """
  Deskripsinya ada disini loh
  """
  shippingFindMany(
    where: ShippingWhereInput
    orderBy: [ShippingOrderByWithRelationInput!]
    cursor: ShippingWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ShippingScalarFieldEnum!]
  ): [Shipping!]

  """
  Deskripsinya ada disini loh
  """
  shippingFindFirst(
    where: ShippingWhereInput
    orderBy: [ShippingOrderByWithRelationInput!]
    cursor: ShippingWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ShippingScalarFieldEnum!]
  ): Shipping

  """
  Deskripsinya ada disini loh
  """
  shippingAggregate(
    where: ShippingWhereInput
    orderBy: [ShippingOrderByWithRelationInput!]
    cursor: ShippingWhereUniqueInput
    take: Int
    skip: Int
    _count: ShippingCountAggregateInput
    _avg: ShippingAvgAggregateInput
    _sum: ShippingSumAggregateInput
    _min: ShippingMinAggregateInput
    _max: ShippingMaxAggregateInput
  ): AggregateShipping

  """
  Deskripsinya ada disini loh
  """
  shippingCount(
    where: ShippingWhereInput
    orderBy: [ShippingOrderByWithRelationInput!]
    cursor: ShippingWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ShippingScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  checkInFindOne(where: CheckInWhereUniqueInput!): CheckIn

  """
  Deskripsinya ada disini loh
  """
  checkInFindMany(
    where: CheckInWhereInput
    orderBy: [CheckInOrderByWithRelationInput!]
    cursor: CheckInWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CheckInScalarFieldEnum!]
  ): [CheckIn!]

  """
  Deskripsinya ada disini loh
  """
  checkInFindFirst(
    where: CheckInWhereInput
    orderBy: [CheckInOrderByWithRelationInput!]
    cursor: CheckInWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CheckInScalarFieldEnum!]
  ): CheckIn

  """
  Deskripsinya ada disini loh
  """
  checkInAggregate(
    where: CheckInWhereInput
    orderBy: [CheckInOrderByWithRelationInput!]
    cursor: CheckInWhereUniqueInput
    take: Int
    skip: Int
    _count: CheckInCountAggregateInput
    _avg: CheckInAvgAggregateInput
    _sum: CheckInSumAggregateInput
    _min: CheckInMinAggregateInput
    _max: CheckInMaxAggregateInput
  ): AggregateCheckIn

  """
  Deskripsinya ada disini loh
  """
  checkInCount(
    where: CheckInWhereInput
    orderBy: [CheckInOrderByWithRelationInput!]
    cursor: CheckInWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CheckInScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  userNotificationFindOne(
    where: UserNotificationWhereUniqueInput!
  ): UserNotification

  """
  Deskripsinya ada disini loh
  """
  userNotificationFindMany(
    where: UserNotificationWhereInput
    orderBy: [UserNotificationOrderByWithRelationInput!]
    cursor: UserNotificationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserNotificationScalarFieldEnum!]
  ): [UserNotification!]

  """
  Deskripsinya ada disini loh
  """
  userNotificationFindFirst(
    where: UserNotificationWhereInput
    orderBy: [UserNotificationOrderByWithRelationInput!]
    cursor: UserNotificationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserNotificationScalarFieldEnum!]
  ): UserNotification

  """
  Deskripsinya ada disini loh
  """
  userNotificationAggregate(
    where: UserNotificationWhereInput
    orderBy: [UserNotificationOrderByWithRelationInput!]
    cursor: UserNotificationWhereUniqueInput
    take: Int
    skip: Int
    _count: UserNotificationCountAggregateInput
    _avg: UserNotificationAvgAggregateInput
    _sum: UserNotificationSumAggregateInput
    _min: UserNotificationMinAggregateInput
    _max: UserNotificationMaxAggregateInput
  ): AggregateUserNotification

  """
  Deskripsinya ada disini loh
  """
  userNotificationCount(
    where: UserNotificationWhereInput
    orderBy: [UserNotificationOrderByWithRelationInput!]
    cursor: UserNotificationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserNotificationScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  sessionFindOne(where: SessionWhereUniqueInput!): Session

  """
  Deskripsinya ada disini loh
  """
  sessionFindMany(
    where: SessionWhereInput
    orderBy: [SessionOrderByWithRelationInput!]
    cursor: SessionWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SessionScalarFieldEnum!]
  ): [Session!]

  """
  Deskripsinya ada disini loh
  """
  sessionFindFirst(
    where: SessionWhereInput
    orderBy: [SessionOrderByWithRelationInput!]
    cursor: SessionWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SessionScalarFieldEnum!]
  ): Session

  """
  Deskripsinya ada disini loh
  """
  sessionAggregate(
    where: SessionWhereInput
    orderBy: [SessionOrderByWithRelationInput!]
    cursor: SessionWhereUniqueInput
    take: Int
    skip: Int
    _count: SessionCountAggregateInput
    _avg: SessionAvgAggregateInput
    _sum: SessionSumAggregateInput
    _min: SessionMinAggregateInput
    _max: SessionMaxAggregateInput
  ): AggregateSession

  """
  Deskripsinya ada disini loh
  """
  sessionCount(
    where: SessionWhereInput
    orderBy: [SessionOrderByWithRelationInput!]
    cursor: SessionWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SessionScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  schoolFindOne(where: SchoolWhereUniqueInput!): School

  """
  Deskripsinya ada disini loh
  """
  schoolFindMany(
    where: SchoolWhereInput
    orderBy: [SchoolOrderByWithRelationInput!]
    cursor: SchoolWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SchoolScalarFieldEnum!]
  ): [School!]

  """
  Deskripsinya ada disini loh
  """
  schoolFindFirst(
    where: SchoolWhereInput
    orderBy: [SchoolOrderByWithRelationInput!]
    cursor: SchoolWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SchoolScalarFieldEnum!]
  ): School

  """
  Deskripsinya ada disini loh
  """
  schoolAggregate(
    where: SchoolWhereInput
    orderBy: [SchoolOrderByWithRelationInput!]
    cursor: SchoolWhereUniqueInput
    take: Int
    skip: Int
    _count: SchoolCountAggregateInput
    _avg: SchoolAvgAggregateInput
    _sum: SchoolSumAggregateInput
    _min: SchoolMinAggregateInput
    _max: SchoolMaxAggregateInput
  ): AggregateSchool

  """
  Deskripsinya ada disini loh
  """
  schoolCount(
    where: SchoolWhereInput
    orderBy: [SchoolOrderByWithRelationInput!]
    cursor: SchoolWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SchoolScalarFieldEnum!]
  ): Float

  """
  yang student berbayar saja yang dihitung
  """
  countTop10SchoolsWithMostStudents: [Top10SchoolWithStudents!]!

  """
  yang student berbayar saja yang dihitung
  """
  countTop10SchoolsWithLeastStudents: [Top10SchoolWithStudents!]!

  """
  Deskripsinya ada disini loh
  """
  addressFindOne(where: AddressWhereUniqueInput!): Address

  """
  Deskripsinya ada disini loh
  """
  addressFindMany(
    where: AddressWhereInput
    orderBy: [AddressOrderByWithRelationInput!]
    cursor: AddressWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AddressScalarFieldEnum!]
  ): [Address!]

  """
  Deskripsinya ada disini loh
  """
  addressFindFirst(
    where: AddressWhereInput
    orderBy: [AddressOrderByWithRelationInput!]
    cursor: AddressWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AddressScalarFieldEnum!]
  ): Address

  """
  Deskripsinya ada disini loh
  """
  addressAggregate(
    where: AddressWhereInput
    orderBy: [AddressOrderByWithRelationInput!]
    cursor: AddressWhereUniqueInput
    take: Int
    skip: Int
    _count: AddressCountAggregateInput
    _avg: AddressAvgAggregateInput
    _sum: AddressSumAggregateInput
    _min: AddressMinAggregateInput
    _max: AddressMaxAggregateInput
  ): AggregateAddress

  """
  Deskripsinya ada disini loh
  """
  addressCount(
    where: AddressWhereInput
    orderBy: [AddressOrderByWithRelationInput!]
    cursor: AddressWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AddressScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  orderFindOne(where: OrderWhereUniqueInput!): Order

  """
  Deskripsinya ada disini loh
  """
  orderFindMany(
    where: OrderWhereInput
    orderBy: [OrderOrderByWithRelationInput!]
    cursor: OrderWhereUniqueInput
    take: Int
    skip: Int
    distinct: [OrderScalarFieldEnum!]
  ): [Order!]

  """
  Deskripsinya ada disini loh
  """
  orderFindFirst(
    where: OrderWhereInput
    orderBy: [OrderOrderByWithRelationInput!]
    cursor: OrderWhereUniqueInput
    take: Int
    skip: Int
    distinct: [OrderScalarFieldEnum!]
  ): Order

  """
  Deskripsinya ada disini loh
  """
  orderAggregate(
    where: OrderWhereInput
    orderBy: [OrderOrderByWithRelationInput!]
    cursor: OrderWhereUniqueInput
    take: Int
    skip: Int
    _count: OrderCountAggregateInput
    _avg: OrderAvgAggregateInput
    _sum: OrderSumAggregateInput
    _min: OrderMinAggregateInput
    _max: OrderMaxAggregateInput
  ): AggregateOrder

  """
  Deskripsinya ada disini loh
  """
  orderCount(
    where: OrderWhereInput
    orderBy: [OrderOrderByWithRelationInput!]
    cursor: OrderWhereUniqueInput
    take: Int
    skip: Int
    distinct: [OrderScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  provinceFindOne(where: ProvinceWhereUniqueInput!): Province

  """
  Deskripsinya ada disini loh
  """
  provinceFindMany(
    where: ProvinceWhereInput
    orderBy: [ProvinceOrderByWithRelationInput!]
    cursor: ProvinceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProvinceScalarFieldEnum!]
  ): [Province!]

  """
  Deskripsinya ada disini loh
  """
  provinceFindFirst(
    where: ProvinceWhereInput
    orderBy: [ProvinceOrderByWithRelationInput!]
    cursor: ProvinceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProvinceScalarFieldEnum!]
  ): Province

  """
  Deskripsinya ada disini loh
  """
  provinceAggregate(
    where: ProvinceWhereInput
    orderBy: [ProvinceOrderByWithRelationInput!]
    cursor: ProvinceWhereUniqueInput
    take: Int
    skip: Int
    _count: ProvinceCountAggregateInput
    _avg: ProvinceAvgAggregateInput
    _sum: ProvinceSumAggregateInput
    _min: ProvinceMinAggregateInput
    _max: ProvinceMaxAggregateInput
  ): AggregateProvince

  """
  Deskripsinya ada disini loh
  """
  provinceCount(
    where: ProvinceWhereInput
    orderBy: [ProvinceOrderByWithRelationInput!]
    cursor: ProvinceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProvinceScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  cityFindOne(where: CityWhereUniqueInput!): City

  """
  Deskripsinya ada disini loh
  """
  cityFindMany(
    where: CityWhereInput
    orderBy: [CityOrderByWithRelationInput!]
    cursor: CityWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CityScalarFieldEnum!]
  ): [City!]

  """
  Deskripsinya ada disini loh
  """
  cityFindFirst(
    where: CityWhereInput
    orderBy: [CityOrderByWithRelationInput!]
    cursor: CityWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CityScalarFieldEnum!]
  ): City

  """
  Deskripsinya ada disini loh
  """
  cityAggregate(
    where: CityWhereInput
    orderBy: [CityOrderByWithRelationInput!]
    cursor: CityWhereUniqueInput
    take: Int
    skip: Int
    _count: CityCountAggregateInput
    _avg: CityAvgAggregateInput
    _sum: CitySumAggregateInput
    _min: CityMinAggregateInput
    _max: CityMaxAggregateInput
  ): AggregateCity

  """
  Deskripsinya ada disini loh
  """
  cityCount(
    where: CityWhereInput
    orderBy: [CityOrderByWithRelationInput!]
    cursor: CityWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CityScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  getTopCitiesWithMostUsers(
    cityFindManyUserArgs: CityFindManyUserArgs!
  ): [CityFindManyUser!]

  """
  Deskripsinya ada disini loh
  """
  districtFindOne(where: DistrictWhereUniqueInput!): District

  """
  Deskripsinya ada disini loh
  """
  districtFindMany(
    where: DistrictWhereInput
    orderBy: [DistrictOrderByWithRelationInput!]
    cursor: DistrictWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DistrictScalarFieldEnum!]
  ): [District!]

  """
  Deskripsinya ada disini loh
  """
  districtFindFirst(
    where: DistrictWhereInput
    orderBy: [DistrictOrderByWithRelationInput!]
    cursor: DistrictWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DistrictScalarFieldEnum!]
  ): District

  """
  Deskripsinya ada disini loh
  """
  districtAggregate(
    where: DistrictWhereInput
    orderBy: [DistrictOrderByWithRelationInput!]
    cursor: DistrictWhereUniqueInput
    take: Int
    skip: Int
    _count: DistrictCountAggregateInput
    _avg: DistrictAvgAggregateInput
    _sum: DistrictSumAggregateInput
    _min: DistrictMinAggregateInput
    _max: DistrictMaxAggregateInput
  ): AggregateDistrict

  """
  Deskripsinya ada disini loh
  """
  districtCount(
    where: DistrictWhereInput
    orderBy: [DistrictOrderByWithRelationInput!]
    cursor: DistrictWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DistrictScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  subdistrictFindOne(where: SubdistrictWhereUniqueInput!): Subdistrict

  """
  Deskripsinya ada disini loh
  """
  subdistrictFindMany(
    where: SubdistrictWhereInput
    orderBy: [SubdistrictOrderByWithRelationInput!]
    cursor: SubdistrictWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SubdistrictScalarFieldEnum!]
  ): [Subdistrict!]

  """
  Deskripsinya ada disini loh
  """
  subdistrictFindFirst(
    where: SubdistrictWhereInput
    orderBy: [SubdistrictOrderByWithRelationInput!]
    cursor: SubdistrictWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SubdistrictScalarFieldEnum!]
  ): Subdistrict

  """
  Deskripsinya ada disini loh
  """
  subdistrictAggregate(
    where: SubdistrictWhereInput
    orderBy: [SubdistrictOrderByWithRelationInput!]
    cursor: SubdistrictWhereUniqueInput
    take: Int
    skip: Int
    _count: SubdistrictCountAggregateInput
    _avg: SubdistrictAvgAggregateInput
    _sum: SubdistrictSumAggregateInput
    _min: SubdistrictMinAggregateInput
    _max: SubdistrictMaxAggregateInput
  ): AggregateSubdistrict

  """
  Deskripsinya ada disini loh
  """
  subdistrictCount(
    where: SubdistrictWhereInput
    orderBy: [SubdistrictOrderByWithRelationInput!]
    cursor: SubdistrictWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SubdistrictScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  cartFindOne(where: CartWhereUniqueInput!): Cart

  """
  Deskripsinya ada disini loh
  """
  cartFindMany(
    where: CartWhereInput
    orderBy: [CartOrderByWithRelationInput!]
    cursor: CartWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CartScalarFieldEnum!]
  ): [Cart!]

  """
  Deskripsinya ada disini loh
  """
  cartFindFirst(
    where: CartWhereInput
    orderBy: [CartOrderByWithRelationInput!]
    cursor: CartWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CartScalarFieldEnum!]
  ): Cart

  """
  Deskripsinya ada disini loh
  """
  cartAggregate(
    where: CartWhereInput
    orderBy: [CartOrderByWithRelationInput!]
    cursor: CartWhereUniqueInput
    take: Int
    skip: Int
    _count: CartCountAggregateInput
    _avg: CartAvgAggregateInput
    _sum: CartSumAggregateInput
    _min: CartMinAggregateInput
    _max: CartMaxAggregateInput
  ): AggregateCart

  """
  Deskripsinya ada disini loh
  """
  cartCount(
    where: CartWhereInput
    orderBy: [CartOrderByWithRelationInput!]
    cursor: CartWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CartScalarFieldEnum!]
  ): Float

  """
  Deskripsinya ada disini loh
  """
  rewardClaimFindOne(where: RewardClaimWhereUniqueInput!): RewardClaim

  """
  Deskripsinya ada disini loh
  """
  rewardClaimFindMany(
    where: RewardClaimWhereInput
    orderBy: [RewardClaimOrderByWithRelationInput!]
    cursor: RewardClaimWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RewardClaimScalarFieldEnum!]
  ): [RewardClaim!]

  """
  Deskripsinya ada disini loh
  """
  rewardClaimFindFirst(
    where: RewardClaimWhereInput
    orderBy: [RewardClaimOrderByWithRelationInput!]
    cursor: RewardClaimWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RewardClaimScalarFieldEnum!]
  ): RewardClaim

  """
  Deskripsinya ada disini loh
  """
  rewardClaimAggregate(
    where: RewardClaimWhereInput
    orderBy: [RewardClaimOrderByWithRelationInput!]
    cursor: RewardClaimWhereUniqueInput
    take: Int
    skip: Int
    _count: RewardClaimCountAggregateInput
    _avg: RewardClaimAvgAggregateInput
    _sum: RewardClaimSumAggregateInput
    _min: RewardClaimMinAggregateInput
    _max: RewardClaimMaxAggregateInput
  ): AggregateRewardClaim

  """
  Deskripsinya ada disini loh
  """
  rewardClaimCount(
    where: RewardClaimWhereInput
    orderBy: [RewardClaimOrderByWithRelationInput!]
    cursor: RewardClaimWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RewardClaimScalarFieldEnum!]
  ): Float
}

input ImagesWhereUniqueInput {
  id: Int
  AND: [ImagesWhereInput!]
  OR: [ImagesWhereInput!]
  NOT: [ImagesWhereInput!]
  fileType: EnumFileTypeNullableFilter
  fileSize: FloatNullableFilter
  url: StringFilter
  hotelImageId: IntNullableFilter
  programImageId: IntNullableFilter
  rewardImageId: IntNullableFilter
  projectImageId: IntNullableFilter
  createdAt: DateTimeFilter
  hotelImage: HotelNullableRelationFilter
  programImage: ProgramNullableRelationFilter
  rewardImage: RewardNullableRelationFilter
  projectImage: ProjectNullableRelationFilter
}

input ImagesWhereInput {
  AND: [ImagesWhereInput!]
  OR: [ImagesWhereInput!]
  NOT: [ImagesWhereInput!]
  id: IntFilter
  fileType: EnumFileTypeNullableFilter
  fileSize: FloatNullableFilter
  url: StringFilter
  hotelImageId: IntNullableFilter
  programImageId: IntNullableFilter
  rewardImageId: IntNullableFilter
  projectImageId: IntNullableFilter
  createdAt: DateTimeFilter
  hotelImage: HotelNullableRelationFilter
  programImage: ProgramNullableRelationFilter
  rewardImage: RewardNullableRelationFilter
  projectImage: ProjectNullableRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input EnumFileTypeNullableFilter {
  equals: FileType
  in: [FileType!]
  notIn: [FileType!]
  not: NestedEnumFileTypeNullableFilter
}

input NestedEnumFileTypeNullableFilter {
  equals: FileType
  in: [FileType!]
  notIn: [FileType!]
  not: NestedEnumFileTypeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input HotelNullableRelationFilter {
  is: HotelWhereInput
  isNot: HotelWhereInput
}

input HotelWhereInput {
  AND: [HotelWhereInput!]
  OR: [HotelWhereInput!]
  NOT: [HotelWhereInput!]
  id: IntFilter
  name: StringFilter
  addressId: IntFilter
  description: StringFilter
  rating: FloatFilter
  startDate: DateTimeFilter
  quota: IntFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  version: IntNullableFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  images: ImagesListRelationFilter
  checkIns: CheckInListRelationFilter
  createdBy: UserRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IntFilter
  name: StringFilter
  subdistrictId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  subdistrict: SubdistrictRelationFilter
  user: UserNullableRelationFilter
  hotel: HotelNullableRelationFilter
  school: SchoolNullableRelationFilter
  Shipping: ShippingNullableRelationFilter
}

input SubdistrictRelationFilter {
  is: SubdistrictWhereInput
  isNot: SubdistrictWhereInput
}

input SubdistrictWhereInput {
  AND: [SubdistrictWhereInput!]
  OR: [SubdistrictWhereInput!]
  NOT: [SubdistrictWhereInput!]
  id: IntFilter
  name: StringFilter
  districtId: IntFilter
  postalCode: StringFilter
  district: DistrictRelationFilter
  address: AddressListRelationFilter
}

input DistrictRelationFilter {
  is: DistrictWhereInput
  isNot: DistrictWhereInput
}

input DistrictWhereInput {
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  id: IntFilter
  name: StringFilter
  cityId: IntFilter
  city: CityRelationFilter
  subdistricts: SubdistrictListRelationFilter
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

input CityWhereInput {
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  id: IntFilter
  name: StringFilter
  provinceId: IntFilter
  province: ProvinceRelationFilter
  districts: DistrictListRelationFilter
}

input ProvinceRelationFilter {
  is: ProvinceWhereInput
  isNot: ProvinceWhereInput
}

input ProvinceWhereInput {
  AND: [ProvinceWhereInput!]
  OR: [ProvinceWhereInput!]
  NOT: [ProvinceWhereInput!]
  id: IntFilter
  name: StringFilter
  cities: CityListRelationFilter
}

input CityListRelationFilter {
  every: CityWhereInput
  some: CityWhereInput
  none: CityWhereInput
}

input DistrictListRelationFilter {
  every: DistrictWhereInput
  some: DistrictWhereInput
  none: DistrictWhereInput
}

input SubdistrictListRelationFilter {
  every: SubdistrictWhereInput
  some: SubdistrictWhereInput
  none: SubdistrictWhereInput
}

input AddressListRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringNullableFilter
  email: StringFilter
  addressId: IntFilter
  userRole: EnumUserRoleFilter
  userType: EnumUserTypeFilter
  avatarUrl: StringNullableFilter
  whatsappNumber: StringFilter
  whatsappVerifiedAt: DateTimeNullableFilter
  password: StringFilter
  referralCode: StringFilter
  status: EnumUserStatusFilter
  schoolId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  theme: EnumThemeFilter
  address: AddressRelationFilter
  referredBy: UserNullableRelationFilter
  referredUsers: UserListRelationFilter
  checkIns: CheckInListRelationFilter
  school: SchoolNullableRelationFilter
  accounts: AccountListRelationFilter
  orders: OrderListRelationFilter
  hotelsCreated: HotelListRelationFilter
  programsParticipation: ProgramListRelationFilter
  claimedRewards: RewardClaimListRelationFilter
  withdrawalRequest: WithdrawalRequestListRelationFilter
  programsCreated: ProgramListRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input EnumUserTypeFilter {
  equals: UserType
  in: [UserType!]
  notIn: [UserType!]
  not: NestedEnumUserTypeFilter
}

input NestedEnumUserTypeFilter {
  equals: UserType
  in: [UserType!]
  notIn: [UserType!]
  not: NestedEnumUserTypeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input EnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter
}

input NestedEnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter
}

input EnumThemeFilter {
  equals: Theme
  in: [Theme!]
  notIn: [Theme!]
  not: NestedEnumThemeFilter
}

input NestedEnumThemeFilter {
  equals: Theme
  in: [Theme!]
  notIn: [Theme!]
  not: NestedEnumThemeFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input CheckInListRelationFilter {
  every: CheckInWhereInput
  some: CheckInWhereInput
  none: CheckInWhereInput
}

input CheckInWhereInput {
  AND: [CheckInWhereInput!]
  OR: [CheckInWhereInput!]
  NOT: [CheckInWhereInput!]
  id: IntFilter
  userId: StringFilter
  hotelId: IntFilter
  checkInAt: DateTimeFilter
  user: UserRelationFilter
  hotel: HotelRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input HotelRelationFilter {
  is: HotelWhereInput
  isNot: HotelWhereInput
}

input SchoolNullableRelationFilter {
  is: SchoolWhereInput
  isNot: SchoolWhereInput
}

input SchoolWhereInput {
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  students: UserListRelationFilter
}

input AccountListRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IntFilter
  accountNumber: FloatNullableFilter
  name: StringFilter
  userId: StringFilter
  accountCategory: EnumAccountCategoryFilter
  user: UserRelationFilter
  transactionOrigins: TransactionListRelationFilter
  transactionDestination: TransactionListRelationFilter
}

input EnumAccountCategoryFilter {
  equals: AccountCategory
  in: [AccountCategory!]
  notIn: [AccountCategory!]
  not: NestedEnumAccountCategoryFilter
}

input NestedEnumAccountCategoryFilter {
  equals: AccountCategory
  in: [AccountCategory!]
  notIn: [AccountCategory!]
  not: NestedEnumAccountCategoryFilter
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  some: TransactionWhereInput
  none: TransactionWhereInput
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  id: IntFilter
  amount: FloatFilter
  proofUrl: StringNullableFilter
  status: EnumTransactionStatusFilter
  transactionCategory: EnumTransactionCategoryFilter
  fromAccountId: IntFilter
  toAccountId: IntFilter
  invoiceId: IntNullableFilter
  installmentId: IntNullableFilter
  withdrawalRequestId: IntNullableFilter
  uniqueCode: IntNullableFilter
  createdAt: DateTimeFilter
  fromAccount: AccountRelationFilter
  toAccount: AccountRelationFilter
  invoice: InvoiceNullableRelationFilter
  withdrawalRequest: WithdrawalRequestNullableRelationFilter
}

input EnumTransactionStatusFilter {
  equals: TransactionStatus
  in: [TransactionStatus!]
  notIn: [TransactionStatus!]
  not: NestedEnumTransactionStatusFilter
}

input NestedEnumTransactionStatusFilter {
  equals: TransactionStatus
  in: [TransactionStatus!]
  notIn: [TransactionStatus!]
  not: NestedEnumTransactionStatusFilter
}

input EnumTransactionCategoryFilter {
  equals: TransactionCategory
  in: [TransactionCategory!]
  notIn: [TransactionCategory!]
  not: NestedEnumTransactionCategoryFilter
}

input NestedEnumTransactionCategoryFilter {
  equals: TransactionCategory
  in: [TransactionCategory!]
  notIn: [TransactionCategory!]
  not: NestedEnumTransactionCategoryFilter
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input InvoiceNullableRelationFilter {
  is: InvoiceWhereInput
  isNot: InvoiceWhereInput
}

input InvoiceWhereInput {
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  id: IntFilter
  adminFee: FloatFilter
  amount: FloatFilter
  Order: OrderNullableRelationFilter
  transactions: TransactionListRelationFilter
  Installments: InstallmentListRelationFilter
}

input OrderNullableRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IntFilter
  status: EnumTransactionStatusFilter
  orderById: StringFilter
  shippingId: IntNullableFilter
  invoiceId: IntFilter
  platformFee: FloatFilter
  total: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  orderBy: UserRelationFilter
  cart: CartListRelationFilter
  shipping: ShippingNullableRelationFilter
  invoice: InvoiceRelationFilter
}

input CartListRelationFilter {
  every: CartWhereInput
  some: CartWhereInput
  none: CartWhereInput
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IntFilter
  orderId: IntFilter
  membershipItemId: IntNullableFilter
  projectItemId: IntNullableFilter
  quantity: IntFilter
  price: FloatFilter
  cost: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  order: OrderRelationFilter
  membershipItem: ItemNullableRelationFilter
  projectItem: ProjectNullableRelationFilter
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

input ItemNullableRelationFilter {
  is: ItemWhereInput
  isNot: ItemWhereInput
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  cost: FloatFilter
  userRole: EnumUserRoleFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  cart: CartListRelationFilter
}

input ProjectNullableRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  projectCategory: EnumProjectCategoryFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  returnRate: FloatFilter
  goalAmount: FloatFilter
  maxGoalAmountVersion: IntNullableFilter
  minimumInvestment: FloatFilter
  maxInvestor: IntFilter
  maxInvestorVersion: IntNullableFilter
  accountId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  orderCart: CartListRelationFilter
  account: AccountRelationFilter
}

input EnumProjectCategoryFilter {
  equals: ProjectCategory
  in: [ProjectCategory!]
  notIn: [ProjectCategory!]
  not: NestedEnumProjectCategoryFilter
}

input NestedEnumProjectCategoryFilter {
  equals: ProjectCategory
  in: [ProjectCategory!]
  notIn: [ProjectCategory!]
  not: NestedEnumProjectCategoryFilter
}

input ImagesListRelationFilter {
  every: ImagesWhereInput
  some: ImagesWhereInput
  none: ImagesWhereInput
}

input ShippingNullableRelationFilter {
  is: ShippingWhereInput
  isNot: ShippingWhereInput
}

input ShippingWhereInput {
  AND: [ShippingWhereInput!]
  OR: [ShippingWhereInput!]
  NOT: [ShippingWhereInput!]
  id: IntFilter
  logisticName: StringFilter
  deliveryDate: DateTimeNullableFilter
  courier: StringNullableFilter
  estimatedTime: StringNullableFilter
  trackingNo: StringNullableFilter
  orderId: IntFilter
  address: AddressRelationFilter
  order: OrderRelationFilter
}

input InvoiceRelationFilter {
  is: InvoiceWhereInput
  isNot: InvoiceWhereInput
}

input InstallmentListRelationFilter {
  every: InstallmentWhereInput
  some: InstallmentWhereInput
  none: InstallmentWhereInput
}

input InstallmentWhereInput {
  AND: [InstallmentWhereInput!]
  OR: [InstallmentWhereInput!]
  NOT: [InstallmentWhereInput!]
  id: IntFilter
  number: IntFilter
  lateFee: FloatFilter
  amount: FloatFilter
  dueDate: DateTimeFilter
  status: EnumInstallmentStatusFilter
  transactionId: IntNullableFilter
  invoiceId: IntFilter
  transaction: TransactionNullableRelationFilter
  invoice: InvoiceRelationFilter
}

input EnumInstallmentStatusFilter {
  equals: InstallmentStatus
  in: [InstallmentStatus!]
  notIn: [InstallmentStatus!]
  not: NestedEnumInstallmentStatusFilter
}

input NestedEnumInstallmentStatusFilter {
  equals: InstallmentStatus
  in: [InstallmentStatus!]
  notIn: [InstallmentStatus!]
  not: NestedEnumInstallmentStatusFilter
}

input TransactionNullableRelationFilter {
  is: TransactionWhereInput
  isNot: TransactionWhereInput
}

input WithdrawalRequestNullableRelationFilter {
  is: WithdrawalRequestWhereInput
  isNot: WithdrawalRequestWhereInput
}

input WithdrawalRequestWhereInput {
  AND: [WithdrawalRequestWhereInput!]
  OR: [WithdrawalRequestWhereInput!]
  NOT: [WithdrawalRequestWhereInput!]
  id: IntFilter
  userId: StringFilter
  amount: FloatFilter
  status: EnumTransactionStatusFilter
  proofUrl: StringNullableFilter
  proofDescription: StringNullableFilter
  transactionId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  transaction: TransactionNullableRelationFilter
}

input OrderListRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input HotelListRelationFilter {
  every: HotelWhereInput
  some: HotelWhereInput
  none: HotelWhereInput
}

input ProgramListRelationFilter {
  every: ProgramWhereInput
  some: ProgramWhereInput
  none: ProgramWhereInput
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IntFilter
  name: StringFilter
  startDate: DateTimeFilter
  dueDate: DateTimeNullableFilter
  description: StringFilter
  createdById: StringFilter
  categoryId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Images: ImagesListRelationFilter
  createdBy: UserRelationFilter
  participant: UserListRelationFilter
  category: ProgramCategoryRelationFilter
}

input ProgramCategoryRelationFilter {
  is: ProgramCategoryWhereInput
  isNot: ProgramCategoryWhereInput
}

input ProgramCategoryWhereInput {
  AND: [ProgramCategoryWhereInput!]
  OR: [ProgramCategoryWhereInput!]
  NOT: [ProgramCategoryWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  programs: ProgramListRelationFilter
}

input RewardClaimListRelationFilter {
  every: RewardClaimWhereInput
  some: RewardClaimWhereInput
  none: RewardClaimWhereInput
}

input RewardClaimWhereInput {
  AND: [RewardClaimWhereInput!]
  OR: [RewardClaimWhereInput!]
  NOT: [RewardClaimWhereInput!]
  id: IntFilter
  userId: StringFilter
  rewardId: IntFilter
  processedAt: DateTimeFilter
  createdAt: DateTimeFilter
  user: UserRelationFilter
  reward: RewardRelationFilter
}

input RewardRelationFilter {
  is: RewardWhereInput
  isNot: RewardWhereInput
}

input RewardWhereInput {
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
  id: IntFilter
  name: StringFilter
  pointCost: FloatFilter
  description: StringFilter
  images: ImagesListRelationFilter
  RewardClaim: RewardClaimListRelationFilter
}

input WithdrawalRequestListRelationFilter {
  every: WithdrawalRequestWhereInput
  some: WithdrawalRequestWhereInput
  none: WithdrawalRequestWhereInput
}

input ProgramNullableRelationFilter {
  is: ProgramWhereInput
  isNot: ProgramWhereInput
}

input RewardNullableRelationFilter {
  is: RewardWhereInput
  isNot: RewardWhereInput
}

input ImagesOrderByWithRelationInput {
  id: SortOrder
  fileType: SortOrderInput
  fileSize: SortOrderInput
  url: SortOrder
  hotelImageId: SortOrderInput
  programImageId: SortOrderInput
  rewardImageId: SortOrderInput
  projectImageId: SortOrderInput
  createdAt: SortOrder
  hotelImage: HotelOrderByWithRelationInput
  programImage: ProgramOrderByWithRelationInput
  rewardImage: RewardOrderByWithRelationInput
  projectImage: ProjectOrderByWithRelationInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input HotelOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  addressId: SortOrder
  description: SortOrder
  rating: SortOrder
  startDate: SortOrder
  quota: SortOrder
  createdById: SortOrder
  createdAt: SortOrder
  version: SortOrderInput
  updatedAt: SortOrder
  address: AddressOrderByWithRelationInput
  images: ImagesOrderByRelationAggregateInput
  checkIns: CheckInOrderByRelationAggregateInput
  createdBy: UserOrderByWithRelationInput
}

input AddressOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  subdistrictId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  subdistrict: SubdistrictOrderByWithRelationInput
  user: UserOrderByWithRelationInput
  hotel: HotelOrderByWithRelationInput
  school: SchoolOrderByWithRelationInput
  Shipping: ShippingOrderByWithRelationInput
}

input SubdistrictOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  districtId: SortOrder
  postalCode: SortOrder
  district: DistrictOrderByWithRelationInput
  address: AddressOrderByRelationAggregateInput
}

input DistrictOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  cityId: SortOrder
  city: CityOrderByWithRelationInput
  subdistricts: SubdistrictOrderByRelationAggregateInput
}

input CityOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  provinceId: SortOrder
  province: ProvinceOrderByWithRelationInput
  districts: DistrictOrderByRelationAggregateInput
}

input ProvinceOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  cities: CityOrderByRelationAggregateInput
}

input CityOrderByRelationAggregateInput {
  _count: SortOrder
}

input DistrictOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubdistrictOrderByRelationAggregateInput {
  _count: SortOrder
}

input AddressOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrderInput
  email: SortOrder
  addressId: SortOrder
  userRole: SortOrder
  userType: SortOrder
  avatarUrl: SortOrderInput
  whatsappNumber: SortOrder
  whatsappVerifiedAt: SortOrderInput
  password: SortOrder
  referralCode: SortOrder
  status: SortOrder
  schoolId: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  theme: SortOrder
  address: AddressOrderByWithRelationInput
  referredBy: UserOrderByWithRelationInput
  referredUsers: UserOrderByRelationAggregateInput
  checkIns: CheckInOrderByRelationAggregateInput
  school: SchoolOrderByWithRelationInput
  accounts: AccountOrderByRelationAggregateInput
  orders: OrderOrderByRelationAggregateInput
  hotelsCreated: HotelOrderByRelationAggregateInput
  programsParticipation: ProgramOrderByRelationAggregateInput
  claimedRewards: RewardClaimOrderByRelationAggregateInput
  withdrawalRequest: WithdrawalRequestOrderByRelationAggregateInput
  programsCreated: ProgramOrderByRelationAggregateInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input CheckInOrderByRelationAggregateInput {
  _count: SortOrder
}

input SchoolOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  address: AddressOrderByWithRelationInput
  students: UserOrderByRelationAggregateInput
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input HotelOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgramOrderByRelationAggregateInput {
  _count: SortOrder
}

input RewardClaimOrderByRelationAggregateInput {
  _count: SortOrder
}

input WithdrawalRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShippingOrderByWithRelationInput {
  id: SortOrder
  logisticName: SortOrder
  deliveryDate: SortOrderInput
  courier: SortOrderInput
  estimatedTime: SortOrderInput
  trackingNo: SortOrderInput
  orderId: SortOrder
  address: AddressOrderByWithRelationInput
  order: OrderOrderByWithRelationInput
}

input OrderOrderByWithRelationInput {
  id: SortOrder
  status: SortOrder
  orderById: SortOrder
  shippingId: SortOrderInput
  invoiceId: SortOrder
  platformFee: SortOrder
  total: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  orderBy: UserOrderByWithRelationInput
  cart: CartOrderByRelationAggregateInput
  shipping: ShippingOrderByWithRelationInput
  invoice: InvoiceOrderByWithRelationInput
}

input CartOrderByRelationAggregateInput {
  _count: SortOrder
}

input InvoiceOrderByWithRelationInput {
  id: SortOrder
  adminFee: SortOrder
  amount: SortOrder
  Order: OrderOrderByWithRelationInput
  transactions: TransactionOrderByRelationAggregateInput
  Installments: InstallmentOrderByRelationAggregateInput
}

input TransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input InstallmentOrderByRelationAggregateInput {
  _count: SortOrder
}

input ImagesOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgramOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  dueDate: SortOrderInput
  description: SortOrder
  createdById: SortOrder
  categoryId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Images: ImagesOrderByRelationAggregateInput
  createdBy: UserOrderByWithRelationInput
  participant: UserOrderByRelationAggregateInput
  category: ProgramCategoryOrderByWithRelationInput
}

input ProgramCategoryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  programs: ProgramOrderByRelationAggregateInput
}

input RewardOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  pointCost: SortOrder
  description: SortOrder
  images: ImagesOrderByRelationAggregateInput
  RewardClaim: RewardClaimOrderByRelationAggregateInput
}

input ProjectOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  projectCategory: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  returnRate: SortOrder
  goalAmount: SortOrder
  maxGoalAmountVersion: SortOrderInput
  minimumInvestment: SortOrder
  maxInvestor: SortOrder
  maxInvestorVersion: SortOrderInput
  accountId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  images: ImagesOrderByRelationAggregateInput
  orderCart: CartOrderByRelationAggregateInput
  account: AccountOrderByWithRelationInput
}

input AccountOrderByWithRelationInput {
  id: SortOrder
  accountNumber: SortOrderInput
  name: SortOrder
  userId: SortOrder
  accountCategory: SortOrder
  user: UserOrderByWithRelationInput
  transactionOrigins: TransactionOrderByRelationAggregateInput
  transactionDestination: TransactionOrderByRelationAggregateInput
}

enum ImagesScalarFieldEnum {
  id
  fileType
  fileSize
  url
  hotelImageId
  programImageId
  rewardImageId
  projectImageId
  createdAt
}

input ImagesCountAggregateInput {
  id: Boolean
  fileType: Boolean
  fileSize: Boolean
  url: Boolean
  hotelImageId: Boolean
  programImageId: Boolean
  rewardImageId: Boolean
  projectImageId: Boolean
  createdAt: Boolean
  _all: Boolean
}

input ImagesAvgAggregateInput {
  id: Boolean
  fileSize: Boolean
  hotelImageId: Boolean
  programImageId: Boolean
  rewardImageId: Boolean
  projectImageId: Boolean
}

input ImagesSumAggregateInput {
  id: Boolean
  fileSize: Boolean
  hotelImageId: Boolean
  programImageId: Boolean
  rewardImageId: Boolean
  projectImageId: Boolean
}

input ImagesMinAggregateInput {
  id: Boolean
  fileType: Boolean
  fileSize: Boolean
  url: Boolean
  hotelImageId: Boolean
  programImageId: Boolean
  rewardImageId: Boolean
  projectImageId: Boolean
  createdAt: Boolean
}

input ImagesMaxAggregateInput {
  id: Boolean
  fileType: Boolean
  fileSize: Boolean
  url: Boolean
  hotelImageId: Boolean
  programImageId: Boolean
  rewardImageId: Boolean
  projectImageId: Boolean
  createdAt: Boolean
}

input UserWhereUniqueInput {
  id: String
  email: String
  addressId: Int
  whatsappNumber: String
  referralCode: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  firstName: StringFilter
  lastName: StringNullableFilter
  userRole: EnumUserRoleFilter
  userType: EnumUserTypeFilter
  avatarUrl: StringNullableFilter
  whatsappVerifiedAt: DateTimeNullableFilter
  password: StringFilter
  status: EnumUserStatusFilter
  schoolId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  theme: EnumThemeFilter
  address: AddressRelationFilter
  referredBy: UserNullableRelationFilter
  referredUsers: UserListRelationFilter
  checkIns: CheckInListRelationFilter
  school: SchoolNullableRelationFilter
  accounts: AccountListRelationFilter
  orders: OrderListRelationFilter
  hotelsCreated: HotelListRelationFilter
  programsParticipation: ProgramListRelationFilter
  claimedRewards: RewardClaimListRelationFilter
  withdrawalRequest: WithdrawalRequestListRelationFilter
  programsCreated: ProgramListRelationFilter
}

enum UserScalarFieldEnum {
  id
  firstName
  lastName
  email
  addressId
  userRole
  userType
  avatarUrl
  whatsappNumber
  whatsappVerifiedAt
  password
  referralCode
  referredById
  status
  schoolId
  createdAt
  updatedAt
  deletedAt
  theme
}

input UserCountAggregateInput {
  id: Boolean
  firstName: Boolean
  lastName: Boolean
  email: Boolean
  addressId: Boolean
  userRole: Boolean
  userType: Boolean
  avatarUrl: Boolean
  whatsappNumber: Boolean
  whatsappVerifiedAt: Boolean
  password: Boolean
  referralCode: Boolean
  status: Boolean
  schoolId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  theme: Boolean
  _all: Boolean
}

input UserAvgAggregateInput {
  addressId: Boolean
  schoolId: Boolean
}

input UserSumAggregateInput {
  addressId: Boolean
  schoolId: Boolean
}

input UserMinAggregateInput {
  id: Boolean
  firstName: Boolean
  lastName: Boolean
  email: Boolean
  addressId: Boolean
  userRole: Boolean
  userType: Boolean
  avatarUrl: Boolean
  whatsappNumber: Boolean
  whatsappVerifiedAt: Boolean
  password: Boolean
  referralCode: Boolean
  status: Boolean
  schoolId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  theme: Boolean
}

input UserMaxAggregateInput {
  id: Boolean
  firstName: Boolean
  lastName: Boolean
  email: Boolean
  addressId: Boolean
  userRole: Boolean
  userType: Boolean
  avatarUrl: Boolean
  whatsappNumber: Boolean
  whatsappVerifiedAt: Boolean
  password: Boolean
  referralCode: Boolean
  status: Boolean
  schoolId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  theme: Boolean
}

input UserCreatedByCustomPeriodArgs {
  start: DateTime!
  end: DateTime!
  period: Period!
  where: UserWhereInput
}

"""
Period options for data retrieval
"""
enum Period {
  WEEKLY
  MONTHLY
  YEARLY
}

input ItemWhereUniqueInput {
  id: Int
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  cost: FloatFilter
  userRole: EnumUserRoleFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  cart: CartListRelationFilter
}

input ItemOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  price: SortOrder
  cost: SortOrder
  userRole: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  cart: CartOrderByRelationAggregateInput
}

enum ItemScalarFieldEnum {
  id
  name
  description
  price
  cost
  userRole
  createdAt
  updatedAt
}

input ItemCountAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  price: Boolean
  cost: Boolean
  userRole: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input ItemAvgAggregateInput {
  id: Boolean
  price: Boolean
  cost: Boolean
}

input ItemSumAggregateInput {
  id: Boolean
  price: Boolean
  cost: Boolean
}

input ItemMinAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  price: Boolean
  cost: Boolean
  userRole: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input ItemMaxAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  price: Boolean
  cost: Boolean
  userRole: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input ProgramWhereUniqueInput {
  id: Int
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  name: StringFilter
  startDate: DateTimeFilter
  dueDate: DateTimeNullableFilter
  description: StringFilter
  createdById: StringFilter
  categoryId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Images: ImagesListRelationFilter
  createdBy: UserRelationFilter
  participant: UserListRelationFilter
  category: ProgramCategoryRelationFilter
}

enum ProgramScalarFieldEnum {
  id
  name
  startDate
  dueDate
  description
  createdById
  categoryId
  createdAt
  updatedAt
}

input ProgramCountAggregateInput {
  id: Boolean
  name: Boolean
  startDate: Boolean
  dueDate: Boolean
  description: Boolean
  createdById: Boolean
  categoryId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input ProgramAvgAggregateInput {
  id: Boolean
  categoryId: Boolean
}

input ProgramSumAggregateInput {
  id: Boolean
  categoryId: Boolean
}

input ProgramMinAggregateInput {
  id: Boolean
  name: Boolean
  startDate: Boolean
  dueDate: Boolean
  description: Boolean
  createdById: Boolean
  categoryId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input ProgramMaxAggregateInput {
  id: Boolean
  name: Boolean
  startDate: Boolean
  dueDate: Boolean
  description: Boolean
  createdById: Boolean
  categoryId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input BankWhereUniqueInput {
  id: Int
  AND: [BankWhereInput!]
  OR: [BankWhereInput!]
  NOT: [BankWhereInput!]
  name: StringFilter
  logoUrl: StringNullableFilter
  accountNumber: FloatNullableFilter
}

input BankWhereInput {
  AND: [BankWhereInput!]
  OR: [BankWhereInput!]
  NOT: [BankWhereInput!]
  id: IntFilter
  name: StringFilter
  logoUrl: StringNullableFilter
  accountNumber: FloatNullableFilter
}

input BankOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  logoUrl: SortOrderInput
  accountNumber: SortOrderInput
}

enum BankScalarFieldEnum {
  id
  name
  logoUrl
  accountNumber
  isActive
  accountId
}

input BankCountAggregateInput {
  id: Boolean
  name: Boolean
  logoUrl: Boolean
  accountNumber: Boolean
  _all: Boolean
}

input BankAvgAggregateInput {
  id: Boolean
  accountNumber: Boolean
}

input BankSumAggregateInput {
  id: Boolean
  accountNumber: Boolean
}

input BankMinAggregateInput {
  id: Boolean
  name: Boolean
  logoUrl: Boolean
  accountNumber: Boolean
}

input BankMaxAggregateInput {
  id: Boolean
  name: Boolean
  logoUrl: Boolean
  accountNumber: Boolean
}

input GetAllDisbursementArgs {
  """
  The pagination of the result. Default value is 20.
  """
  pagination: Int

  """
  The page number of the result to be viewed.
  """
  page: Int

  """
  Sort the result by the attribute. Use the attribute name (e.g sort=id) to sort in ascending order or dash+attribute name (e.g sort=-id) to sort in descending order.
  """
  sort: String
}

input GetDisbursementByIdArgs {
  """
  The id of the disbursement.
  """
  id: Int!
}

input GetDisbursementByIdempotencyKeyArgs {
  """
  The idempotency key of the disbursement.
  """
  idempotency_key: String!
}

input BankAccountInquiryArgs {
  """
  The account number of the inquiry bank
  """
  account_number: String!

  """
  Bank code of the inquiry bank
  """
  bank_code: String!

  """
  The inquiry key.
  """
  inquiry_key: Int!
}

input GetPaymentArgs {
  bill_id: Int!
  start_date: String
  end_date: String
  pagination: Int
  page: Int
  sort_by: String
  sort_type: String
}

input GetAllPaymentArgs {
  start_date: String
  end_date: String
  pagination: Int
  page: Int
  sort_by: String
  sort_type: String
  reference_id: String
}

input RewardWhereUniqueInput {
  id: Int
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
  name: StringFilter
  pointCost: FloatFilter
  description: StringFilter
  images: ImagesListRelationFilter
  RewardClaim: RewardClaimListRelationFilter
}

enum RewardScalarFieldEnum {
  id
  name
  pointCost
  description
  createdAt
  updatedAt
}

input RewardCountAggregateInput {
  id: Boolean
  name: Boolean
  pointCost: Boolean
  description: Boolean
  _all: Boolean
}

input RewardAvgAggregateInput {
  id: Boolean
  pointCost: Boolean
}

input RewardSumAggregateInput {
  id: Boolean
  pointCost: Boolean
}

input RewardMinAggregateInput {
  id: Boolean
  name: Boolean
  pointCost: Boolean
  description: Boolean
}

input RewardMaxAggregateInput {
  id: Boolean
  name: Boolean
  pointCost: Boolean
  description: Boolean
}

input TransactionWhereUniqueInput {
  id: Int
  installmentId: Int
  withdrawalRequestId: Int
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  amount: FloatFilter
  proofUrl: StringNullableFilter
  status: EnumTransactionStatusFilter
  transactionCategory: EnumTransactionCategoryFilter
  fromAccountId: IntFilter
  toAccountId: IntFilter
  invoiceId: IntNullableFilter
  uniqueCode: IntNullableFilter
  createdAt: DateTimeFilter
  fromAccount: AccountRelationFilter
  toAccount: AccountRelationFilter
  invoice: InvoiceNullableRelationFilter
  withdrawalRequest: WithdrawalRequestNullableRelationFilter
}

input TransactionOrderByWithRelationInput {
  id: SortOrder
  amount: SortOrder
  proofUrl: SortOrderInput
  status: SortOrder
  transactionCategory: SortOrder
  fromAccountId: SortOrder
  toAccountId: SortOrder
  invoiceId: SortOrderInput
  installmentId: SortOrderInput
  withdrawalRequestId: SortOrderInput
  uniqueCode: SortOrderInput
  createdAt: SortOrder
  fromAccount: AccountOrderByWithRelationInput
  toAccount: AccountOrderByWithRelationInput
  invoice: InvoiceOrderByWithRelationInput
  withdrawalRequest: WithdrawalRequestOrderByWithRelationInput
}

input WithdrawalRequestOrderByWithRelationInput {
  id: SortOrder
  userId: SortOrder
  amount: SortOrder
  status: SortOrder
  proofUrl: SortOrderInput
  proofDescription: SortOrderInput
  transactionId: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  transaction: TransactionOrderByWithRelationInput
}

enum TransactionScalarFieldEnum {
  id
  amount
  proofUrl
  status
  transactionCategory
  fromAccountId
  toAccountId
  invoiceId
  installmentId
  withdrawalRequestId
  uniqueCode
  createdAt
}

input TransactionCountAggregateInput {
  id: Boolean
  amount: Boolean
  proofUrl: Boolean
  status: Boolean
  transactionCategory: Boolean
  fromAccountId: Boolean
  toAccountId: Boolean
  invoiceId: Boolean
  installmentId: Boolean
  withdrawalRequestId: Boolean
  uniqueCode: Boolean
  createdAt: Boolean
  _all: Boolean
}

input TransactionAvgAggregateInput {
  id: Boolean
  amount: Boolean
  fromAccountId: Boolean
  toAccountId: Boolean
  invoiceId: Boolean
  installmentId: Boolean
  withdrawalRequestId: Boolean
  uniqueCode: Boolean
}

input TransactionSumAggregateInput {
  id: Boolean
  amount: Boolean
  fromAccountId: Boolean
  toAccountId: Boolean
  invoiceId: Boolean
  installmentId: Boolean
  withdrawalRequestId: Boolean
  uniqueCode: Boolean
}

input TransactionMinAggregateInput {
  id: Boolean
  amount: Boolean
  proofUrl: Boolean
  status: Boolean
  transactionCategory: Boolean
  fromAccountId: Boolean
  toAccountId: Boolean
  invoiceId: Boolean
  installmentId: Boolean
  withdrawalRequestId: Boolean
  uniqueCode: Boolean
  createdAt: Boolean
}

input TransactionMaxAggregateInput {
  id: Boolean
  amount: Boolean
  proofUrl: Boolean
  status: Boolean
  transactionCategory: Boolean
  fromAccountId: Boolean
  toAccountId: Boolean
  invoiceId: Boolean
  installmentId: Boolean
  withdrawalRequestId: Boolean
  uniqueCode: Boolean
  createdAt: Boolean
}

input InvoiceWhereUniqueInput {
  id: Int
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  adminFee: FloatFilter
  amount: FloatFilter
  Order: OrderNullableRelationFilter
  transactions: TransactionListRelationFilter
  Installments: InstallmentListRelationFilter
}

enum InvoiceScalarFieldEnum {
  id
  adminFee
  amount
  uniqueCode
  createdAt
}

input InvoiceCountAggregateInput {
  id: Boolean
  adminFee: Boolean
  amount: Boolean
  _all: Boolean
}

input InvoiceAvgAggregateInput {
  id: Boolean
  adminFee: Boolean
  amount: Boolean
}

input InvoiceSumAggregateInput {
  id: Boolean
  adminFee: Boolean
  amount: Boolean
}

input InvoiceMinAggregateInput {
  id: Boolean
  adminFee: Boolean
  amount: Boolean
}

input InvoiceMaxAggregateInput {
  id: Boolean
  adminFee: Boolean
  amount: Boolean
}

input AccountWhereUniqueInput {
  id: Int
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  accountNumber: FloatNullableFilter
  name: StringFilter
  userId: StringFilter
  accountCategory: EnumAccountCategoryFilter
  user: UserRelationFilter
  transactionOrigins: TransactionListRelationFilter
  transactionDestination: TransactionListRelationFilter
}

enum AccountScalarFieldEnum {
  id
  accountNumber
  name
  createdAt
  updatedAt
  userId
  accountCategory
}

input AccountCountAggregateInput {
  id: Boolean
  accountNumber: Boolean
  name: Boolean
  userId: Boolean
  accountCategory: Boolean
  _all: Boolean
}

input AccountAvgAggregateInput {
  id: Boolean
  accountNumber: Boolean
}

input AccountSumAggregateInput {
  id: Boolean
  accountNumber: Boolean
}

input AccountMinAggregateInput {
  id: Boolean
  accountNumber: Boolean
  name: Boolean
  userId: Boolean
  accountCategory: Boolean
}

input AccountMaxAggregateInput {
  id: Boolean
  accountNumber: Boolean
  name: Boolean
  userId: Boolean
  accountCategory: Boolean
}

input UserFindManyOrderByAccountBalanceArgs {
  accountCategory: AccountCategory!
}

input AccountBalanceByCustomPeriodArgs {
  accountId: Int!
  start: DateTime!
  end: DateTime!
  period: Period!
}

input AccountBalanceOfPlatformByCustomPeriod {
  start: DateTime!
  end: DateTime!
  period: Period!
}

input WithdrawalRequestWhereUniqueInput {
  id: Int
  AND: [WithdrawalRequestWhereInput!]
  OR: [WithdrawalRequestWhereInput!]
  NOT: [WithdrawalRequestWhereInput!]
  userId: StringFilter
  amount: FloatFilter
  status: EnumTransactionStatusFilter
  proofUrl: StringNullableFilter
  proofDescription: StringNullableFilter
  transactionId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  transaction: TransactionNullableRelationFilter
}

enum WithdrawalRequestScalarFieldEnum {
  id
  userId
  amount
  status
  proofUrl
  proofDescription
  transactionId
  createdAt
  updatedAt
}

input WithdrawalRequestCountAggregateInput {
  id: Boolean
  userId: Boolean
  amount: Boolean
  status: Boolean
  proofUrl: Boolean
  proofDescription: Boolean
  transactionId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input WithdrawalRequestAvgAggregateInput {
  id: Boolean
  amount: Boolean
  transactionId: Boolean
}

input WithdrawalRequestSumAggregateInput {
  id: Boolean
  amount: Boolean
  transactionId: Boolean
}

input WithdrawalRequestMinAggregateInput {
  id: Boolean
  userId: Boolean
  amount: Boolean
  status: Boolean
  proofUrl: Boolean
  proofDescription: Boolean
  transactionId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input WithdrawalRequestMaxAggregateInput {
  id: Boolean
  userId: Boolean
  amount: Boolean
  status: Boolean
  proofUrl: Boolean
  proofDescription: Boolean
  transactionId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input FileWhereUniqueInput {
  id: Int
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  name: StringFilter
  description: StringFilter
  url: StringFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdBy: UserRelationFilter
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IntFilter
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  name: StringFilter
  description: StringFilter
  url: StringFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdBy: UserRelationFilter
}

input EnumFileTypeFilter {
  equals: FileType
  in: [FileType!]
  notIn: [FileType!]
  not: NestedEnumFileTypeFilter
}

input NestedEnumFileTypeFilter {
  equals: FileType
  in: [FileType!]
  notIn: [FileType!]
  not: NestedEnumFileTypeFilter
}

input FileOrderByWithRelationInput {
  id: SortOrder
  fileType: SortOrder
  filesize: SortOrder
  name: SortOrder
  description: SortOrder
  url: SortOrder
  createdById: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  createdBy: UserOrderByWithRelationInput
}

enum FileScalarFieldEnum {
  id
  fileType
  filesize
  name
  description
  url
  createdById
  createdAt
  updatedAt
}

input FileCountAggregateInput {
  id: Boolean
  fileType: Boolean
  filesize: Boolean
  name: Boolean
  description: Boolean
  url: Boolean
  createdById: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input FileAvgAggregateInput {
  id: Boolean
  filesize: Boolean
}

input FileSumAggregateInput {
  id: Boolean
  filesize: Boolean
}

input FileMinAggregateInput {
  id: Boolean
  fileType: Boolean
  filesize: Boolean
  name: Boolean
  description: Boolean
  url: Boolean
  createdById: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input FileMaxAggregateInput {
  id: Boolean
  fileType: Boolean
  filesize: Boolean
  name: Boolean
  description: Boolean
  url: Boolean
  createdById: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input HotelWhereUniqueInput {
  id: Int
  addressId: Int
  AND: [HotelWhereInput!]
  OR: [HotelWhereInput!]
  NOT: [HotelWhereInput!]
  name: StringFilter
  description: StringFilter
  rating: FloatFilter
  startDate: DateTimeFilter
  quota: IntFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  version: IntNullableFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  images: ImagesListRelationFilter
  checkIns: CheckInListRelationFilter
  createdBy: UserRelationFilter
}

enum HotelScalarFieldEnum {
  id
  name
  addressId
  description
  rating
  startDate
  quota
  createdById
  createdAt
  version
  updatedAt
}

input HotelCountAggregateInput {
  id: Boolean
  name: Boolean
  addressId: Boolean
  description: Boolean
  rating: Boolean
  startDate: Boolean
  quota: Boolean
  createdById: Boolean
  createdAt: Boolean
  version: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input HotelAvgAggregateInput {
  id: Boolean
  addressId: Boolean
  rating: Boolean
  quota: Boolean
  version: Boolean
}

input HotelSumAggregateInput {
  id: Boolean
  addressId: Boolean
  rating: Boolean
  quota: Boolean
  version: Boolean
}

input HotelMinAggregateInput {
  id: Boolean
  name: Boolean
  addressId: Boolean
  description: Boolean
  rating: Boolean
  startDate: Boolean
  quota: Boolean
  createdById: Boolean
  createdAt: Boolean
  version: Boolean
  updatedAt: Boolean
}

input HotelMaxAggregateInput {
  id: Boolean
  name: Boolean
  addressId: Boolean
  description: Boolean
  rating: Boolean
  startDate: Boolean
  quota: Boolean
  createdById: Boolean
  createdAt: Boolean
  version: Boolean
  updatedAt: Boolean
}

input ProgramCategoryWhereUniqueInput {
  id: Int
  AND: [ProgramCategoryWhereInput!]
  OR: [ProgramCategoryWhereInput!]
  NOT: [ProgramCategoryWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  programs: ProgramListRelationFilter
}

enum ProgramCategoryScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

input ProgramCategoryCountAggregateInput {
  id: Boolean
  name: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input ProgramCategoryAvgAggregateInput {
  id: Boolean
}

input ProgramCategorySumAggregateInput {
  id: Boolean
}

input ProgramCategoryMinAggregateInput {
  id: Boolean
  name: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input ProgramCategoryMaxAggregateInput {
  id: Boolean
  name: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input FaqWhereUniqueInput {
  id: Int
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  type: EnumFaqTypeFilter
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  type: EnumFaqTypeFilter
}

input EnumFaqTypeFilter {
  equals: FaqType
  in: [FaqType!]
  notIn: [FaqType!]
  not: NestedEnumFaqTypeFilter
}

input NestedEnumFaqTypeFilter {
  equals: FaqType
  in: [FaqType!]
  notIn: [FaqType!]
  not: NestedEnumFaqTypeFilter
}

input FaqOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  type: SortOrder
}

enum FaqScalarFieldEnum {
  id
  name
  description
  createdAt
  updatedAt
  type
}

input FaqCountAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  type: Boolean
  _all: Boolean
}

input FaqAvgAggregateInput {
  id: Boolean
}

input FaqSumAggregateInput {
  id: Boolean
}

input FaqMinAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  type: Boolean
}

input FaqMaxAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  type: Boolean
}

input ProjectWhereUniqueInput {
  id: Int
  accountId: Int
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  name: StringFilter
  description: StringFilter
  projectCategory: EnumProjectCategoryFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  returnRate: FloatFilter
  goalAmount: FloatFilter
  maxGoalAmountVersion: IntNullableFilter
  minimumInvestment: FloatFilter
  maxInvestor: IntFilter
  maxInvestorVersion: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  orderCart: CartListRelationFilter
  account: AccountRelationFilter
}

enum ProjectScalarFieldEnum {
  id
  name
  description
  projectCategory
  startDate
  endDate
  returnRate
  goalAmount
  maxGoalAmountVersion
  minimumInvestment
  maxInvestor
  maxInvestorVersion
  accountId
  createdAt
  updatedAt
}

input ProjectCountAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  projectCategory: Boolean
  startDate: Boolean
  endDate: Boolean
  returnRate: Boolean
  goalAmount: Boolean
  maxGoalAmountVersion: Boolean
  minimumInvestment: Boolean
  maxInvestor: Boolean
  maxInvestorVersion: Boolean
  accountId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input ProjectAvgAggregateInput {
  id: Boolean
  returnRate: Boolean
  goalAmount: Boolean
  maxGoalAmountVersion: Boolean
  minimumInvestment: Boolean
  maxInvestor: Boolean
  maxInvestorVersion: Boolean
  accountId: Boolean
}

input ProjectSumAggregateInput {
  id: Boolean
  returnRate: Boolean
  goalAmount: Boolean
  maxGoalAmountVersion: Boolean
  minimumInvestment: Boolean
  maxInvestor: Boolean
  maxInvestorVersion: Boolean
  accountId: Boolean
}

input ProjectMinAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  projectCategory: Boolean
  startDate: Boolean
  endDate: Boolean
  returnRate: Boolean
  goalAmount: Boolean
  maxGoalAmountVersion: Boolean
  minimumInvestment: Boolean
  maxInvestor: Boolean
  maxInvestorVersion: Boolean
  accountId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input ProjectMaxAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  projectCategory: Boolean
  startDate: Boolean
  endDate: Boolean
  returnRate: Boolean
  goalAmount: Boolean
  maxGoalAmountVersion: Boolean
  minimumInvestment: Boolean
  maxInvestor: Boolean
  maxInvestorVersion: Boolean
  accountId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input ShippingWhereUniqueInput {
  id: Int
  orderId: Int
  AND: [ShippingWhereInput!]
  OR: [ShippingWhereInput!]
  NOT: [ShippingWhereInput!]
  logisticName: StringFilter
  deliveryDate: DateTimeNullableFilter
  courier: StringNullableFilter
  estimatedTime: StringNullableFilter
  trackingNo: StringNullableFilter
  address: AddressRelationFilter
  order: OrderRelationFilter
}

enum ShippingScalarFieldEnum {
  id
  logisticName
  deliveryDate
  shippingStatus
  addressId
  courier
  estimatedTime
  trackingNo
  orderId
  createdAt
  updatedAt
}

input ShippingCountAggregateInput {
  id: Boolean
  logisticName: Boolean
  deliveryDate: Boolean
  courier: Boolean
  estimatedTime: Boolean
  trackingNo: Boolean
  orderId: Boolean
  _all: Boolean
}

input ShippingAvgAggregateInput {
  id: Boolean
  orderId: Boolean
}

input ShippingSumAggregateInput {
  id: Boolean
  orderId: Boolean
}

input ShippingMinAggregateInput {
  id: Boolean
  logisticName: Boolean
  deliveryDate: Boolean
  courier: Boolean
  estimatedTime: Boolean
  trackingNo: Boolean
  orderId: Boolean
}

input ShippingMaxAggregateInput {
  id: Boolean
  logisticName: Boolean
  deliveryDate: Boolean
  courier: Boolean
  estimatedTime: Boolean
  trackingNo: Boolean
  orderId: Boolean
}

input CheckInWhereUniqueInput {
  id: Int
  AND: [CheckInWhereInput!]
  OR: [CheckInWhereInput!]
  NOT: [CheckInWhereInput!]
  userId: StringFilter
  hotelId: IntFilter
  checkInAt: DateTimeFilter
  user: UserRelationFilter
  hotel: HotelRelationFilter
}

input CheckInOrderByWithRelationInput {
  id: SortOrder
  userId: SortOrder
  hotelId: SortOrder
  checkInAt: SortOrder
  user: UserOrderByWithRelationInput
  hotel: HotelOrderByWithRelationInput
}

enum CheckInScalarFieldEnum {
  id
  userId
  hotelId
  checkInAt
  createdAt
  updatedAt
}

input CheckInCountAggregateInput {
  id: Boolean
  userId: Boolean
  hotelId: Boolean
  checkInAt: Boolean
  _all: Boolean
}

input CheckInAvgAggregateInput {
  id: Boolean
  hotelId: Boolean
}

input CheckInSumAggregateInput {
  id: Boolean
  hotelId: Boolean
}

input CheckInMinAggregateInput {
  id: Boolean
  userId: Boolean
  hotelId: Boolean
  checkInAt: Boolean
}

input CheckInMaxAggregateInput {
  id: Boolean
  userId: Boolean
  hotelId: Boolean
  checkInAt: Boolean
}

input UserNotificationWhereUniqueInput {
  id: Int
  AND: [UserNotificationWhereInput!]
  OR: [UserNotificationWhereInput!]
  NOT: [UserNotificationWhereInput!]
  title: StringFilter
  subtitle: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  category: EnumUserNotificationCategoryFilter
  isRead: BoolFilter
  isCleared: BoolFilter
  userId: StringFilter
  deepLink: StringNullableFilter
  fcmToken: StringNullableFilter
  user: UserRelationFilter
}

input UserNotificationWhereInput {
  AND: [UserNotificationWhereInput!]
  OR: [UserNotificationWhereInput!]
  NOT: [UserNotificationWhereInput!]
  id: IntFilter
  title: StringFilter
  subtitle: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  category: EnumUserNotificationCategoryFilter
  isRead: BoolFilter
  isCleared: BoolFilter
  userId: StringFilter
  deepLink: StringNullableFilter
  fcmToken: StringNullableFilter
  user: UserRelationFilter
}

input EnumUserNotificationCategoryFilter {
  equals: UserNotificationCategory
  in: [UserNotificationCategory!]
  notIn: [UserNotificationCategory!]
  not: NestedEnumUserNotificationCategoryFilter
}

input NestedEnumUserNotificationCategoryFilter {
  equals: UserNotificationCategory
  in: [UserNotificationCategory!]
  notIn: [UserNotificationCategory!]
  not: NestedEnumUserNotificationCategoryFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input UserNotificationOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  subtitle: SortOrder
  content: SortOrder
  createdAt: SortOrder
  category: SortOrder
  isRead: SortOrder
  isCleared: SortOrder
  userId: SortOrder
  deepLink: SortOrderInput
  fcmToken: SortOrderInput
  user: UserOrderByWithRelationInput
}

enum UserNotificationScalarFieldEnum {
  id
  title
  subtitle
  content
  createdAt
  category
  isRead
  isCleared
  userId
  deepLink
  fcmToken
}

input UserNotificationCountAggregateInput {
  id: Boolean
  title: Boolean
  subtitle: Boolean
  content: Boolean
  createdAt: Boolean
  category: Boolean
  isRead: Boolean
  isCleared: Boolean
  userId: Boolean
  deepLink: Boolean
  fcmToken: Boolean
  _all: Boolean
}

input UserNotificationAvgAggregateInput {
  id: Boolean
}

input UserNotificationSumAggregateInput {
  id: Boolean
}

input UserNotificationMinAggregateInput {
  id: Boolean
  title: Boolean
  subtitle: Boolean
  content: Boolean
  createdAt: Boolean
  category: Boolean
  isRead: Boolean
  isCleared: Boolean
  userId: Boolean
  deepLink: Boolean
  fcmToken: Boolean
}

input UserNotificationMaxAggregateInput {
  id: Boolean
  title: Boolean
  subtitle: Boolean
  content: Boolean
  createdAt: Boolean
  category: Boolean
  isRead: Boolean
  isCleared: Boolean
  userId: Boolean
  deepLink: Boolean
  fcmToken: Boolean
}

input SessionWhereUniqueInput {
  id: Int
  token: String
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  expiresAt: DateTimeFilter
  createdAt: DateTimeFilter
  userId: StringFilter
  device: StringFilter
  ipAddress: FloatFilter
  user: UserRelationFilter
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  id: IntFilter
  token: StringFilter
  expiresAt: DateTimeFilter
  createdAt: DateTimeFilter
  userId: StringFilter
  device: StringFilter
  ipAddress: FloatFilter
  user: UserRelationFilter
}

input SessionOrderByWithRelationInput {
  id: SortOrder
  token: SortOrder
  expiresAt: SortOrder
  createdAt: SortOrder
  userId: SortOrder
  device: SortOrder
  ipAddress: SortOrder
  user: UserOrderByWithRelationInput
}

enum SessionScalarFieldEnum {
  id
  token
  expiresAt
  createdAt
  userId
  device
  ipAddress
}

input SessionCountAggregateInput {
  id: Boolean
  token: Boolean
  expiresAt: Boolean
  createdAt: Boolean
  userId: Boolean
  device: Boolean
  ipAddress: Boolean
  _all: Boolean
}

input SessionAvgAggregateInput {
  id: Boolean
  ipAddress: Boolean
}

input SessionSumAggregateInput {
  id: Boolean
  ipAddress: Boolean
}

input SessionMinAggregateInput {
  id: Boolean
  token: Boolean
  expiresAt: Boolean
  createdAt: Boolean
  userId: Boolean
  device: Boolean
  ipAddress: Boolean
}

input SessionMaxAggregateInput {
  id: Boolean
  token: Boolean
  expiresAt: Boolean
  createdAt: Boolean
  userId: Boolean
  device: Boolean
  ipAddress: Boolean
}

input SchoolWhereUniqueInput {
  id: Int
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  students: UserListRelationFilter
}

enum SchoolScalarFieldEnum {
  id
  name
  addressId
  createdAt
  updatedAt
}

input SchoolCountAggregateInput {
  id: Boolean
  name: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input SchoolAvgAggregateInput {
  id: Boolean
}

input SchoolSumAggregateInput {
  id: Boolean
}

input SchoolMinAggregateInput {
  id: Boolean
  name: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input SchoolMaxAggregateInput {
  id: Boolean
  name: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input AddressWhereUniqueInput {
  id: Int
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  name: StringFilter
  subdistrictId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  subdistrict: SubdistrictRelationFilter
  user: UserNullableRelationFilter
  hotel: HotelNullableRelationFilter
  school: SchoolNullableRelationFilter
  Shipping: ShippingNullableRelationFilter
}

enum AddressScalarFieldEnum {
  id
  name
  subdistrictId
  createdAt
  updatedAt
}

input AddressCountAggregateInput {
  id: Boolean
  name: Boolean
  subdistrictId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input AddressAvgAggregateInput {
  id: Boolean
  subdistrictId: Boolean
}

input AddressSumAggregateInput {
  id: Boolean
  subdistrictId: Boolean
}

input AddressMinAggregateInput {
  id: Boolean
  name: Boolean
  subdistrictId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input AddressMaxAggregateInput {
  id: Boolean
  name: Boolean
  subdistrictId: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input OrderWhereUniqueInput {
  id: Int
  orderById: String
  invoiceId: Int
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  status: EnumTransactionStatusFilter
  shippingId: IntNullableFilter
  platformFee: FloatFilter
  total: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  orderBy: UserRelationFilter
  cart: CartListRelationFilter
  shipping: ShippingNullableRelationFilter
  invoice: InvoiceRelationFilter
}

enum OrderScalarFieldEnum {
  id
  status
  orderById
  shippingId
  invoiceId
  platformFee
  total
  createdAt
  updatedAt
}

input OrderCountAggregateInput {
  id: Boolean
  status: Boolean
  orderById: Boolean
  shippingId: Boolean
  invoiceId: Boolean
  platformFee: Boolean
  total: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input OrderAvgAggregateInput {
  id: Boolean
  shippingId: Boolean
  invoiceId: Boolean
  platformFee: Boolean
  total: Boolean
}

input OrderSumAggregateInput {
  id: Boolean
  shippingId: Boolean
  invoiceId: Boolean
  platformFee: Boolean
  total: Boolean
}

input OrderMinAggregateInput {
  id: Boolean
  status: Boolean
  orderById: Boolean
  shippingId: Boolean
  invoiceId: Boolean
  platformFee: Boolean
  total: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input OrderMaxAggregateInput {
  id: Boolean
  status: Boolean
  orderById: Boolean
  shippingId: Boolean
  invoiceId: Boolean
  platformFee: Boolean
  total: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input ProvinceWhereUniqueInput {
  id: Int
  name: String
  AND: [ProvinceWhereInput!]
  OR: [ProvinceWhereInput!]
  NOT: [ProvinceWhereInput!]
  cities: CityListRelationFilter
}

enum ProvinceScalarFieldEnum {
  id
  name
}

input ProvinceCountAggregateInput {
  id: Boolean
  name: Boolean
  _all: Boolean
}

input ProvinceAvgAggregateInput {
  id: Boolean
}

input ProvinceSumAggregateInput {
  id: Boolean
}

input ProvinceMinAggregateInput {
  id: Boolean
  name: Boolean
}

input ProvinceMaxAggregateInput {
  id: Boolean
  name: Boolean
}

input CityWhereUniqueInput {
  id: Int
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  name: StringFilter
  provinceId: IntFilter
  province: ProvinceRelationFilter
  districts: DistrictListRelationFilter
}

enum CityScalarFieldEnum {
  id
  name
  provinceId
}

input CityCountAggregateInput {
  id: Boolean
  name: Boolean
  provinceId: Boolean
  _all: Boolean
}

input CityAvgAggregateInput {
  id: Boolean
  provinceId: Boolean
}

input CitySumAggregateInput {
  id: Boolean
  provinceId: Boolean
}

input CityMinAggregateInput {
  id: Boolean
  name: Boolean
  provinceId: Boolean
}

input CityMaxAggregateInput {
  id: Boolean
  name: Boolean
  provinceId: Boolean
}

input CityFindManyUserArgs {
  userRole: UserRole
  status: UserStatus
}

input DistrictWhereUniqueInput {
  id: Int
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  name: StringFilter
  cityId: IntFilter
  city: CityRelationFilter
  subdistricts: SubdistrictListRelationFilter
}

enum DistrictScalarFieldEnum {
  id
  name
  cityId
}

input DistrictCountAggregateInput {
  id: Boolean
  name: Boolean
  cityId: Boolean
  _all: Boolean
}

input DistrictAvgAggregateInput {
  id: Boolean
  cityId: Boolean
}

input DistrictSumAggregateInput {
  id: Boolean
  cityId: Boolean
}

input DistrictMinAggregateInput {
  id: Boolean
  name: Boolean
  cityId: Boolean
}

input DistrictMaxAggregateInput {
  id: Boolean
  name: Boolean
  cityId: Boolean
}

input SubdistrictWhereUniqueInput {
  id: Int
  AND: [SubdistrictWhereInput!]
  OR: [SubdistrictWhereInput!]
  NOT: [SubdistrictWhereInput!]
  name: StringFilter
  districtId: IntFilter
  postalCode: StringFilter
  district: DistrictRelationFilter
  address: AddressListRelationFilter
}

enum SubdistrictScalarFieldEnum {
  id
  name
  districtId
  postalCode
}

input SubdistrictCountAggregateInput {
  id: Boolean
  name: Boolean
  districtId: Boolean
  postalCode: Boolean
  _all: Boolean
}

input SubdistrictAvgAggregateInput {
  id: Boolean
  districtId: Boolean
}

input SubdistrictSumAggregateInput {
  id: Boolean
  districtId: Boolean
}

input SubdistrictMinAggregateInput {
  id: Boolean
  name: Boolean
  districtId: Boolean
  postalCode: Boolean
}

input SubdistrictMaxAggregateInput {
  id: Boolean
  name: Boolean
  districtId: Boolean
  postalCode: Boolean
}

input CartWhereUniqueInput {
  id: Int
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  orderId: IntFilter
  membershipItemId: IntNullableFilter
  projectItemId: IntNullableFilter
  quantity: IntFilter
  price: FloatFilter
  cost: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  order: OrderRelationFilter
  membershipItem: ItemNullableRelationFilter
  projectItem: ProjectNullableRelationFilter
}

input CartOrderByWithRelationInput {
  id: SortOrder
  orderId: SortOrder
  membershipItemId: SortOrderInput
  projectItemId: SortOrderInput
  quantity: SortOrder
  price: SortOrder
  cost: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  order: OrderOrderByWithRelationInput
  membershipItem: ItemOrderByWithRelationInput
  projectItem: ProjectOrderByWithRelationInput
}

enum CartScalarFieldEnum {
  id
  orderId
  membershipItemId
  projectItemId
  quantity
  price
  cost
  createdAt
  updatedAt
}

input CartCountAggregateInput {
  id: Boolean
  orderId: Boolean
  membershipItemId: Boolean
  projectItemId: Boolean
  quantity: Boolean
  price: Boolean
  cost: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _all: Boolean
}

input CartAvgAggregateInput {
  id: Boolean
  orderId: Boolean
  membershipItemId: Boolean
  projectItemId: Boolean
  quantity: Boolean
  price: Boolean
  cost: Boolean
}

input CartSumAggregateInput {
  id: Boolean
  orderId: Boolean
  membershipItemId: Boolean
  projectItemId: Boolean
  quantity: Boolean
  price: Boolean
  cost: Boolean
}

input CartMinAggregateInput {
  id: Boolean
  orderId: Boolean
  membershipItemId: Boolean
  projectItemId: Boolean
  quantity: Boolean
  price: Boolean
  cost: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input CartMaxAggregateInput {
  id: Boolean
  orderId: Boolean
  membershipItemId: Boolean
  projectItemId: Boolean
  quantity: Boolean
  price: Boolean
  cost: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input RewardClaimWhereUniqueInput {
  id: Int
  AND: [RewardClaimWhereInput!]
  OR: [RewardClaimWhereInput!]
  NOT: [RewardClaimWhereInput!]
  userId: StringFilter
  rewardId: IntFilter
  processedAt: DateTimeFilter
  createdAt: DateTimeFilter
  user: UserRelationFilter
  reward: RewardRelationFilter
}

input RewardClaimOrderByWithRelationInput {
  id: SortOrder
  userId: SortOrder
  rewardId: SortOrder
  processedAt: SortOrder
  createdAt: SortOrder
  user: UserOrderByWithRelationInput
  reward: RewardOrderByWithRelationInput
}

enum RewardClaimScalarFieldEnum {
  id
  userId
  rewardId
  processedAt
  createdAt
}

input RewardClaimCountAggregateInput {
  id: Boolean
  userId: Boolean
  rewardId: Boolean
  processedAt: Boolean
  createdAt: Boolean
  _all: Boolean
}

input RewardClaimAvgAggregateInput {
  id: Boolean
  rewardId: Boolean
}

input RewardClaimSumAggregateInput {
  id: Boolean
  rewardId: Boolean
}

input RewardClaimMinAggregateInput {
  id: Boolean
  userId: Boolean
  rewardId: Boolean
  processedAt: Boolean
  createdAt: Boolean
}

input RewardClaimMaxAggregateInput {
  id: Boolean
  userId: Boolean
  rewardId: Boolean
  processedAt: Boolean
  createdAt: Boolean
}

type Mutation {
  authPasswordReset(email: String!): String!

  """
  Deskripsinya ada disini loh
  """
  userCreateOne(data: UserCreateInput!): User

  """
  Deskripsinya ada disini loh
  """
  userCreateMany(
    data: [UserCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  userUpdateOne(data: UserUpdateInput!, where: UserWhereUniqueInput!): User

  """
  Deskripsinya ada disini loh
  """
  userUpdateOneOfStatusToInactive(userId: String!): User

  """
  Deskripsinya ada disini loh
  """
  userUpdateOneOfStatusToActive(userId: String!): User

  """
  Deskripsinya ada disini loh
  """
  userUpdateMany(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): User

  """
  Berupa softdelete
  """
  userDelete(where: UserWhereUniqueInput!): Boolean!

  """
  Berupa softdelete
  """
  userDeleteMany(where: UserWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  itemCreateOne(data: ItemCreateInput!): Item

  """
  Deskripsinya ada disini loh
  """
  itemCreateMany(
    data: [ItemCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  itemUpdateOne(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item

  """
  Deskripsinya ada disini loh
  """
  itemUpdateMany(
    data: ItemUpdateManyMutationInput!
    where: ItemWhereInput
  ): Item

  """
  Deskripsinya ada disini loh
  """
  itemDelete(where: ItemWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  itemDeleteMany(where: ItemWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  programCreateOne(data: ProgramCreateInput!): Program

  """
  Deskripsinya ada disini loh
  """
  programCreateMany(
    data: [ProgramCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  programUpdateOne(
    data: ProgramUpdateInput!
    where: ProgramWhereUniqueInput!
  ): Program

  """
  Deskripsinya ada disini loh
  """
  programUpdateMany(
    data: ProgramUpdateManyMutationInput!
    where: ProgramWhereInput
  ): Program

  """
  Deskripsinya ada disini loh
  """
  programDelete(where: ProgramWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  programDeleteMany(where: ProgramWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  bankCreateOne(data: BankCreateInput!): Bank

  """
  Deskripsinya ada disini loh
  """
  bankCreateMany(
    data: [BankCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  bankUpdateOne(data: BankUpdateInput!, where: BankWhereUniqueInput!): Bank

  """
  Deskripsinya ada disini loh
  """
  bankUpdateMany(
    data: BankUpdateManyMutationInput!
    where: BankWhereInput
  ): Bank

  """
  Deskripsinya ada disini loh
  """
  bankDelete(where: BankWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  bankDeleteMany(where: BankWhereInput): Boolean!
  createDisbursement(
    createDisbursementArgs: CreateDisbursementArgs!
  ): Disbursement!

  """
  Deskripsinya ada disini loh
  """
  createBill(createBillArgs: CreateBillArgs!): BillEntity

  """
  Deskripsinya ada disini loh
  """
  updateBill(updateBillArgs: UpdateBillArgs!): BillEntity

  """
  Deskripsinya ada disini loh
  """
  rewardCreateOne(data: RewardCreateInput!): Reward

  """
  Deskripsinya ada disini loh
  """
  rewardCreateMany(
    data: [RewardCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  rewardUpdateOne(
    data: RewardUpdateInput!
    where: RewardWhereUniqueInput!
  ): Reward

  """
  Deskripsinya ada disini loh
  """
  rewardUpdateMany(
    data: RewardUpdateManyMutationInput!
    where: RewardWhereInput
  ): Reward

  """
  Deskripsinya ada disini loh
  """
  rewardDelete(where: RewardWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  rewardDeleteMany(where: RewardWhereInput): Boolean!

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  uploadSingleFile(
    file: Upload
    userId: String!
    ratioForImage: RatioEnum
  ): String

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  uploadMultiFile(
    files: [Upload!]
    userId: String!
    ratioForImage: RatioEnum
  ): [String!]

  """
  Deskripsinya ada disini loh
  """
  transactionCreateOne(data: TransactionCreateInput!): Transaction

  """
  Deskripsinya ada disini loh
  """
  transactionCreateMany(
    data: [TransactionCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  transactionUpdateOne(
    data: TransactionUpdateInput!
    where: TransactionWhereUniqueInput!
  ): Transaction

  """
  Deskripsinya ada disini loh
  """
  transactionUpdateMany(
    data: TransactionUpdateManyMutationInput!
    where: TransactionWhereInput
  ): Transaction

  """
  Deskripsinya ada disini loh
  """
  invoiceCreateOne(data: InvoiceCreateInput!): Invoice

  """
  Deskripsinya ada disini loh
  """
  invoiceCreateMany(
    data: [InvoiceCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  invoiceUpdateOne(
    data: InvoiceUpdateInput!
    where: InvoiceWhereUniqueInput!
  ): Invoice

  """
  Deskripsinya ada disini loh
  """
  invoiceUpdateMany(
    data: InvoiceUpdateManyMutationInput!
    where: InvoiceWhereInput
  ): Invoice

  """
  Deskripsinya ada disini loh
  """
  invoiceDelete(where: InvoiceWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  invoiceDeleteMany(where: InvoiceWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  accountCreateMany(
    data: [AccountCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  accountUpdateOne(
    data: AccountUpdateInput!
    where: AccountWhereUniqueInput!
  ): Account

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestCreateOne(
    data: WithdrawalRequestCreateInput!
  ): WithdrawalRequest

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestCreateMany(
    data: [WithdrawalRequestCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestUpdateOne(
    data: WithdrawalRequestUpdateInput!
    where: WithdrawalRequestWhereUniqueInput!
  ): WithdrawalRequest

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestUpdateMany(
    data: WithdrawalRequestUpdateManyMutationInput!
    where: WithdrawalRequestWhereInput
  ): WithdrawalRequest

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestDelete(where: WithdrawalRequestWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  withdrawalRequestDeleteMany(where: WithdrawalRequestWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  fileCreateOne(data: FileCreateInput!): File

  """
  Deskripsinya ada disini loh
  """
  fileCreateMany(
    data: [FileCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  fileUpdateOne(data: FileUpdateInput!, where: FileWhereUniqueInput!): File

  """
  Deskripsinya ada disini loh
  """
  fileUpdateMany(
    data: FileUpdateManyMutationInput!
    where: FileWhereInput
  ): File

  """
  Deskripsinya ada disini loh
  """
  fileDelete(where: FileWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  fileDeleteMany(where: FileWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  hotelCreateOne(data: HotelCreateInput!): Hotel

  """
  Deskripsinya ada disini loh
  """
  hotelCreateMany(
    data: [HotelCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  hotelUpdateOne(data: HotelUpdateInput!, where: HotelWhereUniqueInput!): Hotel

  """
  Deskripsinya ada disini loh
  """
  hotelUpdateMany(
    data: HotelUpdateManyMutationInput!
    where: HotelWhereInput
  ): Hotel

  """
  Deskripsinya ada disini loh
  """
  hotelDelete(where: HotelWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  hotelDeleteMany(where: HotelWhereInput): Boolean!
  authLogin(loginArgs: LoginArgs!): LoginResponse

  """
  Deskripsinya ada disini loh
  """
  programCategoryCreateOne(data: ProgramCategoryCreateInput!): ProgramCategory

  """
  Deskripsinya ada disini loh
  """
  programCategoryCreateMany(
    data: [ProgramCategoryCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  programCategoryUpdateOne(
    data: ProgramCategoryUpdateInput!
    where: ProgramCategoryWhereUniqueInput!
  ): ProgramCategory

  """
  Deskripsinya ada disini loh
  """
  programCategoryUpdateMany(
    data: ProgramCategoryUpdateManyMutationInput!
    where: ProgramCategoryWhereInput
  ): ProgramCategory

  """
  Deskripsinya ada disini loh
  """
  programCategoryDelete(where: ProgramCategoryWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  programCategoryDeleteMany(where: ProgramCategoryWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  faqCreateOne(data: FaqCreateInput!): Faq

  """
  Deskripsinya ada disini loh
  """
  faqCreateMany(
    data: [FaqCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  faqUpdateOne(data: FaqUpdateInput!, where: FaqWhereUniqueInput!): Faq

  """
  Deskripsinya ada disini loh
  """
  faqUpdateMany(data: FaqUpdateManyMutationInput!, where: FaqWhereInput): Faq

  """
  Deskripsinya ada disini loh
  """
  faqDelete(where: FaqWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  faqDeleteMany(where: FaqWhereInput): Boolean!

  """
  Otomatis dibuatkan account untuk project ini
  """
  projectCreateOne(data: ProjectCreateInput!): Project

  """
  Deskripsinya ada disini loh
  """
  projectUpdateOne(
    data: ProjectUpdateInput!
    where: ProjectWhereUniqueInput!
  ): Project

  """
  Deskripsinya ada disini loh
  """
  projectUpdateMany(
    data: ProjectUpdateManyMutationInput!
    where: ProjectWhereInput
  ): Project

  """
  Deskripsinya ada disini loh
  """
  shippingCreateOne(data: ShippingCreateInput!): Shipping

  """
  Deskripsinya ada disini loh
  """
  shippingCreateMany(
    data: [ShippingCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  shippingUpdateOne(
    data: ShippingUpdateInput!
    where: ShippingWhereUniqueInput!
  ): Shipping

  """
  Deskripsinya ada disini loh
  """
  shippingUpdateMany(
    data: ShippingUpdateManyMutationInput!
    where: ShippingWhereInput
  ): Shipping

  """
  Deskripsinya ada disini loh
  """
  shippingDelete(where: ShippingWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  shippingDeleteMany(where: ShippingWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  checkInCreateOne(data: CheckInCreateInput!): CheckIn

  """
  Deskripsinya ada disini loh
  """
  checkInCreateMany(
    data: [CheckInCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  checkInUpdateOne(
    data: CheckInUpdateInput!
    where: CheckInWhereUniqueInput!
  ): CheckIn

  """
  Deskripsinya ada disini loh
  """
  checkInUpdateMany(
    data: CheckInUpdateManyMutationInput!
    where: CheckInWhereInput
  ): CheckIn

  """
  Deskripsinya ada disini loh
  """
  checkInDelete(where: CheckInWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  checkInDeleteMany(where: CheckInWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  userNotificationUpdateOne(
    data: UserNotificationUpdateInput!
    where: UserNotificationWhereUniqueInput!
  ): UserNotification

  """
  Deskripsinya ada disini loh
  """
  userNotificationUpdateMany(
    data: UserNotificationUpdateManyMutationInput!
    where: UserNotificationWhereInput
  ): UserNotification

  """
  Deskripsinya ada disini loh
  """
  schoolCreateOne(data: SchoolCreateInput!): School

  """
  Deskripsinya ada disini loh
  """
  schoolCreateMany(
    data: [SchoolCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  schoolUpdateOne(
    data: SchoolUpdateInput!
    where: SchoolWhereUniqueInput!
  ): School

  """
  Deskripsinya ada disini loh
  """
  schoolUpdateMany(
    data: SchoolUpdateManyMutationInput!
    where: SchoolWhereInput
  ): School

  """
  Deskripsinya ada disini loh
  """
  schoolDelete(where: SchoolWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  schoolDeleteMany(where: SchoolWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  addressCreateOne(data: AddressCreateInput!): Address

  """
  Deskripsinya ada disini loh
  """
  addressCreateMany(
    data: [AddressCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  addressUpdateOne(
    data: AddressUpdateInput!
    where: AddressWhereUniqueInput!
  ): Address

  """
  Deskripsinya ada disini loh
  """
  addressUpdateMany(
    data: AddressUpdateManyMutationInput!
    where: AddressWhereInput
  ): Address

  """
  Deskripsinya ada disini loh
  """
  addressDelete(where: AddressWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  addressDeleteMany(where: AddressWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  orderCreateOne(data: OrderCreateInput!): Order

  """
  Deskripsinya ada disini loh
  """
  orderCreateMany(
    data: [OrderCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  orderUpdateOne(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order

  """
  Deskripsinya ada disini loh
  """
  orderUpdateMany(
    data: OrderUpdateManyMutationInput!
    where: OrderWhereInput
  ): Order

  """
  Deskripsinya ada disini loh
  """
  orderDelete(where: OrderWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  orderDeleteMany(where: OrderWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  cityCreateOne(data: CityCreateInput!): City

  """
  Deskripsinya ada disini loh
  """
  cityCreateMany(
    data: [CityCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  cityUpdateOne(data: CityUpdateInput!, where: CityWhereUniqueInput!): City

  """
  Deskripsinya ada disini loh
  """
  cityUpdateMany(
    data: CityUpdateManyMutationInput!
    where: CityWhereInput
  ): City

  """
  Deskripsinya ada disini loh
  """
  cityDelete(where: CityWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  cityDeleteMany(where: CityWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  cartCreateOne(data: CartCreateInput!): Cart

  """
  Deskripsinya ada disini loh
  """
  cartCreateMany(
    data: [CartCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  cartUpdateOne(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart

  """
  Deskripsinya ada disini loh
  """
  cartUpdateMany(
    data: CartUpdateManyMutationInput!
    where: CartWhereInput
  ): Cart

  """
  Deskripsinya ada disini loh
  """
  cartDelete(where: CartWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  cartDeleteMany(where: CartWhereInput): Boolean!

  """
  Deskripsinya ada disini loh
  """
  rewardClaimCreateOne(data: RewardClaimCreateInput!): RewardClaim

  """
  Deskripsinya ada disini loh
  """
  rewardClaimCreateMany(
    data: [RewardClaimCreateManyInput!]!
    skipDuplicates: Boolean
  ): BatchPayload

  """
  Deskripsinya ada disini loh
  """
  rewardClaimUpdateOne(
    data: RewardClaimUpdateInput!
    where: RewardClaimWhereUniqueInput!
  ): RewardClaim

  """
  Deskripsinya ada disini loh
  """
  rewardClaimUpdateMany(
    data: RewardClaimUpdateManyMutationInput!
    where: RewardClaimWhereInput
  ): RewardClaim

  """
  Deskripsinya ada disini loh
  """
  rewardClaimDelete(where: RewardClaimWhereUniqueInput!): Boolean!

  """
  Deskripsinya ada disini loh
  """
  rewardClaimDeleteMany(where: RewardClaimWhereInput): Boolean!
}

input UserCreateInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input AddressCreateNestedOneWithoutUserInput {
  create: AddressCreateWithoutUserInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutUserInput {
  name: String!
  subdistrict: SubdistrictCreateNestedOneWithoutAddressInput!
}

input SubdistrictCreateNestedOneWithoutAddressInput {
  create: SubdistrictCreateWithoutAddressInput
  connectOrCreate: SubdistrictCreateOrConnectWithoutAddressInput
  connect: SubdistrictWhereUniqueInput
}

input SubdistrictCreateWithoutAddressInput {
  name: String!
  postalCode: String!
  district: DistrictCreateNestedOneWithoutSubdistrictsInput!
}

input DistrictCreateNestedOneWithoutSubdistrictsInput {
  create: DistrictCreateWithoutSubdistrictsInput
  connectOrCreate: DistrictCreateOrConnectWithoutSubdistrictsInput
  connect: DistrictWhereUniqueInput
}

input DistrictCreateWithoutSubdistrictsInput {
  name: String!
  city: CityCreateNestedOneWithoutDistrictsInput!
}

input CityCreateNestedOneWithoutDistrictsInput {
  create: CityCreateWithoutDistrictsInput
  connectOrCreate: CityCreateOrConnectWithoutDistrictsInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutDistrictsInput {
  name: String!
  province: ProvinceCreateNestedOneWithoutCitiesInput!
}

input ProvinceCreateNestedOneWithoutCitiesInput {
  create: ProvinceCreateWithoutCitiesInput
  connectOrCreate: ProvinceCreateOrConnectWithoutCitiesInput
  connect: ProvinceWhereUniqueInput
}

input ProvinceCreateWithoutCitiesInput {
  name: String!
}

input ProvinceCreateOrConnectWithoutCitiesInput {
  where: ProvinceWhereUniqueInput!
  create: ProvinceCreateWithoutCitiesInput!
}

input CityCreateOrConnectWithoutDistrictsInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutDistrictsInput!
}

input DistrictCreateOrConnectWithoutSubdistrictsInput {
  where: DistrictWhereUniqueInput!
  create: DistrictCreateWithoutSubdistrictsInput!
}

input SubdistrictCreateOrConnectWithoutAddressInput {
  where: SubdistrictWhereUniqueInput!
  create: SubdistrictCreateWithoutAddressInput!
}

input AddressCreateOrConnectWithoutUserInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutUserInput!
}

input UserCreateNestedOneWithoutReferredUsersInput {
  create: UserCreateWithoutReferredUsersInput
  connectOrCreate: UserCreateOrConnectWithoutReferredUsersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutReferredUsersInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input SchoolCreateNestedOneWithoutStudentsInput {
  create: SchoolCreateWithoutStudentsInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  connect: SchoolWhereUniqueInput
}

input SchoolCreateWithoutStudentsInput {
  name: String!
  address: AddressCreateNestedOneWithoutSchoolInput!
}

input AddressCreateNestedOneWithoutSchoolInput {
  create: AddressCreateWithoutSchoolInput
  connectOrCreate: AddressCreateOrConnectWithoutSchoolInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutSchoolInput {
  name: String!
  subdistrict: SubdistrictCreateNestedOneWithoutAddressInput!
}

input AddressCreateOrConnectWithoutSchoolInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutSchoolInput!
}

input SchoolCreateOrConnectWithoutStudentsInput {
  where: SchoolWhereUniqueInput!
  create: SchoolCreateWithoutStudentsInput!
}

input AccountCreateNestedManyWithoutUserInput {
  create: [AccountCreateWithoutUserInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateWithoutUserInput {
  accountNumber: Float
  name: String!
  accountCategory: AccountCategory!
}

input AccountCreateOrConnectWithoutUserInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutUserInput!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateManyUserInput {
  id: Int
  accountNumber: Float
  name: String!
  accountCategory: AccountCategory!
}

input UserCreateOrConnectWithoutReferredUsersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutReferredUsersInput!
}

input UserCreateManyInput {
  firstName: String!
  lastName: String
  email: String!
  addressId: Int!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  schoolId: Int
  theme: Theme
}

input UserUpdateInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  programsParticipation: ProgramUpdateManyWithoutParticipantNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input EnumUserTypeFieldUpdateOperationsInput {
  set: UserType
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input EnumThemeFieldUpdateOperationsInput {
  set: Theme
}

input AddressUpdateOneRequiredWithoutUserNestedInput {
  create: AddressCreateWithoutUserInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  upsert: AddressUpsertWithoutUserInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutUserInput
}

input AddressUpsertWithoutUserInput {
  update: AddressUpdateWithoutUserInput!
  create: AddressCreateWithoutUserInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutUserInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  subdistrict: SubdistrictUpdateOneRequiredWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input SubdistrictUpdateOneRequiredWithoutAddressNestedInput {
  create: SubdistrictCreateWithoutAddressInput
  connectOrCreate: SubdistrictCreateOrConnectWithoutAddressInput
  upsert: SubdistrictUpsertWithoutAddressInput
  connect: SubdistrictWhereUniqueInput
  update: SubdistrictUpdateToOneWithWhereWithoutAddressInput
}

input SubdistrictUpsertWithoutAddressInput {
  update: SubdistrictUpdateWithoutAddressInput!
  create: SubdistrictCreateWithoutAddressInput!
  where: SubdistrictWhereInput
}

input SubdistrictUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
  postalCode: StringFieldUpdateOperationsInput
  district: DistrictUpdateOneRequiredWithoutSubdistrictsNestedInput
}

input DistrictUpdateOneRequiredWithoutSubdistrictsNestedInput {
  create: DistrictCreateWithoutSubdistrictsInput
  connectOrCreate: DistrictCreateOrConnectWithoutSubdistrictsInput
  upsert: DistrictUpsertWithoutSubdistrictsInput
  connect: DistrictWhereUniqueInput
  update: DistrictUpdateToOneWithWhereWithoutSubdistrictsInput
}

input DistrictUpsertWithoutSubdistrictsInput {
  update: DistrictUpdateWithoutSubdistrictsInput!
  create: DistrictCreateWithoutSubdistrictsInput!
  where: DistrictWhereInput
}

input DistrictUpdateWithoutSubdistrictsInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutDistrictsNestedInput
}

input CityUpdateOneRequiredWithoutDistrictsNestedInput {
  create: CityCreateWithoutDistrictsInput
  connectOrCreate: CityCreateOrConnectWithoutDistrictsInput
  upsert: CityUpsertWithoutDistrictsInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutDistrictsInput
}

input CityUpsertWithoutDistrictsInput {
  update: CityUpdateWithoutDistrictsInput!
  create: CityCreateWithoutDistrictsInput!
  where: CityWhereInput
}

input CityUpdateWithoutDistrictsInput {
  name: StringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutCitiesNestedInput
}

input ProvinceUpdateOneRequiredWithoutCitiesNestedInput {
  create: ProvinceCreateWithoutCitiesInput
  connectOrCreate: ProvinceCreateOrConnectWithoutCitiesInput
  upsert: ProvinceUpsertWithoutCitiesInput
  connect: ProvinceWhereUniqueInput
  update: ProvinceUpdateToOneWithWhereWithoutCitiesInput
}

input ProvinceUpsertWithoutCitiesInput {
  update: ProvinceUpdateWithoutCitiesInput!
  create: ProvinceCreateWithoutCitiesInput!
  where: ProvinceWhereInput
}

input ProvinceUpdateWithoutCitiesInput {
  name: StringFieldUpdateOperationsInput
}

input ProvinceUpdateToOneWithWhereWithoutCitiesInput {
  where: ProvinceWhereInput
  data: ProvinceUpdateWithoutCitiesInput!
}

input CityUpdateToOneWithWhereWithoutDistrictsInput {
  where: CityWhereInput
  data: CityUpdateWithoutDistrictsInput!
}

input DistrictUpdateToOneWithWhereWithoutSubdistrictsInput {
  where: DistrictWhereInput
  data: DistrictUpdateWithoutSubdistrictsInput!
}

input SubdistrictUpdateToOneWithWhereWithoutAddressInput {
  where: SubdistrictWhereInput
  data: SubdistrictUpdateWithoutAddressInput!
}

input HotelUpdateOneWithoutAddressNestedInput {
  create: HotelCreateWithoutAddressInput
  connectOrCreate: HotelCreateOrConnectWithoutAddressInput
  upsert: HotelUpsertWithoutAddressInput
  disconnect: HotelWhereInput
  delete: HotelWhereInput
  connect: HotelWhereUniqueInput
  update: HotelUpdateToOneWithWhereWithoutAddressInput
}

input HotelCreateWithoutAddressInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  version: Int
  images: ImagesCreateNestedManyWithoutHotelImageInput
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input ImagesCreateNestedManyWithoutHotelImageInput {
  create: [ImagesCreateWithoutHotelImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutHotelImageInput!]
  createMany: ImagesCreateManyHotelImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateWithoutHotelImageInput {
  url: String!
}

input ImagesCreateOrConnectWithoutHotelImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutHotelImageInput!
}

input ImagesCreateManyHotelImageInputEnvelope {
  data: [ImagesCreateManyHotelImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateManyHotelImageInput {
  url: String!
}

input UserCreateNestedOneWithoutHotelsCreatedInput {
  create: UserCreateWithoutHotelsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutHotelsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutHotelsCreatedInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutHotelsCreatedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutHotelsCreatedInput!
}

input HotelCreateOrConnectWithoutAddressInput {
  where: HotelWhereUniqueInput!
  create: HotelCreateWithoutAddressInput!
}

input HotelUpsertWithoutAddressInput {
  update: HotelUpdateWithoutAddressInput!
  create: HotelCreateWithoutAddressInput!
  where: HotelWhereInput
}

input HotelUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  version: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutHotelImageNestedInput
  checkIns: CheckInUpdateManyWithoutHotelNestedInput
  createdBy: UserUpdateOneRequiredWithoutHotelsCreatedNestedInput
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input ImagesUpdateManyWithoutHotelImageNestedInput {
  create: [ImagesCreateWithoutHotelImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutHotelImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutHotelImageInput!]
  createMany: ImagesCreateManyHotelImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutHotelImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutHotelImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpsertWithWhereUniqueWithoutHotelImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutHotelImageInput!
  create: ImagesCreateWithoutHotelImageInput!
}

input ImagesUpdateWithoutHotelImageInput {
  url: StringFieldUpdateOperationsInput
  programImage: ProgramUpdateOneWithoutImagesNestedInput
  rewardImage: RewardUpdateOneWithoutImagesNestedInput
  projectImage: ProjectUpdateOneWithoutImagesNestedInput
}

input ProgramUpdateOneWithoutImagesNestedInput {
  create: ProgramCreateWithoutImagesInput
  connectOrCreate: ProgramCreateOrConnectWithoutImagesInput
  upsert: ProgramUpsertWithoutImagesInput
  disconnect: ProgramWhereInput
  delete: ProgramWhereInput
  connect: ProgramWhereUniqueInput
  update: ProgramUpdateToOneWithWhereWithoutImagesInput
}

input ProgramCreateWithoutImagesInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  createdBy: UserCreateNestedOneWithoutProgramsCreatedInput!
  category: ProgramCategoryCreateNestedOneWithoutProgramsInput!
}

input UserCreateNestedOneWithoutProgramsCreatedInput {
  create: UserCreateWithoutProgramsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutProgramsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProgramsCreatedInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutProgramsCreatedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProgramsCreatedInput!
}

input ProgramCategoryCreateNestedOneWithoutProgramsInput {
  create: ProgramCategoryCreateWithoutProgramsInput
  connectOrCreate: ProgramCategoryCreateOrConnectWithoutProgramsInput
  connect: ProgramCategoryWhereUniqueInput
}

input ProgramCategoryCreateWithoutProgramsInput {
  name: String!
}

input ProgramCategoryCreateOrConnectWithoutProgramsInput {
  where: ProgramCategoryWhereUniqueInput!
  create: ProgramCategoryCreateWithoutProgramsInput!
}

input ProgramCreateOrConnectWithoutImagesInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutImagesInput!
}

input ProgramUpsertWithoutImagesInput {
  update: ProgramUpdateWithoutImagesInput!
  create: ProgramCreateWithoutImagesInput!
  where: ProgramWhereInput
}

input ProgramUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutProgramsCreatedNestedInput
  participant: UserUpdateManyWithoutProgramsParticipationNestedInput
  category: ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput
}

input UserUpdateOneRequiredWithoutProgramsCreatedNestedInput {
  create: UserCreateWithoutProgramsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutProgramsCreatedInput
  upsert: UserUpsertWithoutProgramsCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutProgramsCreatedInput
}

input UserUpsertWithoutProgramsCreatedInput {
  update: UserUpdateWithoutProgramsCreatedInput!
  create: UserCreateWithoutProgramsCreatedInput!
  where: UserWhereInput
}

input UserUpdateWithoutProgramsCreatedInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  programsParticipation: ProgramUpdateManyWithoutParticipantNestedInput
}

input CheckInUpdateManyWithoutUserNestedInput {
  create: [CheckInCreateWithoutUserInput!]
  connectOrCreate: [CheckInCreateOrConnectWithoutUserInput!]
  upsert: [CheckInUpsertWithWhereUniqueWithoutUserInput!]
  createMany: CheckInCreateManyUserInputEnvelope
  set: [CheckInWhereUniqueInput!]
  disconnect: [CheckInWhereUniqueInput!]
  delete: [CheckInWhereUniqueInput!]
  connect: [CheckInWhereUniqueInput!]
  update: [CheckInUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CheckInUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [CheckInScalarWhereInput!]
}

input CheckInCreateWithoutUserInput {
  checkInAt: DateTime
  hotel: HotelCreateNestedOneWithoutCheckInsInput!
}

input HotelCreateNestedOneWithoutCheckInsInput {
  create: HotelCreateWithoutCheckInsInput
  connectOrCreate: HotelCreateOrConnectWithoutCheckInsInput
  connect: HotelWhereUniqueInput
}

input HotelCreateWithoutCheckInsInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  version: Int
  address: AddressCreateNestedOneWithoutHotelInput!
  images: ImagesCreateNestedManyWithoutHotelImageInput
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input AddressCreateNestedOneWithoutHotelInput {
  create: AddressCreateWithoutHotelInput
  connectOrCreate: AddressCreateOrConnectWithoutHotelInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutHotelInput {
  name: String!
  subdistrict: SubdistrictCreateNestedOneWithoutAddressInput!
}

input AddressCreateOrConnectWithoutHotelInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutHotelInput!
}

input HotelCreateOrConnectWithoutCheckInsInput {
  where: HotelWhereUniqueInput!
  create: HotelCreateWithoutCheckInsInput!
}

input CheckInCreateOrConnectWithoutUserInput {
  where: CheckInWhereUniqueInput!
  create: CheckInCreateWithoutUserInput!
}

input CheckInUpsertWithWhereUniqueWithoutUserInput {
  where: CheckInWhereUniqueInput!
  update: CheckInUpdateWithoutUserInput!
  create: CheckInCreateWithoutUserInput!
}

input CheckInUpdateWithoutUserInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
  hotel: HotelUpdateOneRequiredWithoutCheckInsNestedInput
}

input HotelUpdateOneRequiredWithoutCheckInsNestedInput {
  create: HotelCreateWithoutCheckInsInput
  connectOrCreate: HotelCreateOrConnectWithoutCheckInsInput
  upsert: HotelUpsertWithoutCheckInsInput
  connect: HotelWhereUniqueInput
  update: HotelUpdateToOneWithWhereWithoutCheckInsInput
}

input HotelUpsertWithoutCheckInsInput {
  update: HotelUpdateWithoutCheckInsInput!
  create: HotelCreateWithoutCheckInsInput!
  where: HotelWhereInput
}

input HotelUpdateWithoutCheckInsInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  version: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutHotelNestedInput
  images: ImagesUpdateManyWithoutHotelImageNestedInput
  createdBy: UserUpdateOneRequiredWithoutHotelsCreatedNestedInput
}

input AddressUpdateOneRequiredWithoutHotelNestedInput {
  create: AddressCreateWithoutHotelInput
  connectOrCreate: AddressCreateOrConnectWithoutHotelInput
  upsert: AddressUpsertWithoutHotelInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutHotelInput
}

input AddressUpsertWithoutHotelInput {
  update: AddressUpdateWithoutHotelInput!
  create: AddressCreateWithoutHotelInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutHotelInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  subdistrict: SubdistrictUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input UserUpdateOneWithoutAddressNestedInput {
  create: UserCreateWithoutAddressInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  upsert: UserUpsertWithoutAddressInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutAddressInput
}

input UserCreateWithoutAddressInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutAddressInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAddressInput!
}

input UserUpsertWithoutAddressInput {
  update: UserUpdateWithoutAddressInput!
  create: UserCreateWithoutAddressInput!
  where: UserWhereInput
}

input UserUpdateWithoutAddressInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  programsParticipation: ProgramUpdateManyWithoutParticipantNestedInput
}

input SchoolUpdateOneWithoutStudentsNestedInput {
  create: SchoolCreateWithoutStudentsInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  upsert: SchoolUpsertWithoutStudentsInput
  disconnect: SchoolWhereInput
  delete: SchoolWhereInput
  connect: SchoolWhereUniqueInput
  update: SchoolUpdateToOneWithWhereWithoutStudentsInput
}

input SchoolUpsertWithoutStudentsInput {
  update: SchoolUpdateWithoutStudentsInput!
  create: SchoolCreateWithoutStudentsInput!
  where: SchoolWhereInput
}

input SchoolUpdateWithoutStudentsInput {
  name: StringFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutSchoolNestedInput
}

input AddressUpdateOneRequiredWithoutSchoolNestedInput {
  create: AddressCreateWithoutSchoolInput
  connectOrCreate: AddressCreateOrConnectWithoutSchoolInput
  upsert: AddressUpsertWithoutSchoolInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutSchoolInput
}

input AddressUpsertWithoutSchoolInput {
  update: AddressUpdateWithoutSchoolInput!
  create: AddressCreateWithoutSchoolInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutSchoolInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  subdistrict: SubdistrictUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input ShippingUpdateOneWithoutAddressNestedInput {
  create: ShippingCreateWithoutAddressInput
  connectOrCreate: ShippingCreateOrConnectWithoutAddressInput
  upsert: ShippingUpsertWithoutAddressInput
  disconnect: ShippingWhereInput
  delete: ShippingWhereInput
  connect: ShippingWhereUniqueInput
  update: ShippingUpdateToOneWithWhereWithoutAddressInput
}

input ShippingCreateWithoutAddressInput {
  logisticName: String!
  deliveryDate: DateTime
  courier: String
  estimatedTime: String
  trackingNo: String
  order: OrderCreateNestedOneWithoutShippingInput!
}

input OrderCreateNestedOneWithoutShippingInput {
  create: OrderCreateWithoutShippingInput
  connectOrCreate: OrderCreateOrConnectWithoutShippingInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutShippingInput {
  status: TransactionStatus!
  shippingId: Int
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  orderBy: UserCreateNestedOneWithoutOrdersInput!
  cart: CartCreateNestedManyWithoutOrderInput
  invoice: InvoiceCreateNestedOneWithoutOrderInput!
}

input UserCreateNestedOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOrdersInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutOrdersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutOrdersInput!
}

input CartCreateNestedManyWithoutOrderInput {
  create: [CartCreateWithoutOrderInput!]
  connectOrCreate: [CartCreateOrConnectWithoutOrderInput!]
  createMany: CartCreateManyOrderInputEnvelope
  connect: [CartWhereUniqueInput!]
}

input CartCreateWithoutOrderInput {
  quantity: Int!
  price: Float!
  cost: Float!
  createdAt: DateTime
  updatedAt: DateTime
  membershipItem: ItemCreateNestedOneWithoutCartInput
  projectItem: ProjectCreateNestedOneWithoutOrderCartInput
}

input ItemCreateNestedOneWithoutCartInput {
  create: ItemCreateWithoutCartInput
  connectOrCreate: ItemCreateOrConnectWithoutCartInput
  connect: ItemWhereUniqueInput
}

input ItemCreateWithoutCartInput {
  name: String!
  description: String!
  price: Float!
  cost: Float!
  userRole: UserRole!
  createdAt: DateTime
  updatedAt: DateTime
}

input ItemCreateOrConnectWithoutCartInput {
  where: ItemWhereUniqueInput!
  create: ItemCreateWithoutCartInput!
}

input ProjectCreateNestedOneWithoutOrderCartInput {
  create: ProjectCreateWithoutOrderCartInput
  connectOrCreate: ProjectCreateOrConnectWithoutOrderCartInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutOrderCartInput {
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Float!
  maxGoalAmountVersion: Int
  minimumInvestment: Float!
  maxInvestor: Int!
  maxInvestorVersion: Int
  images: ImagesCreateNestedManyWithoutProjectImageInput
}

input ImagesCreateNestedManyWithoutProjectImageInput {
  create: [ImagesCreateWithoutProjectImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProjectImageInput!]
  createMany: ImagesCreateManyProjectImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateWithoutProjectImageInput {
  url: String!
}

input ImagesCreateOrConnectWithoutProjectImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutProjectImageInput!
}

input ImagesCreateManyProjectImageInputEnvelope {
  data: [ImagesCreateManyProjectImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateManyProjectImageInput {
  url: String!
}

input ProjectCreateOrConnectWithoutOrderCartInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutOrderCartInput!
}

input CartCreateOrConnectWithoutOrderInput {
  where: CartWhereUniqueInput!
  create: CartCreateWithoutOrderInput!
}

input CartCreateManyOrderInputEnvelope {
  data: [CartCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input CartCreateManyOrderInput {
  id: Int
  membershipItemId: Int
  projectItemId: Int
  quantity: Int!
  price: Float!
  cost: Float!
  createdAt: DateTime
  updatedAt: DateTime
}

input InvoiceCreateNestedOneWithoutOrderInput {
  create: InvoiceCreateWithoutOrderInput
  connectOrCreate: InvoiceCreateOrConnectWithoutOrderInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateWithoutOrderInput {
  adminFee: Float!
  amount: Float!
  transactions: TransactionCreateNestedManyWithoutInvoiceInput
  Installments: InstallmentCreateNestedManyWithoutInvoiceInput
}

input TransactionCreateNestedManyWithoutInvoiceInput {
  create: [TransactionCreateWithoutInvoiceInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutInvoiceInput!]
  createMany: TransactionCreateManyInvoiceInputEnvelope
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutInvoiceInput {
  amount: Float!
  proofUrl: String
  transactionCategory: TransactionCategory!
  withdrawalRequest: WithdrawalRequestCreateNestedOneWithoutTransactionInput
}

input WithdrawalRequestCreateNestedOneWithoutTransactionInput {
  create: WithdrawalRequestCreateWithoutTransactionInput
  connectOrCreate: WithdrawalRequestCreateOrConnectWithoutTransactionInput
  connect: WithdrawalRequestWhereUniqueInput
}

input WithdrawalRequestCreateWithoutTransactionInput {
  amount: Float!
  user: UserCreateNestedOneWithoutWithdrawalRequestInput!
}

input UserCreateNestedOneWithoutWithdrawalRequestInput {
  create: UserCreateWithoutWithdrawalRequestInput
  connectOrCreate: UserCreateOrConnectWithoutWithdrawalRequestInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutWithdrawalRequestInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutWithdrawalRequestInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutWithdrawalRequestInput!
}

input WithdrawalRequestCreateOrConnectWithoutTransactionInput {
  where: WithdrawalRequestWhereUniqueInput!
  create: WithdrawalRequestCreateWithoutTransactionInput!
}

input TransactionCreateOrConnectWithoutInvoiceInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutInvoiceInput!
}

input TransactionCreateManyInvoiceInputEnvelope {
  data: [TransactionCreateManyInvoiceInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyInvoiceInput {
  id: Int
  amount: Float!
  proofUrl: String
  transactionCategory: TransactionCategory!
  installmentId: Int
  withdrawalRequestId: Int
}

input InstallmentCreateNestedManyWithoutInvoiceInput {
  create: [InstallmentCreateWithoutInvoiceInput!]
  connectOrCreate: [InstallmentCreateOrConnectWithoutInvoiceInput!]
  createMany: InstallmentCreateManyInvoiceInputEnvelope
  connect: [InstallmentWhereUniqueInput!]
}

input InstallmentCreateWithoutInvoiceInput {
  number: Int!
  lateFee: Float!
  amount: Float!
  dueDate: DateTime!
  status: InstallmentStatus!
  transactionId: Int
  transaction: TransactionCreateNestedOneWithoutInstallmentInput
}

input TransactionCreateNestedOneWithoutInstallmentInput {
  create: TransactionCreateWithoutInstallmentInput
  connectOrCreate: TransactionCreateOrConnectWithoutInstallmentInput
  connect: TransactionWhereUniqueInput
}

input TransactionCreateWithoutInstallmentInput {
  amount: Float!
  proofUrl: String
  transactionCategory: TransactionCategory!
  invoice: InvoiceCreateNestedOneWithoutTransactionsInput
  withdrawalRequest: WithdrawalRequestCreateNestedOneWithoutTransactionInput
}

input InvoiceCreateNestedOneWithoutTransactionsInput {
  create: InvoiceCreateWithoutTransactionsInput
  connectOrCreate: InvoiceCreateOrConnectWithoutTransactionsInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateWithoutTransactionsInput {
  adminFee: Float!
  amount: Float!
  Order: OrderCreateNestedOneWithoutInvoiceInput
  Installments: InstallmentCreateNestedManyWithoutInvoiceInput
}

input OrderCreateNestedOneWithoutInvoiceInput {
  create: OrderCreateWithoutInvoiceInput
  connectOrCreate: OrderCreateOrConnectWithoutInvoiceInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutInvoiceInput {
  status: TransactionStatus!
  shippingId: Int
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  orderBy: UserCreateNestedOneWithoutOrdersInput!
  cart: CartCreateNestedManyWithoutOrderInput
  shipping: ShippingCreateNestedOneWithoutOrderInput
}

input ShippingCreateNestedOneWithoutOrderInput {
  create: ShippingCreateWithoutOrderInput
  connectOrCreate: ShippingCreateOrConnectWithoutOrderInput
  connect: ShippingWhereUniqueInput
}

input ShippingCreateWithoutOrderInput {
  logisticName: String!
  deliveryDate: DateTime
  courier: String
  estimatedTime: String
  trackingNo: String
}

input ShippingCreateOrConnectWithoutOrderInput {
  where: ShippingWhereUniqueInput!
  create: ShippingCreateWithoutOrderInput!
}

input OrderCreateOrConnectWithoutInvoiceInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutInvoiceInput!
}

input InvoiceCreateOrConnectWithoutTransactionsInput {
  where: InvoiceWhereUniqueInput!
  create: InvoiceCreateWithoutTransactionsInput!
}

input TransactionCreateOrConnectWithoutInstallmentInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutInstallmentInput!
}

input InstallmentCreateOrConnectWithoutInvoiceInput {
  where: InstallmentWhereUniqueInput!
  create: InstallmentCreateWithoutInvoiceInput!
}

input InstallmentWhereUniqueInput {
  id: Int
  AND: [InstallmentWhereInput!]
  OR: [InstallmentWhereInput!]
  NOT: [InstallmentWhereInput!]
  number: IntFilter
  lateFee: FloatFilter
  amount: FloatFilter
  dueDate: DateTimeFilter
  status: EnumInstallmentStatusFilter
  transactionId: IntNullableFilter
  invoiceId: IntFilter
  transaction: TransactionNullableRelationFilter
  invoice: InvoiceRelationFilter
}

input InstallmentCreateManyInvoiceInputEnvelope {
  data: [InstallmentCreateManyInvoiceInput!]!
  skipDuplicates: Boolean
}

input InstallmentCreateManyInvoiceInput {
  id: Int
  number: Int!
  lateFee: Float!
  amount: Float!
  dueDate: DateTime!
  status: InstallmentStatus!
  transactionId: Int
}

input InvoiceCreateOrConnectWithoutOrderInput {
  where: InvoiceWhereUniqueInput!
  create: InvoiceCreateWithoutOrderInput!
}

input OrderCreateOrConnectWithoutShippingInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutShippingInput!
}

input ShippingCreateOrConnectWithoutAddressInput {
  where: ShippingWhereUniqueInput!
  create: ShippingCreateWithoutAddressInput!
}

input ShippingUpsertWithoutAddressInput {
  update: ShippingUpdateWithoutAddressInput!
  create: ShippingCreateWithoutAddressInput!
  where: ShippingWhereInput
}

input ShippingUpdateWithoutAddressInput {
  logisticName: StringFieldUpdateOperationsInput
  deliveryDate: NullableDateTimeFieldUpdateOperationsInput
  courier: NullableStringFieldUpdateOperationsInput
  estimatedTime: NullableStringFieldUpdateOperationsInput
  trackingNo: NullableStringFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutShippingNestedInput
}

input OrderUpdateOneRequiredWithoutShippingNestedInput {
  create: OrderCreateWithoutShippingInput
  connectOrCreate: OrderCreateOrConnectWithoutShippingInput
  upsert: OrderUpsertWithoutShippingInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateToOneWithWhereWithoutShippingInput
}

input OrderUpsertWithoutShippingInput {
  update: OrderUpdateWithoutShippingInput!
  create: OrderCreateWithoutShippingInput!
  where: OrderWhereInput
}

input OrderUpdateWithoutShippingInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  orderBy: UserUpdateOneRequiredWithoutOrdersNestedInput
  cart: CartUpdateManyWithoutOrderNestedInput
  invoice: InvoiceUpdateOneRequiredWithoutOrderNestedInput
}

input EnumTransactionStatusFieldUpdateOperationsInput {
  set: TransactionStatus
}

input UserUpdateOneRequiredWithoutOrdersNestedInput {
  create: UserCreateWithoutOrdersInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  upsert: UserUpsertWithoutOrdersInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutOrdersInput
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersInput!
  create: UserCreateWithoutOrdersInput!
  where: UserWhereInput
}

input UserUpdateWithoutOrdersInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  programsParticipation: ProgramUpdateManyWithoutParticipantNestedInput
}

input ProgramUpdateManyWithoutParticipantNestedInput {
  create: [ProgramCreateWithoutParticipantInput!]
  connectOrCreate: [ProgramCreateOrConnectWithoutParticipantInput!]
  upsert: [ProgramUpsertWithWhereUniqueWithoutParticipantInput!]
  set: [ProgramWhereUniqueInput!]
  disconnect: [ProgramWhereUniqueInput!]
  delete: [ProgramWhereUniqueInput!]
  connect: [ProgramWhereUniqueInput!]
  update: [ProgramUpdateWithWhereUniqueWithoutParticipantInput!]
  updateMany: [ProgramUpdateManyWithWhereWithoutParticipantInput!]
  deleteMany: [ProgramScalarWhereInput!]
}

input ProgramCreateWithoutParticipantInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  Images: ImagesCreateNestedManyWithoutProgramImageInput
  createdBy: UserCreateNestedOneWithoutProgramsCreatedInput!
  category: ProgramCategoryCreateNestedOneWithoutProgramsInput!
}

input ImagesCreateNestedManyWithoutProgramImageInput {
  create: [ImagesCreateWithoutProgramImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProgramImageInput!]
  createMany: ImagesCreateManyProgramImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateWithoutProgramImageInput {
  url: String!
}

input ImagesCreateOrConnectWithoutProgramImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutProgramImageInput!
}

input ImagesCreateManyProgramImageInputEnvelope {
  data: [ImagesCreateManyProgramImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateManyProgramImageInput {
  url: String!
}

input ProgramCreateOrConnectWithoutParticipantInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutParticipantInput!
}

input ProgramUpsertWithWhereUniqueWithoutParticipantInput {
  where: ProgramWhereUniqueInput!
  update: ProgramUpdateWithoutParticipantInput!
  create: ProgramCreateWithoutParticipantInput!
}

input ProgramUpdateWithoutParticipantInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Images: ImagesUpdateManyWithoutProgramImageNestedInput
  createdBy: UserUpdateOneRequiredWithoutProgramsCreatedNestedInput
  category: ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput
}

input ImagesUpdateManyWithoutProgramImageNestedInput {
  create: [ImagesCreateWithoutProgramImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProgramImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutProgramImageInput!]
  createMany: ImagesCreateManyProgramImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutProgramImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutProgramImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpsertWithWhereUniqueWithoutProgramImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutProgramImageInput!
  create: ImagesCreateWithoutProgramImageInput!
}

input ImagesUpdateWithoutProgramImageInput {
  url: StringFieldUpdateOperationsInput
  hotelImage: HotelUpdateOneWithoutImagesNestedInput
  rewardImage: RewardUpdateOneWithoutImagesNestedInput
  projectImage: ProjectUpdateOneWithoutImagesNestedInput
}

input HotelUpdateOneWithoutImagesNestedInput {
  create: HotelCreateWithoutImagesInput
  connectOrCreate: HotelCreateOrConnectWithoutImagesInput
  upsert: HotelUpsertWithoutImagesInput
  disconnect: HotelWhereInput
  delete: HotelWhereInput
  connect: HotelWhereUniqueInput
  update: HotelUpdateToOneWithWhereWithoutImagesInput
}

input HotelCreateWithoutImagesInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  version: Int
  address: AddressCreateNestedOneWithoutHotelInput!
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input HotelCreateOrConnectWithoutImagesInput {
  where: HotelWhereUniqueInput!
  create: HotelCreateWithoutImagesInput!
}

input HotelUpsertWithoutImagesInput {
  update: HotelUpdateWithoutImagesInput!
  create: HotelCreateWithoutImagesInput!
  where: HotelWhereInput
}

input HotelUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  version: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutHotelNestedInput
  checkIns: CheckInUpdateManyWithoutHotelNestedInput
  createdBy: UserUpdateOneRequiredWithoutHotelsCreatedNestedInput
}

input CheckInUpdateManyWithoutHotelNestedInput {
  create: [CheckInCreateWithoutHotelInput!]
  connectOrCreate: [CheckInCreateOrConnectWithoutHotelInput!]
  upsert: [CheckInUpsertWithWhereUniqueWithoutHotelInput!]
  createMany: CheckInCreateManyHotelInputEnvelope
  set: [CheckInWhereUniqueInput!]
  disconnect: [CheckInWhereUniqueInput!]
  delete: [CheckInWhereUniqueInput!]
  connect: [CheckInWhereUniqueInput!]
  update: [CheckInUpdateWithWhereUniqueWithoutHotelInput!]
  updateMany: [CheckInUpdateManyWithWhereWithoutHotelInput!]
  deleteMany: [CheckInScalarWhereInput!]
}

input CheckInCreateWithoutHotelInput {
  checkInAt: DateTime
  user: UserCreateNestedOneWithoutCheckInsInput!
}

input UserCreateNestedOneWithoutCheckInsInput {
  create: UserCreateWithoutCheckInsInput
  connectOrCreate: UserCreateOrConnectWithoutCheckInsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCheckInsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutCheckInsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCheckInsInput!
}

input CheckInCreateOrConnectWithoutHotelInput {
  where: CheckInWhereUniqueInput!
  create: CheckInCreateWithoutHotelInput!
}

input CheckInUpsertWithWhereUniqueWithoutHotelInput {
  where: CheckInWhereUniqueInput!
  update: CheckInUpdateWithoutHotelInput!
  create: CheckInCreateWithoutHotelInput!
}

input CheckInUpdateWithoutHotelInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCheckInsNestedInput
}

input UserUpdateOneRequiredWithoutCheckInsNestedInput {
  create: UserCreateWithoutCheckInsInput
  connectOrCreate: UserCreateOrConnectWithoutCheckInsInput
  upsert: UserUpsertWithoutCheckInsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutCheckInsInput
}

input UserUpsertWithoutCheckInsInput {
  update: UserUpdateWithoutCheckInsInput!
  create: UserCreateWithoutCheckInsInput!
  where: UserWhereInput
}

input UserUpdateWithoutCheckInsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  programsParticipation: ProgramUpdateManyWithoutParticipantNestedInput
}

input UserUpdateToOneWithWhereWithoutCheckInsInput {
  where: UserWhereInput
  data: UserUpdateWithoutCheckInsInput!
}

input CheckInCreateManyHotelInputEnvelope {
  data: [CheckInCreateManyHotelInput!]!
  skipDuplicates: Boolean
}

input CheckInCreateManyHotelInput {
  id: Int
  userId: String!
  checkInAt: DateTime
}

input CheckInUpdateWithWhereUniqueWithoutHotelInput {
  where: CheckInWhereUniqueInput!
  data: CheckInUpdateWithoutHotelInput!
}

input CheckInUpdateManyWithWhereWithoutHotelInput {
  where: CheckInScalarWhereInput!
  data: CheckInUpdateManyMutationInput!
}

input CheckInScalarWhereInput {
  AND: [CheckInScalarWhereInput!]
  OR: [CheckInScalarWhereInput!]
  NOT: [CheckInScalarWhereInput!]
  id: IntFilter
  userId: StringFilter
  hotelId: IntFilter
  checkInAt: DateTimeFilter
}

input CheckInUpdateManyMutationInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutHotelsCreatedNestedInput {
  create: UserCreateWithoutHotelsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutHotelsCreatedInput
  upsert: UserUpsertWithoutHotelsCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutHotelsCreatedInput
}

input UserUpsertWithoutHotelsCreatedInput {
  update: UserUpdateWithoutHotelsCreatedInput!
  create: UserCreateWithoutHotelsCreatedInput!
  where: UserWhereInput
}

input UserUpdateWithoutHotelsCreatedInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  programsParticipation: ProgramUpdateManyWithoutParticipantNestedInput
}

input UserUpdateToOneWithWhereWithoutHotelsCreatedInput {
  where: UserWhereInput
  data: UserUpdateWithoutHotelsCreatedInput!
}

input HotelUpdateToOneWithWhereWithoutImagesInput {
  where: HotelWhereInput
  data: HotelUpdateWithoutImagesInput!
}

input RewardUpdateOneWithoutImagesNestedInput {
  create: RewardCreateWithoutImagesInput
  connectOrCreate: RewardCreateOrConnectWithoutImagesInput
  upsert: RewardUpsertWithoutImagesInput
  disconnect: RewardWhereInput
  delete: RewardWhereInput
  connect: RewardWhereUniqueInput
  update: RewardUpdateToOneWithWhereWithoutImagesInput
}

input RewardCreateWithoutImagesInput {
  name: String!
  pointCost: Float!
  description: String!
}

input RewardCreateOrConnectWithoutImagesInput {
  where: RewardWhereUniqueInput!
  create: RewardCreateWithoutImagesInput!
}

input RewardUpsertWithoutImagesInput {
  update: RewardUpdateWithoutImagesInput!
  create: RewardCreateWithoutImagesInput!
  where: RewardWhereInput
}

input RewardUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
}

input RewardUpdateToOneWithWhereWithoutImagesInput {
  where: RewardWhereInput
  data: RewardUpdateWithoutImagesInput!
}

input ProjectUpdateOneWithoutImagesNestedInput {
  create: ProjectCreateWithoutImagesInput
  connectOrCreate: ProjectCreateOrConnectWithoutImagesInput
  upsert: ProjectUpsertWithoutImagesInput
  disconnect: ProjectWhereInput
  delete: ProjectWhereInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateToOneWithWhereWithoutImagesInput
}

input ProjectCreateWithoutImagesInput {
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Float!
  maxGoalAmountVersion: Int
  minimumInvestment: Float!
  maxInvestor: Int!
  maxInvestorVersion: Int
}

input ProjectCreateOrConnectWithoutImagesInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutImagesInput!
}

input ProjectUpsertWithoutImagesInput {
  update: ProjectUpdateWithoutImagesInput!
  create: ProjectCreateWithoutImagesInput!
  where: ProjectWhereInput
}

input ProjectUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  projectCategory: EnumProjectCategoryFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  returnRate: FloatFieldUpdateOperationsInput
  goalAmount: FloatFieldUpdateOperationsInput
  maxGoalAmountVersion: NullableIntFieldUpdateOperationsInput
  minimumInvestment: FloatFieldUpdateOperationsInput
  maxInvestor: IntFieldUpdateOperationsInput
  maxInvestorVersion: NullableIntFieldUpdateOperationsInput
}

input EnumProjectCategoryFieldUpdateOperationsInput {
  set: ProjectCategory
}

input ProjectUpdateToOneWithWhereWithoutImagesInput {
  where: ProjectWhereInput
  data: ProjectUpdateWithoutImagesInput!
}

input ImagesUpdateWithWhereUniqueWithoutProgramImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutProgramImageInput!
}

input ImagesUpdateManyWithWhereWithoutProgramImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input ImagesScalarWhereInput {
  AND: [ImagesScalarWhereInput!]
  OR: [ImagesScalarWhereInput!]
  NOT: [ImagesScalarWhereInput!]
  id: IntFilter
  fileType: EnumFileTypeNullableFilter
  fileSize: FloatNullableFilter
  url: StringFilter
  hotelImageId: IntNullableFilter
  programImageId: IntNullableFilter
  rewardImageId: IntNullableFilter
  projectImageId: IntNullableFilter
  createdAt: DateTimeFilter
}

input ImagesUpdateManyMutationInput {
  url: StringFieldUpdateOperationsInput
}

input ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput {
  create: ProgramCategoryCreateWithoutProgramsInput
  connectOrCreate: ProgramCategoryCreateOrConnectWithoutProgramsInput
  upsert: ProgramCategoryUpsertWithoutProgramsInput
  connect: ProgramCategoryWhereUniqueInput
  update: ProgramCategoryUpdateToOneWithWhereWithoutProgramsInput
}

input ProgramCategoryUpsertWithoutProgramsInput {
  update: ProgramCategoryUpdateWithoutProgramsInput!
  create: ProgramCategoryCreateWithoutProgramsInput!
  where: ProgramCategoryWhereInput
}

input ProgramCategoryUpdateWithoutProgramsInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramCategoryUpdateToOneWithWhereWithoutProgramsInput {
  where: ProgramCategoryWhereInput
  data: ProgramCategoryUpdateWithoutProgramsInput!
}

input ProgramUpdateWithWhereUniqueWithoutParticipantInput {
  where: ProgramWhereUniqueInput!
  data: ProgramUpdateWithoutParticipantInput!
}

input ProgramUpdateManyWithWhereWithoutParticipantInput {
  where: ProgramScalarWhereInput!
  data: ProgramUpdateManyMutationInput!
}

input ProgramScalarWhereInput {
  AND: [ProgramScalarWhereInput!]
  OR: [ProgramScalarWhereInput!]
  NOT: [ProgramScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  startDate: DateTimeFilter
  dueDate: DateTimeNullableFilter
  description: StringFilter
  createdById: StringFilter
  categoryId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProgramUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateToOneWithWhereWithoutOrdersInput {
  where: UserWhereInput
  data: UserUpdateWithoutOrdersInput!
}

input CartUpdateManyWithoutOrderNestedInput {
  create: [CartCreateWithoutOrderInput!]
  connectOrCreate: [CartCreateOrConnectWithoutOrderInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutOrderInput!]
  createMany: CartCreateManyOrderInputEnvelope
  set: [CartWhereUniqueInput!]
  disconnect: [CartWhereUniqueInput!]
  delete: [CartWhereUniqueInput!]
  connect: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [CartUpdateManyWithWhereWithoutOrderInput!]
  deleteMany: [CartScalarWhereInput!]
}

input CartUpsertWithWhereUniqueWithoutOrderInput {
  where: CartWhereUniqueInput!
  update: CartUpdateWithoutOrderInput!
  create: CartCreateWithoutOrderInput!
}

input CartUpdateWithoutOrderInput {
  quantity: IntFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  membershipItem: ItemUpdateOneWithoutCartNestedInput
  projectItem: ProjectUpdateOneWithoutOrderCartNestedInput
}

input ItemUpdateOneWithoutCartNestedInput {
  create: ItemCreateWithoutCartInput
  connectOrCreate: ItemCreateOrConnectWithoutCartInput
  upsert: ItemUpsertWithoutCartInput
  disconnect: ItemWhereInput
  delete: ItemWhereInput
  connect: ItemWhereUniqueInput
  update: ItemUpdateToOneWithWhereWithoutCartInput
}

input ItemUpsertWithoutCartInput {
  update: ItemUpdateWithoutCartInput!
  create: ItemCreateWithoutCartInput!
  where: ItemWhereInput
}

input ItemUpdateWithoutCartInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input ItemUpdateToOneWithWhereWithoutCartInput {
  where: ItemWhereInput
  data: ItemUpdateWithoutCartInput!
}

input ProjectUpdateOneWithoutOrderCartNestedInput {
  create: ProjectCreateWithoutOrderCartInput
  connectOrCreate: ProjectCreateOrConnectWithoutOrderCartInput
  upsert: ProjectUpsertWithoutOrderCartInput
  disconnect: ProjectWhereInput
  delete: ProjectWhereInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateToOneWithWhereWithoutOrderCartInput
}

input ProjectUpsertWithoutOrderCartInput {
  update: ProjectUpdateWithoutOrderCartInput!
  create: ProjectCreateWithoutOrderCartInput!
  where: ProjectWhereInput
}

input ProjectUpdateWithoutOrderCartInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  projectCategory: EnumProjectCategoryFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  returnRate: FloatFieldUpdateOperationsInput
  goalAmount: FloatFieldUpdateOperationsInput
  maxGoalAmountVersion: NullableIntFieldUpdateOperationsInput
  minimumInvestment: FloatFieldUpdateOperationsInput
  maxInvestor: IntFieldUpdateOperationsInput
  maxInvestorVersion: NullableIntFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutProjectImageNestedInput
}

input ImagesUpdateManyWithoutProjectImageNestedInput {
  create: [ImagesCreateWithoutProjectImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProjectImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutProjectImageInput!]
  createMany: ImagesCreateManyProjectImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutProjectImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutProjectImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpsertWithWhereUniqueWithoutProjectImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutProjectImageInput!
  create: ImagesCreateWithoutProjectImageInput!
}

input ImagesUpdateWithoutProjectImageInput {
  url: StringFieldUpdateOperationsInput
  hotelImage: HotelUpdateOneWithoutImagesNestedInput
  programImage: ProgramUpdateOneWithoutImagesNestedInput
  rewardImage: RewardUpdateOneWithoutImagesNestedInput
}

input ImagesUpdateWithWhereUniqueWithoutProjectImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutProjectImageInput!
}

input ImagesUpdateManyWithWhereWithoutProjectImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input ProjectUpdateToOneWithWhereWithoutOrderCartInput {
  where: ProjectWhereInput
  data: ProjectUpdateWithoutOrderCartInput!
}

input CartUpdateWithWhereUniqueWithoutOrderInput {
  where: CartWhereUniqueInput!
  data: CartUpdateWithoutOrderInput!
}

input CartUpdateManyWithWhereWithoutOrderInput {
  where: CartScalarWhereInput!
  data: CartUpdateManyMutationInput!
}

input CartScalarWhereInput {
  AND: [CartScalarWhereInput!]
  OR: [CartScalarWhereInput!]
  NOT: [CartScalarWhereInput!]
  id: IntFilter
  orderId: IntFilter
  membershipItemId: IntNullableFilter
  projectItemId: IntNullableFilter
  quantity: IntFilter
  price: FloatFilter
  cost: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CartUpdateManyMutationInput {
  quantity: IntFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input InvoiceUpdateOneRequiredWithoutOrderNestedInput {
  create: InvoiceCreateWithoutOrderInput
  connectOrCreate: InvoiceCreateOrConnectWithoutOrderInput
  upsert: InvoiceUpsertWithoutOrderInput
  connect: InvoiceWhereUniqueInput
  update: InvoiceUpdateToOneWithWhereWithoutOrderInput
}

input InvoiceUpsertWithoutOrderInput {
  update: InvoiceUpdateWithoutOrderInput!
  create: InvoiceCreateWithoutOrderInput!
  where: InvoiceWhereInput
}

input InvoiceUpdateWithoutOrderInput {
  adminFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
}

input InvoiceUpdateToOneWithWhereWithoutOrderInput {
  where: InvoiceWhereInput
  data: InvoiceUpdateWithoutOrderInput!
}

input OrderUpdateToOneWithWhereWithoutShippingInput {
  where: OrderWhereInput
  data: OrderUpdateWithoutShippingInput!
}

input ShippingUpdateToOneWithWhereWithoutAddressInput {
  where: ShippingWhereInput
  data: ShippingUpdateWithoutAddressInput!
}

input AddressUpdateToOneWithWhereWithoutSchoolInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutSchoolInput!
}

input SchoolUpdateToOneWithWhereWithoutStudentsInput {
  where: SchoolWhereInput
  data: SchoolUpdateWithoutStudentsInput!
}

input UserUpdateToOneWithWhereWithoutAddressInput {
  where: UserWhereInput
  data: UserUpdateWithoutAddressInput!
}

input SchoolUpdateOneWithoutAddressNestedInput {
  create: SchoolCreateWithoutAddressInput
  connectOrCreate: SchoolCreateOrConnectWithoutAddressInput
  upsert: SchoolUpsertWithoutAddressInput
  disconnect: SchoolWhereInput
  delete: SchoolWhereInput
  connect: SchoolWhereUniqueInput
  update: SchoolUpdateToOneWithWhereWithoutAddressInput
}

input SchoolCreateWithoutAddressInput {
  name: String!
}

input SchoolCreateOrConnectWithoutAddressInput {
  where: SchoolWhereUniqueInput!
  create: SchoolCreateWithoutAddressInput!
}

input SchoolUpsertWithoutAddressInput {
  update: SchoolUpdateWithoutAddressInput!
  create: SchoolCreateWithoutAddressInput!
  where: SchoolWhereInput
}

input SchoolUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
}

input SchoolUpdateToOneWithWhereWithoutAddressInput {
  where: SchoolWhereInput
  data: SchoolUpdateWithoutAddressInput!
}

input AddressUpdateToOneWithWhereWithoutHotelInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutHotelInput!
}

input HotelUpdateToOneWithWhereWithoutCheckInsInput {
  where: HotelWhereInput
  data: HotelUpdateWithoutCheckInsInput!
}

input CheckInCreateManyUserInputEnvelope {
  data: [CheckInCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CheckInCreateManyUserInput {
  id: Int
  hotelId: Int!
  checkInAt: DateTime
}

input CheckInUpdateWithWhereUniqueWithoutUserInput {
  where: CheckInWhereUniqueInput!
  data: CheckInUpdateWithoutUserInput!
}

input CheckInUpdateManyWithWhereWithoutUserInput {
  where: CheckInScalarWhereInput!
  data: CheckInUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutProgramsCreatedInput {
  where: UserWhereInput
  data: UserUpdateWithoutProgramsCreatedInput!
}

input UserUpdateManyWithoutProgramsParticipationNestedInput {
  create: [UserCreateWithoutProgramsParticipationInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProgramsParticipationInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProgramsParticipationInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProgramsParticipationInput!]
  updateMany: [UserUpdateManyWithWhereWithoutProgramsParticipationInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserCreateWithoutProgramsParticipationInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutProgramsParticipationInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProgramsParticipationInput!
}

input UserUpsertWithWhereUniqueWithoutProgramsParticipationInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProgramsParticipationInput!
  create: UserCreateWithoutProgramsParticipationInput!
}

input UserUpdateWithoutProgramsParticipationInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
}

input UserUpdateWithWhereUniqueWithoutProgramsParticipationInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProgramsParticipationInput!
}

input UserUpdateManyWithWhereWithoutProgramsParticipationInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringNullableFilter
  email: StringFilter
  addressId: IntFilter
  userRole: EnumUserRoleFilter
  userType: EnumUserTypeFilter
  avatarUrl: StringNullableFilter
  whatsappNumber: StringFilter
  whatsappVerifiedAt: DateTimeNullableFilter
  password: StringFilter
  referralCode: StringFilter
  status: EnumUserStatusFilter
  schoolId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  theme: EnumThemeFilter
}

input UserUpdateManyMutationInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
}

input ProgramUpdateToOneWithWhereWithoutImagesInput {
  where: ProgramWhereInput
  data: ProgramUpdateWithoutImagesInput!
}

input ImagesUpdateWithWhereUniqueWithoutHotelImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutHotelImageInput!
}

input ImagesUpdateManyWithWhereWithoutHotelImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input HotelUpdateToOneWithWhereWithoutAddressInput {
  where: HotelWhereInput
  data: HotelUpdateWithoutAddressInput!
}

input AddressUpdateToOneWithWhereWithoutUserInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutUserInput!
}

input ItemCreateInput {
  name: String!
  description: String!
  price: Float!
  cost: Float!
  userRole: UserRole!
  createdAt: DateTime
  updatedAt: DateTime
  cart: CartCreateNestedManyWithoutMembershipItemInput
}

input CartCreateNestedManyWithoutMembershipItemInput {
  create: [CartCreateWithoutMembershipItemInput!]
  connectOrCreate: [CartCreateOrConnectWithoutMembershipItemInput!]
  createMany: CartCreateManyMembershipItemInputEnvelope
  connect: [CartWhereUniqueInput!]
}

input CartCreateWithoutMembershipItemInput {
  quantity: Int!
  price: Float!
  cost: Float!
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutCartInput!
  projectItem: ProjectCreateNestedOneWithoutOrderCartInput
}

input OrderCreateNestedOneWithoutCartInput {
  create: OrderCreateWithoutCartInput
  connectOrCreate: OrderCreateOrConnectWithoutCartInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutCartInput {
  status: TransactionStatus!
  shippingId: Int
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  orderBy: UserCreateNestedOneWithoutOrdersInput!
  shipping: ShippingCreateNestedOneWithoutOrderInput
  invoice: InvoiceCreateNestedOneWithoutOrderInput!
}

input OrderCreateOrConnectWithoutCartInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutCartInput!
}

input CartCreateOrConnectWithoutMembershipItemInput {
  where: CartWhereUniqueInput!
  create: CartCreateWithoutMembershipItemInput!
}

input CartCreateManyMembershipItemInputEnvelope {
  data: [CartCreateManyMembershipItemInput!]!
  skipDuplicates: Boolean
}

input CartCreateManyMembershipItemInput {
  id: Int
  orderId: Int!
  projectItemId: Int
  quantity: Int!
  price: Float!
  cost: Float!
  createdAt: DateTime
  updatedAt: DateTime
}

input ItemCreateManyInput {
  id: Int
  name: String!
  description: String!
  price: Float!
  cost: Float!
  userRole: UserRole!
  createdAt: DateTime
  updatedAt: DateTime
}

input ItemUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  cart: CartUpdateManyWithoutMembershipItemNestedInput
}

input CartUpdateManyWithoutMembershipItemNestedInput {
  create: [CartCreateWithoutMembershipItemInput!]
  connectOrCreate: [CartCreateOrConnectWithoutMembershipItemInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutMembershipItemInput!]
  createMany: CartCreateManyMembershipItemInputEnvelope
  set: [CartWhereUniqueInput!]
  disconnect: [CartWhereUniqueInput!]
  delete: [CartWhereUniqueInput!]
  connect: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutMembershipItemInput!]
  updateMany: [CartUpdateManyWithWhereWithoutMembershipItemInput!]
  deleteMany: [CartScalarWhereInput!]
}

input CartUpsertWithWhereUniqueWithoutMembershipItemInput {
  where: CartWhereUniqueInput!
  update: CartUpdateWithoutMembershipItemInput!
  create: CartCreateWithoutMembershipItemInput!
}

input CartUpdateWithoutMembershipItemInput {
  quantity: IntFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutCartNestedInput
  projectItem: ProjectUpdateOneWithoutOrderCartNestedInput
}

input OrderUpdateOneRequiredWithoutCartNestedInput {
  create: OrderCreateWithoutCartInput
  connectOrCreate: OrderCreateOrConnectWithoutCartInput
  upsert: OrderUpsertWithoutCartInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateToOneWithWhereWithoutCartInput
}

input OrderUpsertWithoutCartInput {
  update: OrderUpdateWithoutCartInput!
  create: OrderCreateWithoutCartInput!
  where: OrderWhereInput
}

input OrderUpdateWithoutCartInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  orderBy: UserUpdateOneRequiredWithoutOrdersNestedInput
  shipping: ShippingUpdateOneWithoutOrderNestedInput
  invoice: InvoiceUpdateOneRequiredWithoutOrderNestedInput
}

input ShippingUpdateOneWithoutOrderNestedInput {
  create: ShippingCreateWithoutOrderInput
  connectOrCreate: ShippingCreateOrConnectWithoutOrderInput
  upsert: ShippingUpsertWithoutOrderInput
  disconnect: ShippingWhereInput
  delete: ShippingWhereInput
  connect: ShippingWhereUniqueInput
  update: ShippingUpdateToOneWithWhereWithoutOrderInput
}

input ShippingUpsertWithoutOrderInput {
  update: ShippingUpdateWithoutOrderInput!
  create: ShippingCreateWithoutOrderInput!
  where: ShippingWhereInput
}

input ShippingUpdateWithoutOrderInput {
  logisticName: StringFieldUpdateOperationsInput
  deliveryDate: NullableDateTimeFieldUpdateOperationsInput
  courier: NullableStringFieldUpdateOperationsInput
  estimatedTime: NullableStringFieldUpdateOperationsInput
  trackingNo: NullableStringFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutShippingNestedInput
}

input AddressUpdateOneRequiredWithoutShippingNestedInput {
  create: AddressCreateWithoutShippingInput
  connectOrCreate: AddressCreateOrConnectWithoutShippingInput
  upsert: AddressUpsertWithoutShippingInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutShippingInput
}

input AddressCreateWithoutShippingInput {
  name: String!
  subdistrict: SubdistrictCreateNestedOneWithoutAddressInput!
}

input AddressCreateOrConnectWithoutShippingInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutShippingInput!
}

input AddressUpsertWithoutShippingInput {
  update: AddressUpdateWithoutShippingInput!
  create: AddressCreateWithoutShippingInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutShippingInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  subdistrict: SubdistrictUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
}

input AddressUpdateToOneWithWhereWithoutShippingInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutShippingInput!
}

input ShippingUpdateToOneWithWhereWithoutOrderInput {
  where: ShippingWhereInput
  data: ShippingUpdateWithoutOrderInput!
}

input OrderUpdateToOneWithWhereWithoutCartInput {
  where: OrderWhereInput
  data: OrderUpdateWithoutCartInput!
}

input CartUpdateWithWhereUniqueWithoutMembershipItemInput {
  where: CartWhereUniqueInput!
  data: CartUpdateWithoutMembershipItemInput!
}

input CartUpdateManyWithWhereWithoutMembershipItemInput {
  where: CartScalarWhereInput!
  data: CartUpdateManyMutationInput!
}

input ItemUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramCreateInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  Images: ImagesCreateNestedManyWithoutProgramImageInput
  createdBy: UserCreateNestedOneWithoutProgramsCreatedInput!
  category: ProgramCategoryCreateNestedOneWithoutProgramsInput!
}

input ProgramCreateManyInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  createdById: String!
}

input ProgramUpdateInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Images: ImagesUpdateManyWithoutProgramImageNestedInput
  createdBy: UserUpdateOneRequiredWithoutProgramsCreatedNestedInput
  participant: UserUpdateManyWithoutProgramsParticipationNestedInput
  category: ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput
}

input BankCreateInput {
  name: String!
  logoUrl: String
  accountNumber: Float
}

input BankCreateManyInput {
  id: Int
  name: String!
  logoUrl: String
  accountNumber: Float
}

input BankUpdateInput {
  name: StringFieldUpdateOperationsInput
  logoUrl: NullableStringFieldUpdateOperationsInput
  accountNumber: NullableFloatFieldUpdateOperationsInput
}

input NullableFloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input BankUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  logoUrl: NullableStringFieldUpdateOperationsInput
  accountNumber: NullableFloatFieldUpdateOperationsInput
}

input CreateDisbursementArgs {
  """
  The account number of the recipient.
  """
  account_number: String!

  """
  Bank code of the recipient bank.
  """
  bank_code: String!

  """
  The amount of money to be disbursed
  """
  amount: Int!
}

input CreateBillArgs {
  title: String!
  type: BillType!
  amount: Int
  expired_date: String
  redirect_url: String
  is_address_required: Int
  is_phone_number_required: Int
  step: Int!
  sender_name: String
  sender_email: String
  sender_phone_number: String
  sender_address: String
  sender_bank: String
  sender_bank_type: BillSenderBankType
}

input UpdateBillArgs {
  bill_id: String!
  title: String
  type: BillType
  amount: Int
  expired_date: String
  redirect_url: String
  status: BillStatus
  is_address_required: Int
  is_phone_number_required: Int
}

input RewardCreateInput {
  name: String!
  pointCost: Float!
  description: String!
  images: ImagesCreateNestedManyWithoutRewardImageInput
}

input ImagesCreateNestedManyWithoutRewardImageInput {
  create: [ImagesCreateWithoutRewardImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutRewardImageInput!]
  createMany: ImagesCreateManyRewardImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateWithoutRewardImageInput {
  url: String!
}

input ImagesCreateOrConnectWithoutRewardImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutRewardImageInput!
}

input ImagesCreateManyRewardImageInputEnvelope {
  data: [ImagesCreateManyRewardImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateManyRewardImageInput {
  url: String!
}

input RewardCreateManyInput {
  name: String!
  pointCost: Float!
  description: String!
}

input RewardUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutRewardImageNestedInput
}

input ImagesUpdateManyWithoutRewardImageNestedInput {
  create: [ImagesCreateWithoutRewardImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutRewardImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutRewardImageInput!]
  createMany: ImagesCreateManyRewardImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutRewardImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutRewardImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpsertWithWhereUniqueWithoutRewardImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutRewardImageInput!
  create: ImagesCreateWithoutRewardImageInput!
}

input ImagesUpdateWithoutRewardImageInput {
  url: StringFieldUpdateOperationsInput
  hotelImage: HotelUpdateOneWithoutImagesNestedInput
  programImage: ProgramUpdateOneWithoutImagesNestedInput
  projectImage: ProjectUpdateOneWithoutImagesNestedInput
}

input ImagesUpdateWithWhereUniqueWithoutRewardImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutRewardImageInput!
}

input ImagesUpdateManyWithWhereWithoutRewardImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input RewardUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

"""
Available ratios for images, SQUARE = 192x192, MODERN = 1920X1080 MODER_PORTRAIT = 1080x1920, OLD = 1400x1050, OLD_PORTRAIT = 1050x1400, BANNER = 1128x192, ULTRA_WIDE = 2560x1080, SUPER_WIDE = 3840x1080
"""
enum RatioEnum {
  SQUARE
  MODERN
  MODERN_PORTRAIT
  OLD
  OLD_PORTRAIT
  BANNER
  ULTRA_WIDE
  SUPER_WIDE
}

input TransactionCreateInput {
  amount: Float!
  proofUrl: String
  transactionCategory: TransactionCategory!
  invoice: InvoiceCreateNestedOneWithoutTransactionsInput
  withdrawalRequest: WithdrawalRequestCreateNestedOneWithoutTransactionInput
}

input TransactionCreateManyInput {
  id: Int
  amount: Float!
  proofUrl: String
  transactionCategory: TransactionCategory!
  invoiceId: Int
  installmentId: Int
  withdrawalRequestId: Int
}

input TransactionUpdateInput {
  amount: FloatFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  invoice: InvoiceUpdateOneWithoutTransactionsNestedInput
}

input EnumTransactionCategoryFieldUpdateOperationsInput {
  set: TransactionCategory
}

input InvoiceUpdateOneWithoutTransactionsNestedInput {
  create: InvoiceCreateWithoutTransactionsInput
  connectOrCreate: InvoiceCreateOrConnectWithoutTransactionsInput
  upsert: InvoiceUpsertWithoutTransactionsInput
  disconnect: InvoiceWhereInput
  delete: InvoiceWhereInput
  connect: InvoiceWhereUniqueInput
  update: InvoiceUpdateToOneWithWhereWithoutTransactionsInput
}

input InvoiceUpsertWithoutTransactionsInput {
  update: InvoiceUpdateWithoutTransactionsInput!
  create: InvoiceCreateWithoutTransactionsInput!
  where: InvoiceWhereInput
}

input InvoiceUpdateWithoutTransactionsInput {
  adminFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
}

input InvoiceUpdateToOneWithWhereWithoutTransactionsInput {
  where: InvoiceWhereInput
  data: InvoiceUpdateWithoutTransactionsInput!
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
}

input InvoiceCreateInput {
  adminFee: Float!
  amount: Float!
  Order: OrderCreateNestedOneWithoutInvoiceInput
  transactions: TransactionCreateNestedManyWithoutInvoiceInput
  Installments: InstallmentCreateNestedManyWithoutInvoiceInput
}

input InvoiceCreateManyInput {
  id: Int
  adminFee: Float!
  amount: Float!
}

input InvoiceUpdateInput {
  adminFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
}

input InvoiceUpdateManyMutationInput {
  adminFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
}

input AccountCreateManyInput {
  id: Int
  accountNumber: Float
  name: String!
  userId: String!
  accountCategory: AccountCategory!
}

input AccountUpdateInput {
  accountNumber: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  accountCategory: EnumAccountCategoryFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
  transactionOrigins: TransactionUpdateManyWithoutFromAccountNestedInput
  transactionDestination: TransactionUpdateManyWithoutToAccountNestedInput
}

input EnumAccountCategoryFieldUpdateOperationsInput {
  set: AccountCategory
}

input UserUpdateOneRequiredWithoutAccountsNestedInput {
  create: UserCreateWithoutAccountsInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutAccountsInput
}

input UserCreateWithoutAccountsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAccountsInput!
}

input UserUpsertWithoutAccountsInput {
  update: UserUpdateWithoutAccountsInput!
  create: UserCreateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpdateWithoutAccountsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  programsParticipation: ProgramUpdateManyWithoutParticipantNestedInput
}

input UserUpdateToOneWithWhereWithoutAccountsInput {
  where: UserWhereInput
  data: UserUpdateWithoutAccountsInput!
}

input TransactionUpdateManyWithoutFromAccountNestedInput {
  create: [TransactionCreateWithoutFromAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutFromAccountInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutFromAccountInput!]
  createMany: TransactionCreateManyFromAccountInputEnvelope
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutFromAccountInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutFromAccountInput!]
  deleteMany: [TransactionScalarWhereInput!]
}

input TransactionCreateWithoutFromAccountInput {
  amount: Float!
  proofUrl: String
  transactionCategory: TransactionCategory!
  invoice: InvoiceCreateNestedOneWithoutTransactionsInput
  withdrawalRequest: WithdrawalRequestCreateNestedOneWithoutTransactionInput
}

input TransactionCreateOrConnectWithoutFromAccountInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutFromAccountInput!
}

input TransactionUpsertWithWhereUniqueWithoutFromAccountInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutFromAccountInput!
  create: TransactionCreateWithoutFromAccountInput!
}

input TransactionUpdateWithoutFromAccountInput {
  amount: FloatFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  invoice: InvoiceUpdateOneWithoutTransactionsNestedInput
}

input TransactionCreateManyFromAccountInputEnvelope {
  data: [TransactionCreateManyFromAccountInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyFromAccountInput {
  id: Int
  amount: Float!
  proofUrl: String
  transactionCategory: TransactionCategory!
  invoiceId: Int
  installmentId: Int
  withdrawalRequestId: Int
}

input TransactionUpdateWithWhereUniqueWithoutFromAccountInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutFromAccountInput!
}

input TransactionUpdateManyWithWhereWithoutFromAccountInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyMutationInput!
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  id: IntFilter
  amount: FloatFilter
  proofUrl: StringNullableFilter
  status: EnumTransactionStatusFilter
  transactionCategory: EnumTransactionCategoryFilter
  fromAccountId: IntFilter
  toAccountId: IntFilter
  invoiceId: IntNullableFilter
  installmentId: IntNullableFilter
  withdrawalRequestId: IntNullableFilter
  uniqueCode: IntNullableFilter
  createdAt: DateTimeFilter
}

input TransactionUpdateManyWithoutToAccountNestedInput {
  create: [TransactionCreateWithoutToAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutToAccountInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutToAccountInput!]
  createMany: TransactionCreateManyToAccountInputEnvelope
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutToAccountInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutToAccountInput!]
  deleteMany: [TransactionScalarWhereInput!]
}

input TransactionCreateWithoutToAccountInput {
  amount: Float!
  proofUrl: String
  transactionCategory: TransactionCategory!
  invoice: InvoiceCreateNestedOneWithoutTransactionsInput
  withdrawalRequest: WithdrawalRequestCreateNestedOneWithoutTransactionInput
}

input TransactionCreateOrConnectWithoutToAccountInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutToAccountInput!
}

input TransactionUpsertWithWhereUniqueWithoutToAccountInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutToAccountInput!
  create: TransactionCreateWithoutToAccountInput!
}

input TransactionUpdateWithoutToAccountInput {
  amount: FloatFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  invoice: InvoiceUpdateOneWithoutTransactionsNestedInput
}

input TransactionCreateManyToAccountInputEnvelope {
  data: [TransactionCreateManyToAccountInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyToAccountInput {
  id: Int
  amount: Float!
  proofUrl: String
  transactionCategory: TransactionCategory!
  invoiceId: Int
  installmentId: Int
  withdrawalRequestId: Int
}

input TransactionUpdateWithWhereUniqueWithoutToAccountInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutToAccountInput!
}

input TransactionUpdateManyWithWhereWithoutToAccountInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyMutationInput!
}

input WithdrawalRequestCreateInput {
  amount: Float!
  user: UserCreateNestedOneWithoutWithdrawalRequestInput!
}

input WithdrawalRequestCreateManyInput {
  id: Int
  userId: String!
  amount: Float!
}

input WithdrawalRequestUpdateInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  proofDescription: NullableStringFieldUpdateOperationsInput
}

input WithdrawalRequestUpdateManyMutationInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  proofDescription: NullableStringFieldUpdateOperationsInput
}

input FileCreateInput {
  filesize: Float
  name: String!
  description: String!
  url: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserCreateNestedOneWithoutFilesCreatedInput!
}

input UserCreateNestedOneWithoutFilesCreatedInput {
  create: UserCreateWithoutFilesCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutFilesCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFilesCreatedInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutFilesCreatedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutFilesCreatedInput!
}

input FileCreateManyInput {
  id: Int
  filesize: Float
  name: String!
  description: String!
  url: String!
  createdById: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input FileUpdateInput {
  filesize: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutFilesCreatedNestedInput
}

input UserUpdateOneRequiredWithoutFilesCreatedNestedInput {
  create: UserCreateWithoutFilesCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutFilesCreatedInput
  upsert: UserUpsertWithoutFilesCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutFilesCreatedInput
}

input UserUpsertWithoutFilesCreatedInput {
  update: UserUpdateWithoutFilesCreatedInput!
  create: UserCreateWithoutFilesCreatedInput!
  where: UserWhereInput
}

input UserUpdateWithoutFilesCreatedInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  programsParticipation: ProgramUpdateManyWithoutParticipantNestedInput
}

input UserUpdateToOneWithWhereWithoutFilesCreatedInput {
  where: UserWhereInput
  data: UserUpdateWithoutFilesCreatedInput!
}

input FileUpdateManyMutationInput {
  filesize: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input HotelCreateInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  version: Int
  address: AddressCreateNestedOneWithoutHotelInput!
  images: ImagesCreateNestedManyWithoutHotelImageInput
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input HotelCreateManyInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  version: Int
}

input HotelUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  version: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutHotelNestedInput
  images: ImagesUpdateManyWithoutHotelImageNestedInput
  checkIns: CheckInUpdateManyWithoutHotelNestedInput
  createdBy: UserUpdateOneRequiredWithoutHotelsCreatedNestedInput
}

input HotelUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  version: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LoginArgs {
  """
  Masukkan email
  """
  email: String!

  """
  Masukkan password
  """
  password: String!
}

input ProgramCategoryCreateInput {
  name: String!
  programs: ProgramCreateNestedManyWithoutCategoryInput
}

input ProgramCreateNestedManyWithoutCategoryInput {
  create: [ProgramCreateWithoutCategoryInput!]
  connectOrCreate: [ProgramCreateOrConnectWithoutCategoryInput!]
  createMany: ProgramCreateManyCategoryInputEnvelope
  connect: [ProgramWhereUniqueInput!]
}

input ProgramCreateWithoutCategoryInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  Images: ImagesCreateNestedManyWithoutProgramImageInput
  createdBy: UserCreateNestedOneWithoutProgramsCreatedInput!
}

input ProgramCreateOrConnectWithoutCategoryInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutCategoryInput!
}

input ProgramCreateManyCategoryInputEnvelope {
  data: [ProgramCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input ProgramCreateManyCategoryInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  createdById: String!
}

input ProgramCategoryCreateManyInput {
  id: Int
  name: String!
}

input ProgramCategoryUpdateInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  programs: ProgramUpdateManyWithoutCategoryNestedInput
}

input ProgramUpdateManyWithoutCategoryNestedInput {
  create: [ProgramCreateWithoutCategoryInput!]
  connectOrCreate: [ProgramCreateOrConnectWithoutCategoryInput!]
  upsert: [ProgramUpsertWithWhereUniqueWithoutCategoryInput!]
  createMany: ProgramCreateManyCategoryInputEnvelope
  set: [ProgramWhereUniqueInput!]
  disconnect: [ProgramWhereUniqueInput!]
  delete: [ProgramWhereUniqueInput!]
  connect: [ProgramWhereUniqueInput!]
  update: [ProgramUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProgramUpdateManyWithWhereWithoutCategoryInput!]
  deleteMany: [ProgramScalarWhereInput!]
}

input ProgramUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProgramWhereUniqueInput!
  update: ProgramUpdateWithoutCategoryInput!
  create: ProgramCreateWithoutCategoryInput!
}

input ProgramUpdateWithoutCategoryInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Images: ImagesUpdateManyWithoutProgramImageNestedInput
  createdBy: UserUpdateOneRequiredWithoutProgramsCreatedNestedInput
  participant: UserUpdateManyWithoutProgramsParticipationNestedInput
}

input ProgramUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProgramWhereUniqueInput!
  data: ProgramUpdateWithoutCategoryInput!
}

input ProgramUpdateManyWithWhereWithoutCategoryInput {
  where: ProgramScalarWhereInput!
  data: ProgramUpdateManyMutationInput!
}

input ProgramCategoryUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FaqCreateInput {
  name: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  type: FaqType!
}

input FaqCreateManyInput {
  id: Int
  name: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  type: FaqType!
}

input FaqUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  type: EnumFaqTypeFieldUpdateOperationsInput
}

input EnumFaqTypeFieldUpdateOperationsInput {
  set: FaqType
}

input FaqUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  type: EnumFaqTypeFieldUpdateOperationsInput
}

input ProjectCreateInput {
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Float!
  maxGoalAmountVersion: Int
  minimumInvestment: Float!
  maxInvestor: Int!
  maxInvestorVersion: Int
  images: ImagesCreateNestedManyWithoutProjectImageInput
}

input ProjectUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  projectCategory: EnumProjectCategoryFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  returnRate: FloatFieldUpdateOperationsInput
  goalAmount: FloatFieldUpdateOperationsInput
  maxGoalAmountVersion: NullableIntFieldUpdateOperationsInput
  minimumInvestment: FloatFieldUpdateOperationsInput
  maxInvestor: IntFieldUpdateOperationsInput
  maxInvestorVersion: NullableIntFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutProjectImageNestedInput
}

input ProjectUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  projectCategory: EnumProjectCategoryFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  returnRate: FloatFieldUpdateOperationsInput
  goalAmount: FloatFieldUpdateOperationsInput
  maxGoalAmountVersion: NullableIntFieldUpdateOperationsInput
  minimumInvestment: FloatFieldUpdateOperationsInput
  maxInvestor: IntFieldUpdateOperationsInput
  maxInvestorVersion: NullableIntFieldUpdateOperationsInput
}

input ShippingCreateInput {
  logisticName: String!
  deliveryDate: DateTime
  courier: String
  estimatedTime: String
  trackingNo: String
  order: OrderCreateNestedOneWithoutShippingInput!
}

input ShippingCreateManyInput {
  id: Int
  logisticName: String!
  deliveryDate: DateTime
  courier: String
  estimatedTime: String
  trackingNo: String
  orderId: Int!
}

input ShippingUpdateInput {
  logisticName: StringFieldUpdateOperationsInput
  deliveryDate: NullableDateTimeFieldUpdateOperationsInput
  courier: NullableStringFieldUpdateOperationsInput
  estimatedTime: NullableStringFieldUpdateOperationsInput
  trackingNo: NullableStringFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutShippingNestedInput
  order: OrderUpdateOneRequiredWithoutShippingNestedInput
}

input ShippingUpdateManyMutationInput {
  logisticName: StringFieldUpdateOperationsInput
  deliveryDate: NullableDateTimeFieldUpdateOperationsInput
  courier: NullableStringFieldUpdateOperationsInput
  estimatedTime: NullableStringFieldUpdateOperationsInput
  trackingNo: NullableStringFieldUpdateOperationsInput
}

input CheckInCreateInput {
  checkInAt: DateTime
  user: UserCreateNestedOneWithoutCheckInsInput!
  hotel: HotelCreateNestedOneWithoutCheckInsInput!
}

input CheckInCreateManyInput {
  id: Int
  userId: String!
  hotelId: Int!
  checkInAt: DateTime
}

input CheckInUpdateInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCheckInsNestedInput
  hotel: HotelUpdateOneRequiredWithoutCheckInsNestedInput
}

input UserNotificationUpdateInput {
  title: StringFieldUpdateOperationsInput
  subtitle: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  category: EnumUserNotificationCategoryFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  isCleared: BoolFieldUpdateOperationsInput
  deepLink: NullableStringFieldUpdateOperationsInput
  fcmToken: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserNotificationsNestedInput
}

input EnumUserNotificationCategoryFieldUpdateOperationsInput {
  set: UserNotificationCategory
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input UserUpdateOneRequiredWithoutUserNotificationsNestedInput {
  create: UserCreateWithoutUserNotificationsInput
  connectOrCreate: UserCreateOrConnectWithoutUserNotificationsInput
  upsert: UserUpsertWithoutUserNotificationsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutUserNotificationsInput
}

input UserCreateWithoutUserNotificationsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutUserNotificationsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutUserNotificationsInput!
}

input UserUpsertWithoutUserNotificationsInput {
  update: UserUpdateWithoutUserNotificationsInput!
  create: UserCreateWithoutUserNotificationsInput!
  where: UserWhereInput
}

input UserUpdateWithoutUserNotificationsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  whatsappVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  programsParticipation: ProgramUpdateManyWithoutParticipantNestedInput
}

input UserUpdateToOneWithWhereWithoutUserNotificationsInput {
  where: UserWhereInput
  data: UserUpdateWithoutUserNotificationsInput!
}

input UserNotificationUpdateManyMutationInput {
  title: StringFieldUpdateOperationsInput
  subtitle: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  category: EnumUserNotificationCategoryFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  isCleared: BoolFieldUpdateOperationsInput
  deepLink: NullableStringFieldUpdateOperationsInput
  fcmToken: NullableStringFieldUpdateOperationsInput
}

input SchoolCreateInput {
  name: String!
  address: AddressCreateNestedOneWithoutSchoolInput!
}

input SchoolCreateManyInput {
  name: String!
}

input SchoolUpdateInput {
  name: StringFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutSchoolNestedInput
}

input SchoolUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input AddressCreateInput {
  name: String!
  subdistrict: SubdistrictCreateNestedOneWithoutAddressInput!
}

input AddressCreateManyInput {
  name: String!
  subdistrictId: Int!
}

input AddressUpdateInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  subdistrict: SubdistrictUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input AddressUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderCreateInput {
  status: TransactionStatus!
  shippingId: Int
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  orderBy: UserCreateNestedOneWithoutOrdersInput!
  cart: CartCreateNestedManyWithoutOrderInput
  shipping: ShippingCreateNestedOneWithoutOrderInput
  invoice: InvoiceCreateNestedOneWithoutOrderInput!
}

input OrderCreateManyInput {
  id: Int
  status: TransactionStatus!
  orderById: String!
  shippingId: Int
  invoiceId: Int!
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderUpdateInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  orderBy: UserUpdateOneRequiredWithoutOrdersNestedInput
  cart: CartUpdateManyWithoutOrderNestedInput
  shipping: ShippingUpdateOneWithoutOrderNestedInput
  invoice: InvoiceUpdateOneRequiredWithoutOrderNestedInput
}

input OrderUpdateManyMutationInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CityCreateInput {
  name: String!
  province: ProvinceCreateNestedOneWithoutCitiesInput!
  districts: DistrictCreateNestedManyWithoutCityInput
}

input DistrictCreateNestedManyWithoutCityInput {
  create: [DistrictCreateWithoutCityInput!]
  connectOrCreate: [DistrictCreateOrConnectWithoutCityInput!]
  createMany: DistrictCreateManyCityInputEnvelope
  connect: [DistrictWhereUniqueInput!]
}

input DistrictCreateWithoutCityInput {
  name: String!
  subdistricts: SubdistrictCreateNestedManyWithoutDistrictInput
}

input SubdistrictCreateNestedManyWithoutDistrictInput {
  create: [SubdistrictCreateWithoutDistrictInput!]
  connectOrCreate: [SubdistrictCreateOrConnectWithoutDistrictInput!]
  createMany: SubdistrictCreateManyDistrictInputEnvelope
  connect: [SubdistrictWhereUniqueInput!]
}

input SubdistrictCreateWithoutDistrictInput {
  name: String!
  postalCode: String!
  address: AddressCreateNestedManyWithoutSubdistrictInput
}

input AddressCreateNestedManyWithoutSubdistrictInput {
  create: [AddressCreateWithoutSubdistrictInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutSubdistrictInput!]
  createMany: AddressCreateManySubdistrictInputEnvelope
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateWithoutSubdistrictInput {
  name: String!
}

input AddressCreateOrConnectWithoutSubdistrictInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutSubdistrictInput!
}

input AddressCreateManySubdistrictInputEnvelope {
  data: [AddressCreateManySubdistrictInput!]!
  skipDuplicates: Boolean
}

input AddressCreateManySubdistrictInput {
  name: String!
}

input SubdistrictCreateOrConnectWithoutDistrictInput {
  where: SubdistrictWhereUniqueInput!
  create: SubdistrictCreateWithoutDistrictInput!
}

input SubdistrictCreateManyDistrictInputEnvelope {
  data: [SubdistrictCreateManyDistrictInput!]!
  skipDuplicates: Boolean
}

input SubdistrictCreateManyDistrictInput {
  id: Int
  name: String!
  postalCode: String!
}

input DistrictCreateOrConnectWithoutCityInput {
  where: DistrictWhereUniqueInput!
  create: DistrictCreateWithoutCityInput!
}

input DistrictCreateManyCityInputEnvelope {
  data: [DistrictCreateManyCityInput!]!
  skipDuplicates: Boolean
}

input DistrictCreateManyCityInput {
  id: Int
  name: String!
}

input CityCreateManyInput {
  id: Int
  name: String!
  provinceId: Int!
}

input CityUpdateInput {
  name: StringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutCitiesNestedInput
  districts: DistrictUpdateManyWithoutCityNestedInput
}

input DistrictUpdateManyWithoutCityNestedInput {
  create: [DistrictCreateWithoutCityInput!]
  connectOrCreate: [DistrictCreateOrConnectWithoutCityInput!]
  upsert: [DistrictUpsertWithWhereUniqueWithoutCityInput!]
  createMany: DistrictCreateManyCityInputEnvelope
  set: [DistrictWhereUniqueInput!]
  disconnect: [DistrictWhereUniqueInput!]
  delete: [DistrictWhereUniqueInput!]
  connect: [DistrictWhereUniqueInput!]
  update: [DistrictUpdateWithWhereUniqueWithoutCityInput!]
  updateMany: [DistrictUpdateManyWithWhereWithoutCityInput!]
  deleteMany: [DistrictScalarWhereInput!]
}

input DistrictUpsertWithWhereUniqueWithoutCityInput {
  where: DistrictWhereUniqueInput!
  update: DistrictUpdateWithoutCityInput!
  create: DistrictCreateWithoutCityInput!
}

input DistrictUpdateWithoutCityInput {
  name: StringFieldUpdateOperationsInput
  subdistricts: SubdistrictUpdateManyWithoutDistrictNestedInput
}

input SubdistrictUpdateManyWithoutDistrictNestedInput {
  create: [SubdistrictCreateWithoutDistrictInput!]
  connectOrCreate: [SubdistrictCreateOrConnectWithoutDistrictInput!]
  upsert: [SubdistrictUpsertWithWhereUniqueWithoutDistrictInput!]
  createMany: SubdistrictCreateManyDistrictInputEnvelope
  set: [SubdistrictWhereUniqueInput!]
  disconnect: [SubdistrictWhereUniqueInput!]
  delete: [SubdistrictWhereUniqueInput!]
  connect: [SubdistrictWhereUniqueInput!]
  update: [SubdistrictUpdateWithWhereUniqueWithoutDistrictInput!]
  updateMany: [SubdistrictUpdateManyWithWhereWithoutDistrictInput!]
  deleteMany: [SubdistrictScalarWhereInput!]
}

input SubdistrictUpsertWithWhereUniqueWithoutDistrictInput {
  where: SubdistrictWhereUniqueInput!
  update: SubdistrictUpdateWithoutDistrictInput!
  create: SubdistrictCreateWithoutDistrictInput!
}

input SubdistrictUpdateWithoutDistrictInput {
  name: StringFieldUpdateOperationsInput
  postalCode: StringFieldUpdateOperationsInput
  address: AddressUpdateManyWithoutSubdistrictNestedInput
}

input AddressUpdateManyWithoutSubdistrictNestedInput {
  create: [AddressCreateWithoutSubdistrictInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutSubdistrictInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutSubdistrictInput!]
  createMany: AddressCreateManySubdistrictInputEnvelope
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  delete: [AddressWhereUniqueInput!]
  connect: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutSubdistrictInput!]
  updateMany: [AddressUpdateManyWithWhereWithoutSubdistrictInput!]
  deleteMany: [AddressScalarWhereInput!]
}

input AddressUpsertWithWhereUniqueWithoutSubdistrictInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateWithoutSubdistrictInput!
  create: AddressCreateWithoutSubdistrictInput!
}

input AddressUpdateWithoutSubdistrictInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input AddressUpdateWithWhereUniqueWithoutSubdistrictInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateWithoutSubdistrictInput!
}

input AddressUpdateManyWithWhereWithoutSubdistrictInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyMutationInput!
}

input AddressScalarWhereInput {
  AND: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  NOT: [AddressScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  subdistrictId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input SubdistrictUpdateWithWhereUniqueWithoutDistrictInput {
  where: SubdistrictWhereUniqueInput!
  data: SubdistrictUpdateWithoutDistrictInput!
}

input SubdistrictUpdateManyWithWhereWithoutDistrictInput {
  where: SubdistrictScalarWhereInput!
  data: SubdistrictUpdateManyMutationInput!
}

input SubdistrictScalarWhereInput {
  AND: [SubdistrictScalarWhereInput!]
  OR: [SubdistrictScalarWhereInput!]
  NOT: [SubdistrictScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  districtId: IntFilter
  postalCode: StringFilter
}

input SubdistrictUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  postalCode: StringFieldUpdateOperationsInput
}

input DistrictUpdateWithWhereUniqueWithoutCityInput {
  where: DistrictWhereUniqueInput!
  data: DistrictUpdateWithoutCityInput!
}

input DistrictUpdateManyWithWhereWithoutCityInput {
  where: DistrictScalarWhereInput!
  data: DistrictUpdateManyMutationInput!
}

input DistrictScalarWhereInput {
  AND: [DistrictScalarWhereInput!]
  OR: [DistrictScalarWhereInput!]
  NOT: [DistrictScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  cityId: IntFilter
}

input DistrictUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input CityUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input CartCreateInput {
  quantity: Int!
  price: Float!
  cost: Float!
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutCartInput!
  membershipItem: ItemCreateNestedOneWithoutCartInput
  projectItem: ProjectCreateNestedOneWithoutOrderCartInput
}

input CartCreateManyInput {
  id: Int
  orderId: Int!
  membershipItemId: Int
  projectItemId: Int
  quantity: Int!
  price: Float!
  cost: Float!
  createdAt: DateTime
  updatedAt: DateTime
}

input CartUpdateInput {
  quantity: IntFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutCartNestedInput
  membershipItem: ItemUpdateOneWithoutCartNestedInput
  projectItem: ProjectUpdateOneWithoutOrderCartNestedInput
}

input RewardClaimCreateInput {
  user: UserCreateNestedOneWithoutClaimedRewardsInput!
  reward: RewardCreateNestedOneWithoutRewardClaimInput!
}

input UserCreateNestedOneWithoutClaimedRewardsInput {
  create: UserCreateWithoutClaimedRewardsInput
  connectOrCreate: UserCreateOrConnectWithoutClaimedRewardsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClaimedRewardsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutClaimedRewardsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutClaimedRewardsInput!
}

input RewardCreateNestedOneWithoutRewardClaimInput {
  create: RewardCreateWithoutRewardClaimInput
  connectOrCreate: RewardCreateOrConnectWithoutRewardClaimInput
  connect: RewardWhereUniqueInput
}

input RewardCreateWithoutRewardClaimInput {
  name: String!
  pointCost: Float!
  description: String!
  images: ImagesCreateNestedManyWithoutRewardImageInput
}

input RewardCreateOrConnectWithoutRewardClaimInput {
  where: RewardWhereUniqueInput!
  create: RewardCreateWithoutRewardClaimInput!
}

input RewardClaimCreateManyInput {
  id: Int
  userId: String!
  rewardId: Int!
}

input RewardClaimUpdateInput {
  processedAt: DateTimeFieldUpdateOperationsInput
}

input RewardClaimUpdateManyMutationInput {
  processedAt: DateTimeFieldUpdateOperationsInput
}
